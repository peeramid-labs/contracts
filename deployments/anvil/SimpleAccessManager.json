{
  "address": "0xC9F2CcC6A646d3BB0e9179b59ccCce72B5AAFADF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "string",
          "name": "interfaceName",
          "type": "string"
        }
      ],
      "name": "ERC165CheckFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "OnlyTargetAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        }
      ],
      "name": "disallowedAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "beforeCallResult",
          "type": "bytes"
        }
      ],
      "name": "afterCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "selector",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "beforeCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "selector",
              "type": "bytes4"
            },
            {
              "internalType": "address[]",
              "name": "disallowedAddresses",
              "type": "address[]"
            },
            {
              "internalType": "bool",
              "name": "distributionComponentsOnly",
              "type": "bool"
            }
          ],
          "internalType": "struct SimpleAccessManager.SimpleAccessManagerInitializer[]",
          "name": "methodSettings",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "contract IDistributor",
          "name": "distributor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ca61344d33badb8ee3a9c6f0aef233105448f34e5c5d5d2895d7dcb89c9e0ae",
  "receipt": {
    "to": null,
    "from": "0x6Cf8d74C7875de8C2FfB09228F4bf2A21b25e583",
    "contractAddress": "0xC9F2CcC6A646d3BB0e9179b59ccCce72B5AAFADF",
    "transactionIndex": 0,
    "gasUsed": "968932",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000008000400000000000000000000000000000",
    "blockHash": "0x943e6f254ab5aaba5358ab2cfe14395eeb8aaa023dd35c30215bf017f5ea282b",
    "transactionHash": "0x9ca61344d33badb8ee3a9c6f0aef233105448f34e5c5d5d2895d7dcb89c9e0ae",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7134197,
        "transactionHash": "0x9ca61344d33badb8ee3a9c6f0aef233105448f34e5c5d5d2895d7dcb89c9e0ae",
        "address": "0xC9F2CcC6A646d3BB0e9179b59ccCce72B5AAFADF",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x943e6f254ab5aaba5358ab2cfe14395eeb8aaa023dd35c30215bf017f5ea282b"
      }
    ],
    "blockNumber": 7134197,
    "cumulativeGasUsed": "968932",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2b4595510619c748efb40664c0a37a1f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"string\",\"name\":\"interfaceName\",\"type\":\"string\"}],\"name\":\"ERC165CheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"OnlyTargetAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"disallowedAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"beforeCallResult\",\"type\":\"bytes\"}],\"name\":\"afterCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"beforeCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"internalType\":\"address[]\",\"name\":\"disallowedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"distributionComponentsOnly\",\"type\":\"bool\"}],\"internalType\":\"struct SimpleAccessManager.SimpleAccessManagerInitializer[]\",\"name\":\"methodSettings\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"contract IDistributor\",\"name\":\"distributor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@peeramid-labs/eds/src/managers/SimpleAccessManager.sol\":\"SimpleAccessManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IContractURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7adffebc6e64c642e132bbff8ff695138517023f710b23b8767708de4f73db0b\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IRepository.sol\\\";\\nimport \\\"../libraries/LibSemver.sol\\\";\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\n\\n/**\\n * @title IDistributor Interface\\n * @notice Defines the standard functions for a distributor contract.\\n * @dev If you want to use {IRepository} for versioned distributions, use {IVersionDistributor} interface.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IDistributor is IERC7746, IERC165 {\\n    error InvalidVersionRequested(bytes32 distributionId, string version);\\n    error InvalidRepository(address repository);\\n    error RepositoryAlreadyExists(address repository);\\n    error VersionOutdated(bytes32 distributionId, string version);\\n    error InvalidInstance(address instance);\\n    error UnversionedDistribution(bytes32 distributionId);\\n\\n    /**\\n     * @notice Emitted when the version of the distributor is changed.\\n     * @param distributionId The unique identifier of the distribution.\\n     * @param newRequirement The new version requirement (hashed for indexing).\\n     * @param newRequirementData The new version requirement data.\\n     */\\n    event VersionChanged(\\n        bytes32 indexed distributionId,\\n        LibSemver.VersionRequirement indexed newRequirement,\\n        LibSemver.VersionRequirement newRequirementData\\n    );\\n\\n    /**\\n     * @notice Error indicating that the distribution with the specified ID was not found.\\n     * @param id The unique identifier of the distribution that was not found.\\n     */\\n    error DistributionNotFound(bytes32 id);\\n    /**\\n     * @notice Error indicating that a distribution with the specified ID already exists.\\n     * @param id The unique identifier of the distribution that already exists.\\n     */\\n    error DistributionExists(bytes32 id);\\n    /**\\n     * @notice Error indicating that the initializer for the distribution was not found.\\n     * @param id The unique identifier of the distribution that was not found.\\n     */\\n    error InitializerNotFound(bytes32 id);\\n\\n    /**\\n     * @notice Event emitted when a new distribution is instantiated.\\n     * @param distributionId The unique identifier of the distribution.\\n     * @param newInstanceId The unique identifier of the instance.\\n     * @param version The version of the distribution, taken either from IDistribution or from IRepository.\\n     * @param instances The addresses of the instances that were created.\\n     * @param args The arguments that were used for instantiation.\\n     * @dev It MUST emit when {IDistributor.instantiate} is called.\\n     */\\n    event Instantiated(\\n        bytes32 indexed distributionId,\\n        uint256 indexed newInstanceId,\\n        uint256 indexed version,\\n        address[] instances,\\n        bytes args\\n    );\\n    /**\\n     * @notice Event emitted when a distribution is removed.\\n     * @param id The unique identifier of the distribution that was removed.\\n     * @dev It MUST emit when {IDistributor.removeDistribution} is called.\\n     */\\n    event DistributionRemoved(bytes32 indexed id);\\n\\n    /**\\n     * @notice Event emitted when a distribution is added.\\n     * @param id The unique identifier of the distribution that was added.\\n     * @param distribution The address of the distribution that was added.\\n     * @param initializer The address of the initializer for the distribution.\\n     * @dev It MUST emit when {IDistributor.addDistribution} is called.\\n     */\\n    event DistributionAdded(bytes32 indexed id, address distribution, address indexed initializer);\\n\\n    /**\\n     * @notice Retrieves the unique identifiers of all distributions.\\n     * @return distributorIds An array of unique identifiers of all distributions.\\n     */\\n    function getDistributions() external view returns (bytes32[] memory distributorIds);\\n\\n    /**\\n     * @notice Retrieves the URI of the distribution.\\n     * @param distributorId The unique identifier of the distribution.\\n     * @return uri The URI of the distribution.\\n     */\\n    function getDistributionURI(bytes32 distributorId) external view returns (string memory);\\n\\n    /**\\n     * @notice Instantiates a new instance with the given distributor ID and arguments.\\n     * @param distributorId The unique identifier of the distributor.\\n     * @param args The arguments to be used for instantiation.\\n     * @return instances The addresses of the instances that were created.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     * @dev It MUST emit {Instantiated} event.\\n     */\\n    function instantiate(\\n        bytes32 distributorId,\\n        bytes calldata args\\n    ) external returns (address[] memory, bytes32 distributionName, uint256 distributionVersion);\\n\\n    /**\\n     * @notice Adds a new distribution with the specified distributor ID and initializer address.\\n     * @param distributorId The unique identifier for the distributor.\\n     * @param initializer The address of the initializer for the distribution.\\n     * @dev WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.\\n     */\\n    function addDistribution(bytes32 distributorId, address initializer) external;\\n\\n    /**\\n     * @notice Removes a distribution identified by the given distributorId.\\n     * @param distributorId The unique identifier of the distribution to be removed.\\n     */\\n    function removeDistribution(bytes32 distributorId) external;\\n\\n    /**\\n     * @notice Retrieves the distribution ID associated with a given instance address.\\n     * @param instance The address of the instance for which the distribution ID is being requested.\\n     * @return The distribution ID as a bytes32 value.\\n     */\\n    function getDistributionId(address instance) external view returns (bytes32);\\n    /**\\n     * @notice Retrieves the unique identifier for a given instance address.\\n     * @param instance The address of the instance whose ID is to be retrieved.\\n     * @return The unique identifier (uint256) associated with the specified instance address.\\n     */\\n    function getInstanceId(address instance) external view returns (uint256);\\n\\n    /**\\n     * @notice Adds a new versioned distribution to the repository.\\n     * @param repository The repository to which the distribution will be added.\\n     * @param initializer The address that initializes the distribution.\\n     * @param requirement The version requirements for the distribution.\\n     * @dev WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.\\n     */\\n    function addDistribution(\\n        IRepository repository,\\n        address initializer,\\n        LibSemver.VersionRequirement memory requirement\\n    ) external;\\n\\n    /**\\n     * @notice Changes the version requirement for a specific distribution.\\n     * @param distributionId The unique identifier of the distribution whose version requirement is to be changed.\\n     * @param newRequirement The new version requirement to be set for the distribution.\\n     */\\n    function changeVersion(bytes32 distributionId, LibSemver.VersionRequirement memory newRequirement) external;\\n}\\n\",\"keccak256\":\"0xd9ac323c08e6b4fbf4b01ed65694113f1d8fa9ab3cb686d219b1f14dc199fce9\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IERC7746.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IERC7746 Interface\\n * @dev Interface for the ERC7746 standard.\\n */\\ninterface IERC7746 {\\n    /// @notice Validates a function call before execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @return beforeCallResult Arbitrary data to be passed to `afterCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function beforeCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @notice Validates a function call after execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @param beforeCallResult The data returned by `beforeCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function afterCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data,\\n        bytes memory beforeCallResult\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eb8e8f14581dff37cc01475b0eb63926998b958328aa23e8afe3c0e2c93024a\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../libraries/LibSemver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IContractURI} from \\\"./IContractURI.sol\\\";\\n/**\\n * @title IRepository Interface\\n * @notice It is intended to be implemented by contracts that manage a collection of versions of a byte code.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IRepository is IERC165, IContractURI {\\n    /**\\n     * @notice Represents a source with version information, a unique identifier, and associated metadata.\\n     * @param version The version of the source, represented using the LibSemver.Version struct.\\n     * @param sourceId A unique identifier for the source.\\n     * @param metadata Additional data associated with the source.\\n     */\\n    struct Source {\\n        LibSemver.Version version;\\n        bytes32 sourceId;\\n        bytes metadata;\\n    }\\n\\n    /**\\n     * @notice Error indicating that the specified version does not exist.\\n     * @param version The version number that does not exist.\\n     */\\n    error VersionDoesNotExist(uint256 version);\\n    /**\\n     * @notice Error indicating that a release with a zero value is not allowed.\\n     */\\n    error ReleaseZeroNotAllowed();\\n    /**\\n     * @notice Error indicating that the specified version already exists.\\n     * @param version The version number that already exists.\\n     */\\n    error VersionExists(uint256 version);\\n    /**\\n     * @notice Error indicating that the version increment is invalid.\\n     * @param version The version number that caused the error.\\n     * @dev The version increment must be exactly one for either major, minor, or patch.\\n     */\\n    error VersionIncrementInvalid(uint256 version);\\n    /**\\n     * @dev Error indicating that the release metadata is empty.\\n     */\\n    error EmptyReleaseMetadata();\\n\\n    /**\\n     * @notice Emitted when a new version is added to the repository.\\n     * @param version The version number of the added item.\\n     * @param source The source identifier of the added item.\\n     * @param buildMetadata Additional metadata related to the build.\\n     */\\n    event VersionAdded(uint256 indexed version, bytes32 indexed source, bytes buildMetadata);\\n    /**\\n     * @notice Emitted when the metadata of a release is updated.\\n     * @param version The version number of the release.\\n     * @param releaseMetadata The metadata associated with the release.\\n     */\\n    event ReleaseMetadataUpdated(uint256 indexed version, bytes releaseMetadata);\\n\\n    /**\\n     * @notice Updates the metadata for a specific release version.\\n     * @param version The version of the release to update.\\n     * @param releaseMetadata The new metadata to associate with the release.\\n     * @dev It MUST emit `ReleaseMetadataUpdated` event.\\n     */\\n    function updateReleaseMetadata(LibSemver.Version memory version, bytes calldata releaseMetadata) external;\\n    /**\\n     * @notice Retrieves the name of the repository.\\n     * @return The name of the repository as a bytes32 value.\\n     */\\n    function repositoryName() external view returns (bytes32);\\n    /**\\n     * @notice Creates a new release for the given source ID.\\n     * @param sourceId The unique identifier of the source.\\n     * @param metadata The metadata associated with the release.\\n     * @param version The semantic version of the new release.\\n     * @dev It MUST emit `VersionAdded` event.\\n     */\\n    function newRelease(bytes32 sourceId, bytes memory metadata, LibSemver.Version memory version) external;\\n    /**\\n     * @notice Retrieves the latest source.\\n     * @return The requested source\\n     */\\n    function getLatest() external view returns (Source memory);\\n    /**\\n     * @notice Retrieves a specific item from the repository.\\n     * @param required the required version\\n     * @return The requested `Source`.\\n     */\\n    function get(LibSemver.VersionRequirement calldata required) external view returns (Source memory);\\n}\\n\",\"keccak256\":\"0xf835f5363fe9ec7d97e61311e84725b9d50b99d935b47a3d43ae56a98eb17278\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/libraries/LibSemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nlibrary LibSemver {\\n    error versionMismatch(string message);\\n    struct Version {\\n        uint64 major;\\n        uint64 minor;\\n        uint128 patch;\\n    }\\n\\n    enum requirements {\\n        ANY, // *\\n        EXACT, // =\\n        MAJOR, // ^\\n        MAJOR_MINOR, // ~\\n        GREATER_EQUAL, // >=\\n        GREATER, // >\\n        LESSER_EQUAL, // <=\\n        LESSER // <\\n    }\\n\\n    struct VersionRequirement {\\n        Version version;\\n        requirements requirement;\\n    }\\n\\n    function toUint256(Version memory _version) internal pure returns (uint256) {\\n        return (uint256(_version.major) << 192) | (uint256(_version.minor) << 128) | uint256(_version.patch);\\n    }\\n\\n    function parse(uint256 _version) internal pure returns (Version memory) {\\n        return Version(uint64(_version >> 192), uint64(_version >> 128), uint128(_version));\\n    }\\n\\n    function toString(Version memory _version) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(uint256(_version.major)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.minor)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.patch))\\n                )\\n            );\\n    }\\n\\n    function require_exact(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) != toUint256(_version2)) revert versionMismatch(\\\"Version mismatch\\\");\\n    }\\n\\n    function require_major(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major) revert versionMismatch(\\\"Major version mismatch\\\");\\n    }\\n\\n    function require_major_minor(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major || _version1.minor != _version2.minor)\\n            revert versionMismatch(\\\"Major and minor version mismatch\\\");\\n    }\\n\\n    function require_greater_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) < toUint256(_version2)) revert versionMismatch(\\\"Version is not greater or equal\\\");\\n    }\\n\\n    function require_greater(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) <= toUint256(_version2)) revert versionMismatch(\\\"Version is not greater\\\");\\n    }\\n\\n    function require_lesser_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) > toUint256(_version2)) revert versionMismatch(\\\"Version is not lesser or equal\\\");\\n    }\\n\\n    function require_lesser(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) >= toUint256(_version2)) revert versionMismatch(\\\"Version is not lesser\\\");\\n    }\\n\\n    function areEqual(Version memory _version1, Version memory _version2) internal pure returns (bool) {\\n        return toUint256(_version1) == toUint256(_version2);\\n    }\\n\\n    function compare(Version memory has, VersionRequirement memory needs) internal pure returns (bool) {\\n        if (needs.requirement == requirements.ANY) return true;\\n        if (needs.requirement == requirements.EXACT) return toUint256(has) == toUint256(needs.version);\\n        if (needs.requirement == requirements.MAJOR) return has.major == needs.version.major;\\n        if (needs.requirement == requirements.MAJOR_MINOR)\\n            return has.major == needs.version.major && has.minor == needs.version.minor;\\n        if (needs.requirement == requirements.GREATER_EQUAL) return toUint256(has) >= toUint256(needs.version);\\n        if (needs.requirement == requirements.GREATER) return toUint256(has) > toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER_EQUAL) return toUint256(has) <= toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER) return toUint256(has) < toUint256(needs.version);\\n        return false;\\n    }\\n\\n    function getNextMajor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major + 1, 0, 0);\\n    }\\n\\n    function getNextMinor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor + 1, 0);\\n    }\\n\\n    function getNextPatch(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor, _version.patch + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x8023de20471ff00ac9aa7630b6696768f894b956d46094a039ac32c5ae596a52\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/managers/SimpleAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\nimport {IDistributor} from \\\"../interfaces/IDistributor.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\ncontract SimpleAccessManager is Initializable, IERC7746, ERC165 {\\n    struct MethodSettings {\\n        bool isDistributionOnly;\\n        mapping(address => bool) disallowedAddresses;\\n    }\\n\\n    struct Storage {\\n        mapping(bytes4 => MethodSettings) methodSettings;\\n        address target;\\n        IDistributor distributor;\\n    }\\n\\n    bytes32 private constant SACM_STORAGE_POSITION = keccak256(\\\"simple.access.manager.storage.position\\\");\\n\\n    function getStorage() private pure returns (Storage storage s) {\\n        bytes32 position = SACM_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    struct SimpleAccessManagerInitializer {\\n        bytes4 selector;\\n        address[] disallowedAddresses;\\n        bool distributionComponentsOnly;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n    error ERC165CheckFailed(address distributor, bytes4 interfaceId, string interfaceName);\\n    function initialize(\\n        SimpleAccessManagerInitializer[] memory methodSettings,\\n        address target,\\n        IDistributor distributor\\n    ) public initializer {\\n        Storage storage s = getStorage();\\n        s.distributor = distributor;\\n        s.target = target;\\n        if (!ERC165Checker.supportsInterface(address(distributor), type(IDistributor).interfaceId)) {\\n            revert ERC165CheckFailed(address(distributor), type(IDistributor).interfaceId, \\\"IDistributor\\\");\\n        }\\n        uint256 length = methodSettings.length;\\n        for (uint256 i; i < length; ++i) {\\n            s.methodSettings[methodSettings[i].selector].isDistributionOnly = methodSettings[i]\\n                .distributionComponentsOnly;\\n            uint256 disallowedMethodsLength = methodSettings[i].disallowedAddresses.length;\\n            for (uint256 j; j < disallowedMethodsLength; ++j) {\\n                s.methodSettings[methodSettings[i].selector].disallowedAddresses[\\n                    methodSettings[i].disallowedAddresses[j]\\n                ] = true;\\n            }\\n        }\\n    }\\n\\n    error OnlyTargetAllowed(address sender, address target);\\n    error disallowedAddress(address sender, bytes4 selector);\\n\\n    function beforeCall(\\n        bytes memory,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bytes memory) {\\n        Storage storage s = getStorage();\\n        if (msg.sender != s.target) {\\n            revert OnlyTargetAllowed(msg.sender, s.target);\\n        }\\n        if (s.methodSettings[selector].disallowedAddresses[sender]) {\\n            revert disallowedAddress(sender, selector);\\n        } else {\\n            if (s.methodSettings[selector].isDistributionOnly) {\\n                return s.distributor.beforeCall(abi.encode(msg.sender), selector, sender, value, data);\\n            }\\n            return \\\"\\\";\\n        }\\n    }\\n\\n    function afterCall(\\n        bytes memory,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data,\\n        bytes memory beforeCallResult\\n    ) external {\\n        Storage storage s = getStorage();\\n        if (msg.sender != s.target) {\\n            revert OnlyTargetAllowed(msg.sender, s.target);\\n        }\\n        if (s.methodSettings[selector].isDistributionOnly) {\\n            s.distributor.afterCall(abi.encode(msg.sender), selector, sender, value, data, beforeCallResult);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return interfaceId == type(IERC7746).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2d1adced8f6e99ee7feb04c8b1978a72f8f48e7ffb3af3f6d57279415068b9a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806301ffc9a7146100515780634440d2451461007957806390c2e49414610099578063c3e9576a146100ae575b600080fd5b61006461005f3660046109cb565b6100c1565b60405190151581526020015b60405180910390f35b61008c610087366004610b10565b610111565b6040516100709190610bf6565b6100ac6100a7366004610c3d565b61031a565b005b6100ac6100bc366004610dd7565b610768565b60006001600160e01b031982167f87a9852f00000000000000000000000000000000000000000000000000000000148061010b57506301ffc9a760e01b6001600160e01b03198316145b92915050565b7f883917585a083a085656d3e7588abb3fd0316b525e5500c800c1ce22110dfab5546060907f883917585a083a085656d3e7588abb3fd0316b525e5500c800c1ce22110dfab4906001600160a01b031633146101b55760018101546040517f1b2c4f3c0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0390911660248201526044015b60405180910390fd5b6001600160e01b031986166000908152602082815260408083206001600160a01b038916845260010190915290205460ff1615610239576040517f02d54ec00000000000000000000000000000000000000000000000000000000081526001600160a01b03861660048201526001600160e01b0319871660248201526044016101ac565b6001600160e01b0319861660009081526020829052604090205460ff16156102ff576002810154604080513360208201526001600160a01b0390921691634440d2459101604051602081830303815290604052888888886040518663ffffffff1660e01b81526004016102b0959493929190610e97565b6000604051808303816000875af11580156102cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102f79190810190610eed565b915050610311565b50506040805160208101909152600081525b95945050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff166000811580156103655750825b905060008267ffffffffffffffff1660011480156103825750303b155b905081158015610390575080155b156103c7576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000166001178555831561041257845468ff00000000000000001916680100000000000000001785555b7f883917585a083a085656d3e7588abb3fd0316b525e5500c800c1ce22110dfab680546001600160a01b038881167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092557f883917585a083a085656d3e7588abb3fd0316b525e5500c800c1ce22110dfab58054928a16929091169190911790557f883917585a083a085656d3e7588abb3fd0316b525e5500c800c1ce22110dfab46104e3877f9aab004e000000000000000000000000000000000000000000000000000000006108b9565b61057e576040517ff2775efe0000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201527f9aab004e00000000000000000000000000000000000000000000000000000000602482015260606044820152600c60648201527f494469737472696275746f720000000000000000000000000000000000000000608482015260a4016101ac565b885160005b81811015610710578a818151811061059d5761059d610f5b565b6020026020010151604001518360000160008d84815181106105c1576105c1610f5b565b602090810291909101810151516001600160e01b03191682528101919091526040016000908120805460ff1916921515929092179091558b518c908390811061060c5761060c610f5b565b60200260200101516020015151905060005b818110156107065760018560000160008f868151811061064057610640610f5b565b6020026020010151600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060010160008f86815181106106af576106af610f5b565b60200260200101516020015184815181106106cc576106cc610f5b565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161061e565b5050600101610583565b505050831561075e57845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b7f883917585a083a085656d3e7588abb3fd0316b525e5500c800c1ce22110dfab5547f883917585a083a085656d3e7588abb3fd0316b525e5500c800c1ce22110dfab4906001600160a01b031633146108045760018101546040517f1b2c4f3c0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0390911660248201526044016101ac565b6001600160e01b0319861660009081526020829052604090205460ff16156108b0576002810154604080513360208201526001600160a01b039092169163c3e9576a910160405160208183030381529060405288888888886040518763ffffffff1660e01b815260040161087d96959493929190610f8a565b600060405180830381600087803b15801561089757600080fd5b505af11580156108ab573d6000803e3d6000fd5b505050505b50505050505050565b60006108c4836108dc565b80156108d557506108d5838361090f565b9392505050565b60006108ef826301ffc9a760e01b61090f565b801561010b5750610908826001600160e01b031961090f565b1592915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825192935060009283928392909183918a617530fa92503d91506000519050828015610997575060208210155b80156109a35750600081115b979650505050505050565b80356001600160e01b0319811681146109c657600080fd5b919050565b6000602082840312156109dd57600080fd5b6108d5826109ae565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715610a3857610a386109e6565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610a6757610a676109e6565b604052919050565b600067ffffffffffffffff821115610a8957610a896109e6565b50601f01601f191660200190565b600082601f830112610aa857600080fd5b8135610abb610ab682610a6f565b610a3e565b818152846020838601011115610ad057600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b0381168114610b0257600080fd5b50565b80356109c681610aed565b600080600080600060a08688031215610b2857600080fd5b853567ffffffffffffffff811115610b3f57600080fd5b610b4b88828901610a97565b955050610b5a602087016109ae565b93506040860135610b6a81610aed565b925060608601359150608086013567ffffffffffffffff811115610b8d57600080fd5b610b9988828901610a97565b9150509295509295909350565b60005b83811015610bc1578181015183820152602001610ba9565b50506000910152565b60008151808452610be2816020860160208601610ba6565b601f01601f19169290920160200192915050565b6020815260006108d56020830184610bca565b600067ffffffffffffffff821115610c2357610c236109e6565b5060051b60200190565b803580151581146109c657600080fd5b600080600060608486031215610c5257600080fd5b833567ffffffffffffffff811115610c6957600080fd5b8401601f81018613610c7a57600080fd5b8035610c88610ab682610c09565b8082825260208201915060208360051b850101925088831115610caa57600080fd5b602084015b83811015610dad57803567ffffffffffffffff811115610cce57600080fd5b85016060818c03601f19011215610ce457600080fd5b610cec610a15565b610cf8602083016109ae565b8152604082013567ffffffffffffffff811115610d1457600080fd5b82016020810190603f018d13610d2957600080fd5b8035610d37610ab682610c09565b8082825260208201915060208360051b85010192508f831115610d5957600080fd5b6020840193505b82841015610d84578335610d7381610aed565b825260209384019390910190610d60565b602085015250610d9991505060608301610c2d565b604082015284525060209283019201610caf565b509550610dc09250505060208501610b05565b9150610dce60408501610b05565b90509250925092565b60008060008060008060c08789031215610df057600080fd5b863567ffffffffffffffff811115610e0757600080fd5b610e1389828a01610a97565b965050610e22602088016109ae565b94506040870135610e3281610aed565b935060608701359250608087013567ffffffffffffffff811115610e5557600080fd5b610e6189828a01610a97565b92505060a087013567ffffffffffffffff811115610e7e57600080fd5b610e8a89828a01610a97565b9150509295509295509295565b60a081526000610eaa60a0830188610bca565b6001600160e01b0319871660208401526001600160a01b03861660408401528460608401528281036080840152610ee18185610bca565b98975050505050505050565b600060208284031215610eff57600080fd5b815167ffffffffffffffff811115610f1657600080fd5b8201601f81018413610f2757600080fd5b8051610f35610ab682610a6f565b818152856020838501011115610f4a57600080fd5b610311826020830160208601610ba6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60c081526000610f9d60c0830189610bca565b6001600160e01b0319881660208401526001600160a01b03871660408401528560608401528281036080840152610fd48186610bca565b905082810360a0840152610fe88185610bca565b999850505050505050505056fea2646970667358221220c236ca122743efd93273318216ba21924c17471465942bb33675b8b7975d302b64736f6c634300081c0033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}