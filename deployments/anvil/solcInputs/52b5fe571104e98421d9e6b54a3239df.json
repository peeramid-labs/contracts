{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC1155/IERC1155.sol\";\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: address zero is not a valid owner\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual override returns (uint256[] memory) {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 amount, bytes memory data) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n        uint256[] memory ids = _asSingletonArray(id);\n        uint256[] memory amounts = _asSingletonArray(amount);\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `ids` and `amounts` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non-ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1155.sol\";\n\n/**\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\n * own tokens and those that they have been approved to use.\n *\n * _Available since v3.1._\n */\nabstract contract ERC1155Burnable is ERC1155 {\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burnBatch(account, ids, values);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @title ERC721 Burnable Token\n * @dev ERC721 Token that can be burned (destroyed).\n */\nabstract contract ERC721Burnable is Context, ERC721 {\n    /**\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _burn(tokenId);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\nimport \"../../interfaces/IERC1271.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureChecker {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\n        return\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\n            isValidERC1271SignatureNow(signer, hash, signature);\n    }\n\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\n     * against the signer smart contract using ERC1271.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidERC1271SignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\n        );\n        return (success &&\n            result.length >= 32 &&\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    },
    "src/abstracts/CompositeERC1155.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.20;\nimport \"../libraries/LibReentrancyGuard.sol\";\nimport \"./LockableERC1155.sol\";\n\n/**\n * @title CompositeERC1155\n * @dev An abstract contract that extends LockableERC1155 and provides functionality for composite ERC1155 tokens.\n * Composite tokens can be \"composed\" from multiple underlying assets, which however do not change their owner\n * and in contrast to that use LockableERC1155 standard, which allows to read locked asset BalanceOf, OwnerOf methods correctly\n */\nabstract contract CompositeERC1155 is LockableERC1155 {\n    address[] private dimensions;\n    uint256[] private weights;\n\n    constructor(string memory uri_, address[] memory dimensionTokens, uint256[] memory tokenWeights) ERC1155(uri_) {\n        require(dimensionTokens.length == tokenWeights.length, \"Array lengths must be equal\");\n        dimensions = dimensionTokens;\n        weights = tokenWeights;\n    }\n\n    function _mint(address to, uint256 tokenId, uint256 value, bytes memory data) internal virtual override {\n        for (uint256 i = 0; i < dimensions.length; i++) {\n            LockableERC1155(dimensions[i]).lock(to, tokenId, value * weights[i]);\n        }\n        super._mint(to, tokenId, value, data);\n    }\n\n    function _burn(address from, uint256 id, uint256 amount) internal override {\n        for (uint256 i = 0; i < dimensions.length; i++) {\n            CompositeERC1155(dimensions[i]).burn(from, id, amount * weights[i]);\n        }\n        super._burn(from, id, amount);\n    }\n\n    /**\n     * @dev Decomposes a composite ERC1155 token into its individual components.\n     * This function unlocks the specified amount of the composite token from each dimension,\n     * and then burns the specified amount of the composite token from the caller's balance.\n     * @param from The address from which the composite token is being decomposed.\n     * @param id The ID of the composite token being decomposed.\n     * @param amount The amount of the composite token to decompose.\n     */\n    function decompose(address from, uint256 id, uint256 amount) public virtual {\n        for (uint256 i = 0; i < dimensions.length; i++) {\n            LockableERC1155(dimensions[i]).unlock(from, id, amount * weights[i]);\n        }\n        _burn(from, id, amount);\n    }\n\n    /**\n     * @dev Burns a specified amount of tokens from the given account.\n     * This will burn all underlying (composite) assets\n     *\n     * Requirements:\n     * - `account` must be the token owner or an approved operator.\n     * - `id` and `value` must be valid token ID and amount to burn.\n     * - All underlying \"composite\" assets implement burn as well\n     *\n     * @param account The address of the token owner.\n     * @param id The ID of the token to burn.\n     * @param value The amount of tokens to burn.\n     */\n    function burn(address account, uint256 id, uint256 value) public virtual {\n        require(\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\n            \"ERC1155: caller is not token owner or approved\"\n        );\n\n        _burn(account, id, value);\n    }\n\n    /**\n     * @dev Retrieves the components of the CompositeERC1155 contract.\n     * @return An array of component addresses and an array of component weights.\n     */\n    function getComponents() public virtual returns (address[] memory, uint256[] memory) {\n        return (dimensions, weights);\n    }\n}\n"
    },
    "src/abstracts/DiamondReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Author: @Peersky https://github.com/peersky\n * Adapted this diamond reentrancy guard from:\n\n * Authors: Moonstream Engineering (engineering@moonstream.to)\n * GitHub: https://github.com/bugout-dev/dao\n */\n\npragma solidity ^0.8.20;\nimport \"../libraries/LibReentrancyGuard.sol\";\n\nabstract contract DiamondReentrancyGuard {\n    modifier nonReentrant() {\n        LibReentrancyGuard.ReentrancyGuardStruct storage rgs = LibReentrancyGuard.reentrancyGuardStorage();\n        require(!rgs._entered, \"REG: You shall not pass!\");\n        rgs._entered = true;\n        _;\n        rgs._entered = false;\n    }\n}\n"
    },
    "src/abstracts/draft-EIP712Diamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../libraries/LibEIP712Storage.sol\";\nimport \"../modifiers/OnlyOwnerDiamond.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 is OnlyOwnerDiamond {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor() {}\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        LibEIP712WithStorage.LibEIP712WithStorageStorage storage ss = LibEIP712WithStorage.EIP712WithStorage();\n        if (address(this) == ss._CACHED_THIS && block.chainid == ss._CACHED_CHAIN_ID) {\n            return ss._CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(ss._TYPE_HASH, ss._HASHED_NAME, ss._HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "src/abstracts/LockableERC1155.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\npragma solidity ^0.8.20;\nimport \"../libraries/LibReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport {ILockableERC1155} from \"../interfaces/ILockableERC1155.sol\";\nerror insufficient(uint256 id, uint256 balance, uint256 required);\n\n/**\n * @title LockableERC1155\n * @dev This is an abstract contract that extends the ERC1155 token contract and implements the ILockableERC1155 interface.\n *      It provides functionality to lock and unlock token amounts for specific accounts and IDs.\n */\nabstract contract LockableERC1155 is ERC1155, ILockableERC1155 {\n    mapping(address => mapping(uint256 => uint256)) lockedAmounts;\n\n    /**\n     * @dev Locks a specified amount of tokens for a given account and token ID.\n     * If the account does not have enough balance to lock the specified amount,\n     * the function will revert with an \"insufficient\" error message.\n     * Emits a `TokensLocked` event after successfully locking the tokens.\n     * @param account The address of the account to lock tokens for.\n     * @param id The ID of the token to lock.\n     * @param amount The amount of tokens to lock.\n     */\n    function lock(address account, uint256 id, uint256 amount) public virtual {\n        if (balanceOf(account, id) < lockedAmounts[account][id] + amount) require(false, \"insufficient\");\n        // revert insufficient(id, lockedAmounts[account][id], amount);\n        lockedAmounts[account][id] += amount;\n        emit TokensLocked(account, id, amount);\n    }\n\n    /**\n     * @dev Unlocks a specified amount of tokens for a given account and token ID.\n     * If the locked amount is less than the specified amount, it reverts with an \"insufficient\" error message.\n     * Emits a `TokensUnlocked` event after unlocking the tokens.\n     * @param account The address of the account to unlock tokens for.\n     * @param id The ID of the token to unlock.\n     * @param amount The amount of tokens to unlock.\n     */\n    function unlock(address account, uint256 id, uint256 amount) public virtual {\n        if (lockedAmounts[account][id] < amount) require(false, \"insufficient\"); //revert insufficient(id, lockedAmounts[account][id], amount);\n        lockedAmounts[account][id] -= amount;\n        emit TokensUnlocked(account, id, amount);\n    }\n\n    /**\n     * @dev Returns the unlocked balance of a specific ERC1155 token for an account.\n     * The unlocked balance is calculated by subtracting the locked amount from the total balance.\n     * @param account The address of the account.\n     * @param id The ID of the ERC1155 token.\n     * @return The unlocked balance of the ERC1155 token for the account.\n     */\n    function unlockedBalanceOf(address account, uint256 id) public view returns (uint256) {\n        return balanceOf(account, id) - lockedAmounts[account][id];\n    }\n\n    /**\n     * @dev Hook function that is called before any token transfer.\n     * It checks if the transfer is allowed based on the locked amounts of the tokens.\n     * If the transfer is not allowed, it reverts with an error message.\n     * @param operator The address performing the token transfer.\n     * @param from The address from which the tokens are being transferred.\n     * @param to The address to which the tokens are being transferred.\n     * @param ids An array of token IDs being transferred.\n     * @param amounts An array of token amounts being transferred.\n     * @param data Additional data attached to the transfer.\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual override {\n        for (uint256 i = 0; i < ids.length; i++) {\n            if (from != address(0)) {\n                if (lockedAmounts[from][ids[i]] + amounts[i] > balanceOf(from, ids[i])) {\n                    require(false, \"insufficient\");\n                }\n            }\n        }\n        super._afterTokenTransfer(operator, from, to, ids, amounts, data);\n    }\n}\n"
    },
    "src/facets/RankifyInstanceGameMastersFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {LibArray} from \"../libraries/LibArray.sol\";\nimport {LibTBG} from \"../libraries/LibTurnBasedGame.sol\";\nimport {LibRankify} from \"../libraries/LibRankify.sol\";\nimport {IRankifyInstanceCommons} from \"../interfaces/IRankifyInstanceCommons.sol\";\nimport \"../abstracts/DiamondReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../abstracts/draft-EIP712Diamond.sol\";\nimport {RankToken} from \"../tokens/RankToken.sol\";\nimport {LibCoinVending} from \"../libraries/LibCoinVending.sol\";\nimport \"hardhat/console.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport \"../vendor/libraries/LibDiamond.sol\";\n\ncontract RankifyInstanceGameMastersFacet is DiamondReentrancyGuard, EIP712 {\n    using LibTBG for uint256;\n    using LibRankify for uint256;\n    using LibTBG for LibTBG.GameInstance;\n    event OverTime(uint256 indexed gameId);\n    event LastTurn(uint256 indexed gameId);\n    event ProposalScore(\n        uint256 indexed gameId,\n        uint256 indexed turn,\n        string indexed proposalHash,\n        string proposal,\n        uint256 score\n    );\n    event TurnEnded(\n        uint256 indexed gameId,\n        uint256 indexed turn,\n        address[] players,\n        uint256[] scores,\n        string[] newProposals,\n        uint256[] proposerIndicies,\n        uint256[][] votes\n    );\n\n    event GameOver(uint256 indexed gameId, address[] players, uint256[] scores);\n\n    event ProposalSubmitted(\n        uint256 indexed gameId,\n        uint256 indexed turn,\n        address indexed proposer,\n        bytes32 commitmentHash,\n        string proposalEncryptedByGM\n    );\n    struct ProposalParams {\n        uint256 gameId;\n        string encryptedProposal;\n        bytes32 commitmentHash;\n        address proposer;\n    }\n\n    event VoteSubmitted(uint256 indexed gameId, uint256 indexed turn, address indexed player, string votesHidden);\n\n    /**\n     * @dev Handles the end of the game for a player. `gameId` is the ID of the game. `player` is the address of the player.\n     *\n     * Modifies:\n     *\n     * - Releases the coins for the game with `gameId`, the game creator, the top player, and `player`.\n     */\n    function onPlayersGameEnd(uint256 gameId, address player) private {\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\n        LibCoinVending.release(bytes32(gameId), game.createdBy, gameId.getLeaderBoard()[0], player);\n    }\n\n    /**\n     * @dev Submits a vote for a game. `gameId` is the ID of the game. `encryptedVotes` is the encrypted votes. `voter` is the address of the voter.\n     *\n     * Emits a _VoteSubmitted_ event.\n     *\n     * Requirements:\n     *\n     * - The caller must be a game master of the game with `gameId`.\n     * - The game with `gameId` must exist.\n     * - The game with `gameId` must have started.\n     * - The game with `gameId` must not be over.\n     * - `voter` must be in the game with `gameId`.\n     * - The current turn of the game with `gameId` must be greater than 1.\n     */\n    function submitVote(uint256 gameId, string memory encryptedVotes, address voter) public {\n        LibRankify.enforceIsGM(gameId, msg.sender);\n        gameId.enforceGameExists();\n        gameId.enforceHasStarted();\n        require(!gameId.isGameOver(), \"Game over\");\n        gameId.enforceIsPlayingGame(voter);\n        require(gameId.getTurn() > 1, \"No proposals exist at turn 1: cannot vote\");\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\n        require(!game.playerVoted[voter], \"Already voted\");\n        game.numVotesThisTurn += 1;\n        game.playerVoted[voter] = true;\n        gameId.tryPlayerMove(voter);\n        emit VoteSubmitted(gameId, gameId.getTurn(), voter, encryptedVotes);\n    }\n\n    /**\n     * @dev Submits a proposal for a game. `proposalData` is the proposal data.\n     *\n     * Requirements:\n     *\n     * - The game with `proposalData.gameId` must exist.\n     * - The caller must be a game master of the game with `proposalData.gameId`.\n     */\n    function submitProposal(ProposalParams memory proposalData) public {\n        proposalData.gameId.enforceGameExists();\n        proposalData.gameId.enforceIsGM(msg.sender);\n        require(!proposalData.gameId.isGameOver(), \"Game over\");\n        proposalData.gameId.enforceHasStarted();\n\n        IRankifyInstanceCommons.RInstance storage game = proposalData.gameId.getGameStorage();\n        require(LibTBG.getPlayersGame(proposalData.proposer) == proposalData.gameId, \"not a player\");\n        // require(!proposalData.gameId.isLastTurn(), \"Cannot propose in last turn\");\n        require(bytes(proposalData.encryptedProposal).length != 0, \"Cannot propose empty\");\n        require(game.proposalCommitmentHashes[proposalData.proposer] == \"\", \"Already proposed!\");\n        uint256 turn = proposalData.gameId.getTurn();\n        game.proposalCommitmentHashes[proposalData.proposer] = proposalData.commitmentHash;\n        game.numCommitments += 1;\n        proposalData.gameId.tryPlayerMove(proposalData.proposer);\n        emit ProposalSubmitted(\n            proposalData.gameId,\n            turn,\n            proposalData.proposer,\n            proposalData.commitmentHash,\n            proposalData.encryptedProposal\n        );\n    }\n\n    /**\n     * @dev Handles the actions after the next turn of a game with the provided game ID. `gameId` is the ID of the game. `newProposals` is the array of new proposals.\n     *\n     * Modifies:\n     *\n     * - Sets the ongoing proposals of the game with `gameId` to `newProposals`.\n     * - Increments the number of ongoing proposals of the game with `gameId` by the number of `newProposals`.\n     */\n    function _afterNextTurn(uint256 gameId, string[] memory newProposals) private {\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\n        for (uint256 i = 0; i < newProposals.length; i++) {\n            game.ongoingProposals[i] = newProposals[i];\n            game.numOngoingProposals += 1;\n        }\n    }\n\n    /**\n     * @dev Handles the next turn of a game with the provided game ID. `gameId` is the ID of the game. `newProposals` is the array of new proposals.\n     *\n     * Emits an {OverTime_ event if the game is in the last turn and overtime.\n     * emits a _LastTurn_ event if the game is in the last turn.\n     * emits a _GameOver_ event if the game is over.\n     *\n     * Modifies:\n     *\n     * - Calls the `_afterNextTurn` function with `gameId` and `newProposals`.\n     */\n    function _nextTurn(uint256 gameId, string[] memory newProposals) private {\n        (bool _isLastTurn, bool _isOvertime, bool _isGameOver) = gameId.nextTurn();\n        if (_isLastTurn && _isOvertime) {\n            emit OverTime(gameId);\n        }\n        if (_isLastTurn) {\n            emit LastTurn(gameId);\n        }\n        if (_isGameOver) {\n            uint256[] memory finalScores = gameId.closeGame(LibDiamond.contractOwner(), onPlayersGameEnd);\n            address[] memory players = gameId.getPlayers();\n            emit GameOver(gameId, players, finalScores);\n        }\n        _afterNextTurn(gameId, newProposals);\n    }\n\n    /**\n     * @dev Ends the current turn of a game with the provided game ID. `gameId` is the ID of the game. `votes` is the array of votes.\n     *  `newProposals` is the array of new proposals for the upcoming voting round.\n     *  `proposerIndicies` is the array of indices of the proposers in the previous voting round.\n     *\n     * emits a _ProposalScore_ event for each player if the turn is not the first.\n     * emits a _TurnEnded_ event.\n     *\n     * Modifies:\n     *\n     * - Calls the `_nextTurn` function with `gameId` and `newProposals`.\n     * - Resets the number of commitments of the game with `gameId` to 0.\n     * - Resets the proposal commitment hash and ongoing proposal of each player in the game with `gameId`.\n     *\n     * Requirements:\n     *\n     * - The caller must be a game master of the game with `gameId`.\n     * - The game with `gameId` must have started.\n     * - The game with `gameId` must not be over.\n     * -  newProposals array MUST be sorted randomly to ensure privacy\n     * votes and proposerIndicies MUST correspond to players array from game.getPlayers()\n     */\n    function endTurn(\n        uint256 gameId,\n        uint256[][] memory votes,\n        string[] memory newProposals, //REFERRING TO UPCOMING VOTING ROUND\n        uint256[] memory proposerIndicies //REFERRING TO game.players index in PREVIOUS VOTING ROUND\n    ) public {\n        gameId.enforceIsGM(msg.sender);\n        gameId.enforceHasStarted();\n        gameId.enforceIsNotOver();\n        IRankifyInstanceCommons.RInstance storage game = gameId.getGameStorage();\n        uint256 turn = gameId.getTurn();\n\n        address[] memory players = gameId.getPlayers();\n        if (turn != 1) {\n            uint256[][] memory votesSorted = new uint256[][](players.length);\n            for (uint256 i = 0; i < players.length; i++) {\n                votesSorted[i] = new uint256[](players.length);\n                for (uint256 j = 0; j < players.length; j++) {\n                    votesSorted[i][proposerIndicies[j]] = votes[i][j];\n                }\n            }\n\n            (, uint256[] memory roundScores) = gameId.calculateScoresQuadratic(votesSorted, proposerIndicies);\n            for (uint256 i = 0; i < players.length; i++) {\n                string memory proposal = game.ongoingProposals[proposerIndicies[i]];\n                emit ProposalScore(gameId, turn, proposal, proposal, roundScores[i]);\n            }\n        }\n        (, uint256[] memory scores) = gameId.getScores();\n        emit TurnEnded(gameId, gameId.getTurn(), players, scores, newProposals, proposerIndicies, votes);\n\n        // Clean up game instance for upcoming round\n\n        game.numCommitments = 0;\n        for (uint256 i = 0; i < players.length; i++) {\n            game.proposalCommitmentHashes[players[i]] = bytes32(0);\n            game.ongoingProposals[i] = \"\";\n            game.playerVoted[players[i]] = false;\n            game.votesHidden[players[i]].hash = bytes32(0);\n        }\n        // This data is to needed to correctly detetermine \"PlayerMove\" conditions during next turn\n        game.numVotesPrevTurn = game.numVotesThisTurn;\n        game.numVotesThisTurn = 0;\n        game.numPrevProposals = game.numOngoingProposals;\n        game.numOngoingProposals = 0;\n\n        _nextTurn(gameId, newProposals);\n    }\n}\n"
    },
    "src/factories/AppFactoryOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {IAppFactory} from \"../interfaces/IAppFactory.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\ncontract AppFactoryOwnable is IAppFactory, Ownable {\n    using Address for address;\n    struct VersionedTemplateStruct {\n        mapping(uint256 => IAppFactory.TemplateStruct) verionedTemplates; // version = major << 128 + minor << 64 + patch\n        uint64 majorReleases; //\n        mapping(uint64 => uint64) minorReleases; // minor releases per major version\n        mapping(uint64 => mapping(uint64 => uint64)) patchReleases; // patch releases per major + minor version\n    }\n\n    mapping(bytes32 => VersionedTemplateStruct) templateStore;\n    mapping(address => IAppFactory.RegistryRecord) public instances;\n\n    function getNewVersionNumberFromReleaseType(\n        VersionedTemplateStruct storage template,\n        IAppFactory.ReleaseTypeEnum releaseType\n    ) internal view returns (uint256) {\n        if (releaseType == IAppFactory.ReleaseTypeEnum.MAJOR) {\n            return (template.majorReleases + 1) << 128;\n        } else if (releaseType == IAppFactory.ReleaseTypeEnum.MINOR) {\n            return (template.majorReleases << 128) + ((template.minorReleases[template.majorReleases] + 1) << 64);\n        } else if (releaseType == IAppFactory.ReleaseTypeEnum.PATCH) {\n            return\n                (template.majorReleases << 128) +\n                (template.minorReleases[template.majorReleases] << 64) +\n                (template.patchReleases[template.majorReleases][template.minorReleases[template.majorReleases]] + 1);\n        }\n        return 0;\n    }\n\n    function newTemplate(\n        bytes32 templateURI,\n        address src,\n        address initializerContract,\n        bytes4[] memory initializerFnSelectors,\n        IAppFactory.ReleaseTypeEnum releaseType,\n        bytes32 metadata\n    ) public onlyOwner returns (uint256) {\n        VersionedTemplateStruct storage template = templateStore[templateURI];\n        uint256 newVersion = getNewVersionNumberFromReleaseType(template, releaseType);\n        template.verionedTemplates[newVersion] = IAppFactory.TemplateStruct({\n            src: src,\n            initializer: initializerContract,\n            initializationSelectors: initializerFnSelectors,\n            metadata: metadata\n        });\n        if (releaseType == IAppFactory.ReleaseTypeEnum.MAJOR) {\n            template.majorReleases++;\n        } else if (releaseType == IAppFactory.ReleaseTypeEnum.MINOR) {\n            template.minorReleases[template.majorReleases]++;\n        } else if (releaseType == IAppFactory.ReleaseTypeEnum.PATCH) {\n            template.patchReleases[template.majorReleases][template.minorReleases[template.majorReleases]]++;\n        }\n        emit TemplateAdded(templateURI, src, msg.sender);\n\n        emit NewTemplateVersion(\n            templateURI,\n            releaseType,\n            string(abi.encodePacked(newVersion)),\n            string(abi.encodePacked(newVersion))\n        );\n        return newVersion;\n    }\n\n    function instantiate(\n        bytes32 templateURI,\n        uint64[3] memory version,\n        bytes[] calldata instantiationPayload\n    ) public returns (address) {\n        VersionedTemplateStruct storage template = templateStore[templateURI];\n        IAppFactory.TemplateStruct memory templateStruct = template.verionedTemplates[\n            (version[0] << (128 + version[1])) << (64 + version[2])\n        ];\n\n        string memory versionString = string.concat(\n            Strings.toString(version[0]),\n            \".\",\n            Strings.toString(version[1]),\n            \".\",\n            Strings.toString(version[2])\n        );\n\n        require(templateStruct.src != address(0), \"AF: template not found\");\n        address instance = Clones.clone(templateStruct.src);\n        bytes[] memory initializationResults = new bytes[](instantiationPayload.length);\n        if (templateStruct.initializer != address(0)) {\n            for (uint256 i = 0; i < instantiationPayload.length; i++) {\n                initializationResults[i] = instance.functionCall(\n                    abi.encodeWithSelector(templateStruct.initializationSelectors[i], instantiationPayload[i])\n                );\n            }\n        }\n        instances[instance] = IAppFactory.RegistryRecord({templateURI: templateURI, templateVersion: version});\n        emit AppInstantiated(templateURI, versionString, msg.sender, initializationResults);\n        return instance;\n    }\n\n    function getMajorReleaseCnt(bytes32 templateURI) public view returns (uint256) {\n        return templateStore[templateURI].majorReleases;\n    }\n\n    function getMinorReleaseCnt(bytes32 templateURI, uint256 majorVersion) public view returns (uint256) {\n        return templateStore[templateURI].minorReleases[uint64(majorVersion)];\n    }\n\n    function getPatchReleaseCnt(\n        bytes32 templateURI,\n        uint64 majorVersion,\n        uint64 minorVersion\n    ) public view returns (uint256) {\n        return templateStore[templateURI].patchReleases[uint64(majorVersion)][uint64(minorVersion)];\n    }\n\n    function getLatestTemplate(bytes32 templateURI) public view returns (IAppFactory.TemplateStruct memory) {\n        VersionedTemplateStruct storage template = templateStore[templateURI];\n        return\n            template.verionedTemplates[\n                (template.majorReleases << 128) +\n                    (template.minorReleases[template.majorReleases] << 64) +\n                    template.patchReleases[template.majorReleases][template.minorReleases[template.majorReleases]]\n            ];\n    }\n\n    function getTemplate(bytes32 templateURI, uint64 version) public view returns (IAppFactory.TemplateStruct memory) {\n        VersionedTemplateStruct storage template = templateStore[templateURI];\n        return template.verionedTemplates[version];\n    }\n\n    function getTemplateOfInstance(address maybeInstance) public view returns (IAppFactory.TemplateStruct memory) {\n        VersionedTemplateStruct storage template = templateStore[instances[maybeInstance].templateURI];\n        return\n            template.verionedTemplates[\n                (template.majorReleases << (128 + template.minorReleases[template.majorReleases])) <<\n                    (64 +\n                        template.patchReleases[template.majorReleases][template.minorReleases[template.majorReleases]])\n            ];\n    }\n\n    function getMinorReleaseCnt(bytes32 templateURI, uint64 majorVersion) external view override returns (uint256) {\n        return templateStore[templateURI].minorReleases[majorVersion];\n    }\n}\n"
    },
    "src/interfaces/IAppFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface IAppFactory {\n    struct TemplateStruct {\n        address src;\n        address initializer;\n        bytes4[] initializationSelectors;\n        bytes32 metadata;\n    }\n\n    struct RegistryRecord {\n        bytes32 templateURI;\n        uint64[3] templateVersion;\n    }\n\n    enum ReleaseTypeEnum {\n        MAJOR,\n        MINOR,\n        PATCH\n    }\n\n    function newTemplate(\n        bytes32 templateURI,\n        address src,\n        address initializerContract,\n        bytes4[] memory initializerFnSelectors,\n        ReleaseTypeEnum releaseType,\n        bytes32 metadata\n    ) external returns (uint256);\n\n    function instantiate(\n        bytes32 templateURI,\n        uint64[3] memory version,\n        bytes[] calldata instantiationPayload\n    ) external returns (address);\n\n    function getTemplateOfInstance(address maybeInstance) external view returns (TemplateStruct memory);\n\n    function getMajorReleaseCnt(bytes32 templateURI) external view returns (uint256);\n\n    function getMinorReleaseCnt(bytes32 templateURI, uint64 majorVersion) external view returns (uint256);\n\n    function getPatchReleaseCnt(\n        bytes32 templateURI,\n        uint64 majorVersion,\n        uint64 minorVersion\n    ) external view returns (uint256);\n\n    function getLatestTemplate(bytes32 templateURI) external view returns (TemplateStruct memory);\n\n    function getTemplate(bytes32 templateURI, uint64 version) external view returns (TemplateStruct memory);\n\n    event TemplateAdded(bytes32 indexed templateURI, address indexed source, address indexed publisher);\n    event NewTemplateVersion(\n        bytes32 indexed templateURI,\n        ReleaseTypeEnum indexed releaseType,\n        string indexed versionHash,\n        string version\n    );\n    event AppInstantiated(\n        bytes32 indexed templateURI,\n        string indexed versionHash,\n        address indexed instantiator,\n        bytes[] initializationResult\n    );\n}\n"
    },
    "src/interfaces/ILockableERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"@openzeppelin/contracts/interfaces/IERC1155.sol\";\n\n/**\n * @title ILockableERC1155\n * @dev Interface for a lockable ERC1155 token contract.\n */\ninterface ILockableERC1155 is IERC1155 {\n    event TokensLocked(address indexed account, uint256 indexed id, uint256 value);\n\n    event TokensUnlocked(address indexed account, uint256 indexed id, uint256 value);\n\n    /**\n     * @dev Locks a specified amount of tokens for a given account and token ID. `account` is the address of the account to lock the tokens for. `id` is the ID of the token to lock. `amount` is the amount of tokens to lock.\n     *\n     * emits a _TokensLocked_ event.\n     */\n    function lock(address account, uint256 id, uint256 amount) external;\n\n    /**\n     * @dev Unlocks a specified amount of tokens for a given account and token ID. `account` is the address of the account to unlock the tokens for. `id` is the ID of the token to unlock. `amount` is the amount of tokens to unlock.\n     *\n     * emits a _TokensUnlocked_ event.\n     */\n    function unlock(address account, uint256 id, uint256 amount) external;\n\n    /**\n     * @dev Returns the unlocked balance of tokens for a given account and token ID. `account` is the address of the account to check the unlocked balance for. `id` is the ID of the token to check the unlocked balance for.\n     *\n     * Returns:\n     *\n     * - The unlocked balance of tokens.\n     */\n    function unlockedBalanceOf(address account, uint256 id) external view returns (uint256);\n}\n"
    },
    "src/interfaces/IRankifyInstanceCommons.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {LibTBG} from \"../libraries/LibTurnBasedGame.sol\";\nimport {LibCoinVending} from \"../libraries/LibCoinVending.sol\";\nimport {LibQuadraticVoting} from \"../libraries/LibQuadraticVoting.sol\";\n\ninterface IRankifyInstanceCommons {\n    struct Score {\n        address participant;\n        uint256 score;\n    }\n\n    struct RInstanceSettings {\n        uint256 gamePrice;\n        address gamePaymentToken;\n        uint256 joinGamePrice;\n        uint256 numGames;\n        address rankTokenAddress;\n        bool contractInitialized;\n        LibQuadraticVoting.qVotingStruct voting;\n    }\n\n    struct RInstanceState {\n        RInstanceSettings BestOfState;\n        LibTBG.GameSettings TBGSEttings;\n    }\n\n    struct VoteHidden {\n        bytes32 hash;\n        bytes proof;\n    }\n\n    struct RInstance {\n        uint256 rank;\n        address createdBy;\n        mapping(uint256 => string) ongoingProposals; //Previous Turn Proposals (These are being voted on)\n        uint256 numOngoingProposals;\n        uint256 numPrevProposals;\n        mapping(address => bytes32) proposalCommitmentHashes; //Current turn Proposal submittion\n        uint256 numCommitments;\n        mapping(address => VoteHidden) votesHidden;\n        address[] additionalRanks;\n        uint256 paymentsBalance;\n        uint256 numVotesThisTurn;\n        uint256 numVotesPrevTurn;\n        mapping(address => bool) playerVoted;\n    }\n\n    event RegistrationOpen(uint256 indexed gameid);\n    event PlayerJoined(uint256 indexed gameId, address participant);\n    event GameStarted(uint256 indexed gameId);\n    event gameCreated(uint256 gameId, address indexed gm, address indexed creator, uint256 indexed rank);\n    event GameClosed(uint256 indexed gameId);\n    event PlayerLeft(uint256 indexed gameId, address indexed player);\n}\n"
    },
    "src/interfaces/IRankToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {ILockableERC1155} from \"./ILockableERC1155.sol\";\n\ninterface IRankToken is ILockableERC1155 {\n    event RankingInstanceUpdated(address indexed newRankingInstance);\n\n    event LevelUp(address indexed account, uint256 id);\n\n    /**\n     * @dev Mints a specified amount of tokens to an account. `to` is the address of the account to mint the tokens to. `amount` is the amount of tokens to mint. `poolId` is the ID of the pool. `data` is the additional data.\n     */\n    function mint(address to, uint256 amount, uint256 poolId, bytes memory data) external;\n\n    /**\n     * @dev Mints specified amounts of tokens to an account. `to` is the address of the account to mint the tokens to. `ids` is the array of IDs of the tokens to mint. `amounts` is the array of amounts of tokens to mint. `data` is the additional data.\n     */\n    function batchMint(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\n\n    /**\n     * @dev Levels up an account. `to` is the address of the account to level up. `id` is the ID of the token. `data` is the additional data.\n     *\n     * emits a _LevelUp_ event.\n     */\n    function levelUp(address to, uint256 id, bytes memory data) external;\n\n    /**\n     * @dev Updates the ranking instance. `newRankingInstance` is the address of the new ranking instance.\n     *\n     * emits a _RankingInstanceUpdated_ event.\n     */\n    function updateRankingInstance(address newRankingInstance) external;\n\n    /**\n     * @dev Gets the ranking instance which can emit new rank updates and mint rank tokens.\n     *\n     * Returns:\n     *\n     * - The address of the ranking instance.\n     */\n    function getRankingInstance() external view returns (address);\n\n    /**\n     * @dev Finds the new rank of an account. `account` is the address of the account. `oldRank` is the old rank of the account.\n     * It checks the balance of the account and returns the new rank that can be upgraded to.\n     *\n     * Returns:\n     *\n     * - The new rank of the account.\n     */\n    function findNewRank(address account, uint256 oldRank) external view returns (uint256);\n\n    /**\n     * @dev Gets the rank of an account. `account` is the address of the account.\n     *\n     * Returns:\n     *\n     * - The rank of the account.\n     */\n    function getAccountRank(address account) external view returns (uint256);\n}\n"
    },
    "src/libraries/LibArray.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"hardhat/console.sol\";\n\nlibrary LibArray {\n    /**\n     * @dev Sorts the elements of the array in ascending order using the quicksort algorithm.\n     *\n     * Requirements:\n     *\n     * - The array to be sorted must not be empty.\n     * - The starting and ending indices must be within the bounds of the array.\n     *\n     * Modifies:\n     *\n     * - The array is sorted in ascending order.\n     *\n     * Note:\n     *\n     * - This function uses the in-place quicksort algorithm, which has an average-case complexity of O(n log n) and a worst-case complexity of O(n^2).\n     */\n    function quickSort(uint256[] memory arr, int256 left, int256 right) internal view {\n        int256 i = left;\n        int256 j = right;\n        if (i == j) return;\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\n        while (i <= j) {\n            while (arr[uint256(i)] > pivot) i++;\n            while (pivot > arr[uint256(j)]) j--;\n            if (i <= j) {\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\n                i++;\n                j--;\n            }\n        }\n        if (left < j) quickSort(arr, left, j);\n        if (i < right) quickSort(arr, i, right);\n    }\n}\n"
    },
    "src/libraries/LibCoinVending.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Author: Tim Pechersky <@Peersky>\n\npragma solidity ^0.8.20;\n\nimport {MockERC20} from \"../mocks/MockERC20.sol\";\nimport {ERC1155Burnable} from \"@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\";\n\n/**\n * @dev This library is used to simulate the vending machine coin acceptor state machine that:\n *  - Supports large number of positions; Each represents requirements to acess different goods of the virtual vending machine.\n *  - Accepts multiple assets of following types: Native (Eth), ERC20, ERC721, and ERC1155 tokens that can be stacked together.\n *  - Allows for each individual asset action promise can be one of following:\n *      - Lock: The asset is locked in the acceptor with promise that asset will be returned to the sender at release funds time.\n *      - Bet: The asset is locked in the acceptor with promise that asset will be awarded to benificiary at release funds time.\n *      - Pay: The asset is locked in the acceptor with promise that asset will be paid to payee at release funds time.\n *      - Burn: The asset is locked in the acceptor with promise that asset will be destroyed at release funds time.\n *  - Maintains each position balance, hence allowing multiple participants to line up for the same position.\n *  - Allows three actions:\n *      - Fund position with assets\n *      - Refund assets to user\n *      - Consume assets and provide goods to user\n *      - Consuming asset might take a form of\n *      - Transferring assets to payee\n *      - Burning assets\n *      - Awarding beneficiary with assets\n *      - Returning locked assets back to sender\n *\n * This library DOES enforces that any position can only be refunded or processed only within amount funded boundaries\n * This library DOES NOT store the addresses of senders, nor benificiaries, nor payees.\n * This is to be stored within implementation contract.\n *\n *\n *  !!!!! IMPORTANT !!!!!\n * This library does NOT invocates reentrancy guards. It is implementation contract's responsibility to enforce reentrancy guards.\n * Reentrancy guards MUST be implemented in an implementing contract.\n *\n *  Usage:\n *\n *  0. Configure position via configure(...)\n *  1. fund position with assets via fund(...)\n *  2. release or refund assets via release(...) or refund(...)\n *  3. repeat steps 1 and 2 as needed.\n *  Position can be recofigured at any time when it's effective balance is zero: `timesFunded - timesRefuned - timesReleased = 0`\n *\n *\n * Test state:\n * This library most functionality has been tested: see ../tests/LibCoinVending.ts and ../tests/report.md for details.\n *\n * ERC721 token is checked only for \"HAVE\" condition since putting requirements on non fungable token id yet to be resolved.\n * (see ERC721 section in the code below)\n *\n * This library has not been yet audited\n *\n */\nlibrary LibCoinVending {\n    struct Condition {\n        mapping(ContractTypes => mapping(address => mapping(uint256 => ContractCondition))) contracts;\n        NumericCondition ethValues;\n        uint256 timesRefunded;\n        uint256 timesReleased;\n        uint256 timesFunded;\n        ContractTypes[] contractTypes;\n        address[] contractAddresses;\n        uint256[] contractIds;\n        bool _isConfigured;\n    }\n    enum RequirementTypes {\n        HAVE,\n        LOCK,\n        BURN,\n        BET,\n        PAY\n    }\n\n    struct TransactionProperties {\n        bytes data;\n        uint256 amount;\n    }\n    struct ContractCondition {\n        TransactionProperties have;\n        TransactionProperties lock;\n        TransactionProperties burn;\n        TransactionProperties pay;\n        TransactionProperties bet;\n    }\n\n    struct NumericCondition {\n        uint256 have;\n        uint256 lock;\n        uint256 burn;\n        uint256 pay;\n        uint256 bet;\n    }\n\n    enum TransferTypes {\n        FUND,\n        REFUND,\n        RELEASE\n    }\n\n    struct ConditionReturn {\n        NumericCondition ethValues;\n        uint256 timesRefunded;\n        uint256 timesReleased;\n        uint256 timesFunded;\n        address[] contractAddresses;\n        uint256[] contractIds;\n        ContractTypes[] contractTypes;\n        bool _isConfigured;\n    }\n\n    struct configSmartRequirement {\n        address contractAddress;\n        uint256 contractId;\n        ContractTypes contractType;\n        ContractCondition contractRequirement;\n    }\n\n    struct ConfigPosition {\n        NumericCondition ethValues;\n        configSmartRequirement[] contracts;\n    }\n\n    struct LibCoinVendingStorage {\n        mapping(bytes32 => Condition) positions;\n        address beneficiary;\n    }\n\n    enum ContractTypes {\n        ERC20,\n        ERC1155,\n        ERC721\n    }\n\n    bytes32 constant COIN_VENDING_STORAGE_POSITION = keccak256(\"coin.vending.storage.position\");\n\n    function coinVendingPosition(bytes32 position) internal view returns (Condition storage) {\n        return coinVendingStorage().positions[keccak256(abi.encode(position))];\n    }\n\n    function coinVendingStorage() internal pure returns (LibCoinVendingStorage storage es) {\n        bytes32 position = COIN_VENDING_STORAGE_POSITION;\n        assembly {\n            es.slot := position\n        }\n    }\n\n    /**\n     * @dev Transfers a specified amount of tokens from one address to another, or burns them if the destination address is zero.\n     *\n     * Requirements:\n     *\n     * - The `value` must be non-zero.\n     * - The `from` address must have a sufficient token balance.\n     * - If the `from` address is not this contract, it must have approved this contract to transfer tokens on its behalf.\n     *\n     * Modifies:\n     *\n     * - The token balances of the `from` and `to` addresses, or the total supply of tokens if `to` is the zero address.\n     */\n    function trasferFromAny(address erc20Addr, address from, address to, uint256 value) private {\n        MockERC20 token = MockERC20(erc20Addr);\n        if (value != 0) {\n            if (from == address(this)) {\n                if (to != address(0)) {\n                    token.transfer(to, value);\n                } else {\n                    token.burn(value);\n                }\n            } else {\n                if (to != address(0)) {\n                    token.transferFrom(from, to, value);\n                } else {\n                    token.transferFrom(from, address(this), value);\n                    token.burn(value);\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Fulfills the ERC20 token transfer according to the specified rules.\n     *\n     * Requirements:\n     *\n     * - The `from` address must have a sufficient token balance.\n     * - If the `from` address is not this contract, it must have approved this contract to transfer tokens on its behalf.\n     *\n     * Modifies:\n     *\n     * - The token balances of the `from` and `to` addresses.\n     */\n    function fulfillERC20(\n        address erc20Addr,\n        ContractCondition storage tokenReq,\n        address from,\n        address payee,\n        address beneficiary,\n        address burnAddress,\n        address lockAddress\n    ) private {\n        trasferFromAny(erc20Addr, from, lockAddress, tokenReq.lock.amount);\n        trasferFromAny(erc20Addr, from, burnAddress, tokenReq.burn.amount);\n        trasferFromAny(erc20Addr, from, payee, tokenReq.pay.amount);\n        trasferFromAny(erc20Addr, from, beneficiary, tokenReq.bet.amount);\n        MockERC20 token = MockERC20(erc20Addr);\n        uint256 value = tokenReq.have.amount;\n        if (value != 0 && from != address(this)) {\n            require(token.balanceOf(from) >= value, \"Not enough erc20 tokens\");\n        }\n    }\n\n    /**\n     * @dev Fulfills the ERC721 token transfer according to the specified rules.\n     *\n     * Requirements:\n     *\n     * - The `from` address must own the token.\n     * - If the `from` address is not this contract, it must have approved this contract to transfer the token on its behalf.\n     *\n     * Modifies:\n     *\n     * - The token ownership from the `from` address to the `to` address.\n     *\n     * Notes:\n     *\n     * Due to non fungable nature it's an open question how to implement this method correctly for lock/burn/pay/bet cases.\n     * In this library I assume that requirements are for multiple members, hence it makes no sense to put requirement on particular tokenId for ERC721.\n     * I think best approach would be to split in to two methods:\n     *  1. fulfillERC72Balance: Treats tokens as fungible - requires one to lock/burn/pay/bet ANY token id, but in total should be equal to desired value.\n     *  2. fulfillERC721Ids: Requires one to lock/burn/pay/bet specific token id. (useful when requirements are unique per applicant).\n     * fulfillERC72Balance is easy. fulfillERC721Ids brings up a question of how to select those ID's(since must specify for ERC721 contract on transfer method).\n     *  Two possible solutions:\n     *  1: modify fund() method to accept array of address+id pairs of NFT's and parse trough it. Compucationaly inefficient.\n     *  2: implement onERC721Received such that there is NFT vault in the contract, later fill funding position from that vault. That way applicant could pre-send NFT's to the contract and callfing fund later would pull those out from the vault.\n\n     */\n    function fulfillERC72Balance(address erc721addr, ContractCondition storage tokenReq, address from) private view {\n        ERC721 token = ERC721(erc721addr);\n\n        require(\n            tokenReq.lock.amount == 0 &&\n                tokenReq.burn.amount == 0 &&\n                tokenReq.pay.amount == 0 &&\n                tokenReq.bet.amount == 0,\n            \"ERC721 transfers not supported\"\n        );\n        if (tokenReq.have.amount != 0 && from != address(this)) {\n            uint256 balance = token.balanceOf(from);\n            require(balance >= tokenReq.have.amount, \"Not enough ERC721 balance\");\n        }\n    }\n\n    /**\n     * @dev Fulfills the ERC1155 token transfer according to the specified rules.\n     *\n     * Requirements:\n     *\n     * - The `from` address must own the token.\n     * - If the `from` address is not this contract, it must have approved this contract to transfer the token on its behalf.\n     *\n     * Modifies:\n     *\n     * - The token ownership from the `from` address to the `to` address.\n     */\n    function fulfillERC1155(\n        address erc1155addr,\n        uint256 id,\n        ContractCondition storage tokenReq,\n        address from,\n        address payee,\n        address beneficiary,\n        address burnAddress,\n        address lockAddress\n    ) private {\n        ERC1155Burnable token = ERC1155Burnable(erc1155addr);\n        uint256 value = tokenReq.have.amount;\n        if (value != 0) {\n            uint256 balance = token.balanceOf(from, id);\n            require(balance >= value, \"ERC1155 balance is not valid\");\n        }\n        value = tokenReq.pay.amount;\n        if (value != 0) {\n            // token.transfe\n            token.safeTransferFrom(from, payee, id, value, tokenReq.pay.data);\n        }\n        value = tokenReq.bet.amount;\n        if (value != 0) {\n            token.safeTransferFrom(from, beneficiary, id, value, tokenReq.bet.data);\n        }\n        value = tokenReq.burn.amount;\n        if (value != 0) {\n            if (burnAddress == address(0)) {\n                token.burn(from, id, value);\n            } else {\n                token.safeTransferFrom(from, burnAddress, id, value, tokenReq.burn.data);\n            }\n        }\n        value = tokenReq.lock.amount;\n        if (value != 0) {\n            token.safeTransferFrom(from, lockAddress, id, value, tokenReq.lock.data);\n        }\n    }\n\n    /**\n     * @dev Fulfills the conditions of a position.\n     *\n     * Requirements:\n     *\n     * - If `from` is not this contract, the sent value must be greater than or equal to the sum of the locked, paid, bet, and burned values.\n     *\n     * Modifies:\n     *\n     * - Transfers the specified amounts of Ether to the lock, payee, beneficiary, and burn addresses.\n     */\n    function fulfill(\n        Condition storage position,\n        address from,\n        address payee,\n        address beneficiary,\n        address burnAddress,\n        address lockAddress\n    ) private {\n        if (from == address(this)) {\n            if (position.ethValues.lock != 0) {\n                payable(lockAddress).transfer(position.ethValues.lock);\n            }\n            if (position.ethValues.pay != 0) {\n                payable(payee).transfer(position.ethValues.pay);\n            }\n            if (position.ethValues.bet != 0) {\n                payable(beneficiary).transfer(position.ethValues.bet);\n            }\n            if (position.ethValues.burn != 0) {\n                payable(burnAddress).transfer(position.ethValues.burn);\n            }\n        } else {\n            uint256 VLReq = position.ethValues.lock +\n                position.ethValues.pay +\n                position.ethValues.bet +\n                position.ethValues.burn;\n            require(msg.value >= VLReq, \"msg.value too low\");\n        }\n        for (uint256 i = 0; i < position.contractAddresses.length; i++) {\n            address contractAddress = position.contractAddresses[i];\n            uint256 id = position.contractIds[i];\n            ContractTypes contractType = position.contractTypes[i];\n            ContractCondition storage requirement = position.contracts[contractType][contractAddress][id];\n            if (contractType == ContractTypes.ERC20) {\n                fulfillERC20(contractAddress, requirement, from, payee, beneficiary, burnAddress, lockAddress);\n            } else if (contractType == ContractTypes.ERC721) {\n                fulfillERC72Balance(\n                    contractAddress,\n                    // id,\n                    requirement,\n                    from\n                    // payee,\n                    // beneficiary,\n                    // burnAddress,\n                    // lockAddress\n                );\n            } else if (contractType == ContractTypes.ERC1155) {\n                fulfillERC1155(contractAddress, id, requirement, from, payee, beneficiary, burnAddress, lockAddress);\n            }\n        }\n    }\n\n    /**\n     * @dev Refunds the balance of a condition to the specified address.\n     *\n     * `reqPos` The storage reference to the condition.\n     * `to` The address to refund the balance to.\n     *\n     * Requirements:\n     *\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\n     *\n     * Modifies:\n     *\n     * - Transfers the remaining balance of the condition to the `to` address.\n     * - Increments the `timesRefunded` counter for the condition.\n     */\n    function _refund(Condition storage reqPos, address to) private {\n        require((reqPos.timesRefunded + reqPos.timesReleased) < reqPos.timesFunded, \"Not enough balance to refund\");\n        fulfill(reqPos, address(this), to, to, to, to);\n        reqPos.timesRefunded += 1;\n    }\n\n    /**\n     * @dev Returns all position requirements back to fundee. `position` is the identifier of the condition. `to` is the address to refund the balance to.\n     *\n     * Requirements:\n     *\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\n     *\n     * Modifies:\n     *\n     * - Transfers the remaining balance of the condition to the `to` address.\n     * - Increments the `timesRefunded` counter for the condition.\n     */\n    function refund(bytes32 position, address to) internal {\n        Condition storage reqPos = coinVendingPosition(position);\n        _refund(reqPos, to);\n    }\n\n    /**\n     * @dev Returns all position requirements back to multiple fundees. `position` is the identifier of the condition. `returnAddresses` is an array of addresses to refund the balance to.\n     *\n     * Requirements:\n     *\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\n     *\n     * Modifies:\n     *\n     * - Transfers the remaining balance of the condition to each address in `returnAddresses`.\n     * - Increments the `timesRefunded` counter for the condition for each address in `returnAddresses`.\n     */\n    function batchRefund(bytes32 position, address[] memory returnAddresses) internal {\n        Condition storage reqPos = coinVendingPosition(position);\n        for (uint256 i = 0; i < returnAddresses.length; i++) {\n            _refund(reqPos, returnAddresses[i]);\n        }\n    }\n\n    function _release(Condition storage reqPos, address payee, address beneficiary, address returnAddress) private {\n        require((reqPos.timesRefunded + reqPos.timesReleased) < reqPos.timesFunded, \"Not enough balance to release\");\n        fulfill(reqPos, address(this), payee, beneficiary, address(0), returnAddress);\n        reqPos.timesReleased += 1;\n    }\n\n    /**\n     * @dev Releases the funds from a coin vending position to the specified addresses. `position` is the identifier of the condition. `payee`, `beneficiary`, and `returnAddress` are the addresses to release the funds to.\n     *\n     * Requirements:\n     *\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\n     *\n     * Modifies:\n     *\n     * - Transfers the remaining balance of the condition to the `payee`, `beneficiary`, and `returnAddress`.\n     * - Increments the `timesReleased` counter for the condition.\n     */\n    function release(bytes32 position, address payee, address beneficiary, address returnAddress) internal {\n        Condition storage reqPos = coinVendingPosition(position);\n        _release(reqPos, payee, beneficiary, returnAddress);\n    }\n\n    /**\n     * @dev Releases the funds from a coin vending position to multiple return addresses. `position` is the identifier of the condition. `payee`, `beneficiary`, and `returnAddresses` are the addresses to release the funds to.\n     *\n     * Requirements:\n     *\n     * - The sum of `timesRefunded` and `timesReleased` for the condition must be less than `timesFunded`.\n     *\n     * Modifies:\n     *\n     * - Transfers the remaining balance of the condition to the `payee`, `beneficiary`, and each address in `returnAddresses`.\n     * - Increments the `timesReleased` counter for the condition for each address in `returnAddresses`.\n     */\n    function batchRelease(\n        bytes32 position,\n        address payee,\n        address beneficiary,\n        address[] memory returnAddresses\n    ) internal {\n        Condition storage reqPos = coinVendingPosition(position);\n        for (uint256 i = 0; i < returnAddresses.length; i++) {\n            {\n                _release(reqPos, payee, beneficiary, returnAddresses[i]);\n            }\n        }\n    }\n\n    function _fund(Condition storage reqPos, address funder) private {\n        require(reqPos._isConfigured, \"Position does not exist\");\n        fulfill(reqPos, funder, address(this), address(this), address(this), address(this));\n        reqPos.timesFunded += 1;\n    }\n\n    /**\n     * @dev Funds the position by `msg.sender`. `position` is the identifier of the condition.\n     *\n     * Requirements:\n     *\n     * - The condition must be configured.\n     *\n     * Modifies:\n     *\n     * - Transfers the funds from `msg.sender` to this contract.\n     * - Increments the `timesFunded` counter for the condition.\n     */\n    function fund(bytes32 position) internal {\n        Condition storage reqPos = coinVendingPosition(position);\n        _fund(reqPos, msg.sender);\n    }\n\n    /**\n     * @dev Configures the position. `position` is the identifier of the condition. `configuration` is the new configuration for the condition.\n     *\n     * Requirements:\n     *\n     * - The condition must not have a positive balance.\n     *\n     * Modifies:\n     *\n     * - Sets the configuration of the condition to `configuration`.\n     */\n    function configure(bytes32 position, ConfigPosition memory configuration) internal {\n        Condition storage mustDo = coinVendingPosition(position);\n        require(\n            mustDo.timesFunded == 0 || (mustDo.timesFunded == (mustDo.timesRefunded + mustDo.timesReleased)),\n            \"Cannot mutate position with currently positive balance\"\n        );\n        mustDo.ethValues = configuration.ethValues;\n        delete mustDo.contractAddresses;\n        delete mustDo.contractIds;\n        delete mustDo.contractTypes;\n        for (uint256 i = 0; i < configuration.contracts.length; i++) {\n            mustDo.contractAddresses.push(configuration.contracts[i].contractAddress);\n            mustDo.contractIds.push(configuration.contracts[i].contractId);\n            mustDo.contractTypes.push(configuration.contracts[i].contractType);\n            mustDo.contracts[configuration.contracts[i].contractType][configuration.contracts[i].contractAddress][\n                configuration.contracts[i].contractId\n            ] = configuration.contracts[i].contractRequirement;\n        }\n        mustDo._isConfigured = true;\n    }\n\n    /**\n     * @dev Returns the condition associated with the given position. `position` is the identifier of the condition.\n     *\n     * Returns:\n     *\n     * - The condition associated with `position`.\n     */\n    function getPosition(bytes32 position) internal view returns (ConditionReturn memory) {\n        Condition storage pos = coinVendingPosition(position);\n        ConditionReturn memory ret;\n        ret.ethValues = pos.ethValues;\n        ret.timesFunded = pos.timesFunded;\n        ret.timesRefunded = pos.timesRefunded;\n        ret.timesReleased = pos.timesReleased;\n        ret._isConfigured = pos._isConfigured;\n        ret.contractAddresses = pos.contractAddresses;\n        ret.contractIds = pos.contractIds;\n        ret.contractTypes = pos.contractTypes;\n        return ret;\n    }\n\n    /**\n     * @dev Returns the contract condition associated with the given position, contract address, contract ID, and contract type. `position` is the identifier of the condition. `contractAddress` is the address of the contract. `contractId` is the ID of the contract. `contractType` is the type of the contract.\n     *\n     * Returns:\n     *\n     * - The contract condition associated with `position`, `contractAddress`, `contractId`, and `contractType`.\n     */\n    function getPositionByContract(\n        bytes32 position,\n        address contractAddress,\n        uint256 contractId,\n        ContractTypes contractType\n    ) internal view returns (ContractCondition memory) {\n        Condition storage pos = coinVendingPosition(position);\n        return pos.contracts[contractType][contractAddress][contractId];\n    }\n}\n"
    },
    "src/libraries/LibEIP712Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\nimport {IDiamondCut} from \"../vendor/interfaces/IDiamondCut.sol\";\n\nlibrary LibEIP712WithStorage {\n    bytes32 constant EIP712_STORAGE_POSITION = keccak256(\"EIP.712.STORAGE.POSITION\");\n\n    struct LibEIP712WithStorageStorage {\n        bytes32 _CACHED_DOMAIN_SEPARATOR;\n        uint256 _CACHED_CHAIN_ID;\n        address _CACHED_THIS;\n        bytes32 _HASHED_NAME;\n        bytes32 _HASHED_VERSION;\n        bytes32 _TYPE_HASH;\n    }\n\n    function EIP712WithStorage() internal pure returns (LibEIP712WithStorageStorage storage ds) {\n        bytes32 position = EIP712_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n}\n"
    },
    "src/libraries/LibQuadraticVoting.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nerror quadraticVotingError(string paramter, uint256 arg, uint256 arg2);\n\n/**\n * @title LibQuadraticVoting\n * @dev A library for quadratic voting calculations.\n */\nlibrary LibQuadraticVoting {\n    struct qVotingStruct {\n        uint256 voteCredits;\n        uint256 maxQuadraticPoints;\n        uint256 minQuadraticPositons;\n    }\n\n    /**\n     * @dev Precomputes the values for quadratic voting. `voteCredits` is the total number of vote credits. `minExpectedVoteItems` is the minimum expected number of vote items.\n     *\n     * Returns:\n     *\n     * - A `qVotingStruct` containing the precomputed values.\n     */\n    function precomputeValues(\n        uint256 voteCredits,\n        uint256 minExpectedVoteItems\n    ) internal pure returns (qVotingStruct memory) {\n        qVotingStruct memory q;\n\n        q.maxQuadraticPoints = Math.sqrt(voteCredits);\n\n        // This block finds how many vote positions are needed to distribute all quadratic vote points.\n        uint256 iterator = 0;\n        uint256 accumulator = 0;\n        do {\n            iterator++;\n            accumulator += iterator ** 2;\n        } while (accumulator < voteCredits);\n        // This enforces requirement that all vote credits can indeed be spended (no leftovers)\n        if (accumulator != voteCredits) require(false, \"quadraticVotingError\"); //revert quadraticVotingError(\"voteCredits bust be i^2 series\", accumulator, voteCredits);\n        q.minQuadraticPositons = iterator;\n        // In order to spend all vote credits there must be at least minQuadraticPositons+1 (becuase proposer is also a player and cannot vote for himself)\n        if (minExpectedVoteItems <= q.minQuadraticPositons) require(false, \"quadraticVotingError\");\n        // revert quadraticVotingError(\n        //     \"Minimum Voting positions above min players\",\n        //     q.minQuadraticPositons,\n        //     minExpectedVoteItems\n        // );\n        q.voteCredits = voteCredits;\n        return q;\n    }\n\n    /**\n     * @dev Computes the scores for each proposal by voter preference index. `q` is the precomputed quadratic voting values. `VotersVotes` is a 2D array of votes, where each row corresponds to a voter and each column corresponds to a proposal. `voterVoted` is an array indicating whether each voter has voted. `notVotedGivesEveyone` is the number of points to distribute to each proposal for each voter that did not vote. `proposalsLength` is the number of proposals.\n     *\n     * Returns:\n     *\n     * - An array of scores for each proposal.\n     */\n    function computeScoresByVPIndex(\n        qVotingStruct memory q,\n        uint256[][] memory VotersVotes,\n        bool[] memory voterVoted,\n        uint256 notVotedGivesEveyone,\n        uint256 proposalsLength\n    ) internal pure returns (uint256[] memory) {\n        uint256[] memory scores = new uint256[](proposalsLength);\n        uint256[] memory creditsUsed = new uint256[](VotersVotes.length);\n\n        for (uint256 proposalIdx = 0; proposalIdx < proposalsLength; proposalIdx++) {\n            //For each proposal\n            scores[proposalIdx] = 0;\n            for (uint256 vi = 0; vi < VotersVotes.length; vi++) {\n                // For each potential voter\n                uint256[] memory voterVotes = VotersVotes[vi];\n                if (!voterVoted[vi]) {\n                    // Check if voter wasn't voting\n                    scores[proposalIdx] += notVotedGivesEveyone; // Gives benefits to everyone but himself\n                    creditsUsed[vi] = q.voteCredits;\n                } else {\n                    //If voter voted\n                    scores[proposalIdx] += voterVotes[proposalIdx];\n                    creditsUsed[vi] += voterVotes[proposalIdx] ** 2;\n                    if (creditsUsed[vi] > q.voteCredits) require(false, \"quadraticVotingError\"); // revert quadraticVotingError(\"Quadratic: vote credits overrun\", q.voteCredits, creditsUsed[vi]);\n                }\n            }\n        }\n        return scores;\n    }\n}\n"
    },
    "src/libraries/LibRankify.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport {LibTBG} from \"../libraries/LibTurnBasedGame.sol\";\nimport {IRankifyInstanceCommons} from \"../interfaces/IRankifyInstanceCommons.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IRankToken} from \"../interfaces/IRankToken.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {LibQuadraticVoting} from \"./LibQuadraticVoting.sol\";\nimport \"hardhat/console.sol\";\n\nlibrary LibRankify {\n    using LibTBG for LibTBG.GameInstance;\n    using LibTBG for uint256;\n    using LibTBG for LibTBG.GameSettings;\n    using LibQuadraticVoting for LibQuadraticVoting.qVotingStruct;\n\n    /**\n     * @dev Compares two strings for equality. `a` and `b` are the strings to compare.\n     *\n     * Returns:\n     *\n     * - `true` if the strings are equal, `false` otherwise.\n     */\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\n    }\n\n    /**\n     * @dev Returns the game storage for the given game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - The game storage for `gameId`.\n     */\n    function getGameStorage(uint256 gameId) internal view returns (IRankifyInstanceCommons.RInstance storage game) {\n        bytes32 position = LibTBG.getGameDataStorage(gameId);\n        assembly {\n            game.slot := position\n        }\n    }\n\n    /**\n     * @dev Returns the Rankify InstanceSettings storage.\n     *\n     * Returns:\n     *\n     * - The RInstanceSettings storage.\n     */\n    function RInstanceStorage() internal pure returns (IRankifyInstanceCommons.RInstanceSettings storage bog) {\n        bytes32 position = LibTBG.getDataStorage();\n        assembly {\n            bog.slot := position\n        }\n    }\n\n    bytes32 internal constant _PROPOSAL_PROOF_TYPEHASH =\n        keccak256(\"signProposalByGM(uint256 gameId,uint256 turn,bytes32 proposalNHash,string encryptedProposal)\");\n    bytes32 internal constant _VOTE_PROOF_TYPEHASH =\n        keccak256(\"signVote(uint256 vote1,uint256 vote2,uint256 vote3,uint256 gameId,uint256 turn,bytes32 salt)\");\n    bytes32 internal constant _VOTE_SUBMIT_PROOF_TYPEHASH =\n        keccak256(\"publicSignVote(uint256 gameId,uint256 turn,bytes32 vote1,bytes32 vote2,bytes32 vote3)\");\n\n    /**\n     * @dev Ensures that the contract is initialized.\n     *\n     * Requirements:\n     *\n     * - The contract must be initialized.\n     */\n    function enforceIsInitialized() internal view {\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\n        require(settings.contractInitialized, \"onlyInitialized\");\n    }\n\n    /**\n     * @dev Ensures that the game with the given ID exists. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     */\n    function enforceGameExists(uint256 gameId) internal view {\n        enforceIsInitialized();\n        require(gameId.gameExists(), \"no game found\");\n    }\n\n    /**\n     * @dev Creates a new game with the given parameters. `gameId` is the ID of the new game. `gameMaster` is the address of the game master. `gameRank` is the rank of the game. `creator` is the address of the creator of the game.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must not already exist.\n     * - `gameRank` must not be 0.\n     * - If the game price is not 0, the `creator` must have approved this contract to transfer the game price amount of the game payment token on their behalf.\n     *\n     * Modifies:\n     *\n     * - Creates a new game with `gameId`.\n     * - Transfers the game price amount of the game payment token from `creator` to this contract.\n     * - Sets the payments balance of the game to the game price.\n     * - Sets the creator of the game to `creator`.\n     * - Increments the number of games.\n     * - Sets the rank of the game to `gameRank`.\n     * - Mints new rank tokens.\n     */\n    function newGame(uint256 gameId, address gameMaster, uint256 gameRank, address creator) internal {\n        LibRankify.enforceIsInitialized();\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\n        gameId.createGame(gameMaster); // This will enforce game does not exist yet\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        require(gameRank != 0, \"game rank not specified\");\n        if (settings.gamePrice != 0) {\n            IERC20(settings.gamePaymentToken).transferFrom(creator, address(this), settings.gamePrice);\n            game.paymentsBalance = settings.gamePrice;\n        }\n\n        game.createdBy = creator;\n        settings.numGames += 1;\n        game.rank = gameRank;\n\n        IRankToken rankTokenContract = IRankToken(settings.rankTokenAddress);\n        rankTokenContract.mint(address(this), 1, gameRank + 1, \"\");\n        rankTokenContract.mint(address(this), 3, gameRank, \"\");\n    }\n\n    /**\n     * @dev Ensures that the candidate is the creator of the game with the given ID. `gameId` is the ID of the game. `candidate` is the address of the candidate.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     * - `candidate` must be the creator of the game.\n     */\n    function enforceIsGameCreator(uint256 gameId, address candidate) internal view {\n        enforceGameExists(gameId);\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        require(game.createdBy == candidate, \"Only game creator\");\n    }\n\n    /**\n     * @dev Ensures that the candidate is the game master of the game with the given ID. `gameId` is the ID of the game. `candidate` is the address of the candidate.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     * - `candidate` must be the game master of the game.\n     */\n    function enforceIsGM(uint256 gameId, address candidate) internal view {\n        enforceGameExists(gameId);\n        require(gameId.getGM() == candidate, \"Only game master\");\n    }\n\n    /**\n     * @dev Locks the rank token of the player. `player` is the address of the player. `gameRank` is the rank of the game. `rankTokenAddress` is the address of the rank token contract.\n     *\n     * Requirements:\n     *\n     * - `RankTokenAddress` must support `IRankToken` interface\n     *\n     * Modifies:\n     *\n     * - Locks `gameRank` rank of `player` in the rank token contract.\n     */\n    function _fulfillRankRq(address player, uint256 gameRank, address rankTokenAddress) private {\n        IRankToken rankToken = IRankToken(rankTokenAddress);\n        rankToken.lock(player, gameRank, 1);\n    }\n\n    /**\n     * @dev Allows a player to join a game. `gameId` is the ID of the game. `player` is the address of the player.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     * - If the join game price is not 0, the `player` must have approved this contract to transfer the join game price amount of the game payment token on their behalf.\n     *\n     * Modifies:\n     *\n     * - Transfers the join game price amount of the game payment token from `player` to this contract.\n     * - Increases the payments balance of the game by the join game price.\n     * - Adds `player` to the game.\n     */\n    function joinGame(uint256 gameId, address player) internal {\n        enforceGameExists(gameId);\n        fulfillRankRq(gameId, player);\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = RInstanceStorage();\n        if (_RInstance.joinGamePrice != 0) {\n            IERC20(_RInstance.gamePaymentToken).transferFrom(player, address(this), _RInstance.joinGamePrice);\n            IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n            game.paymentsBalance += _RInstance.joinGamePrice;\n        }\n        gameId.addPlayer(player);\n    }\n\n    /**\n     * @dev Closes the game with the given ID and transfers the game's balance to the beneficiary. `gameId` is the ID of the game. `beneficiary` is the address to transfer the game's balance to. `playersGameEndedCallback` is a callback function to call for each player when the game ends.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     *\n     * Modifies:\n     *\n     * - Emits rank rewards for the game.\n     * - Removes and unlocks each player from the game.\n     * - Calls `playersGameEndedCallback` for each player.\n     * - Transfers the game's balance to `beneficiary`.\n     *\n     * Returns:\n     *\n     * - The final scores of the game.\n     */\n    function closeGame(\n        uint256 gameId,\n        address beneficiary,\n        function(uint256, address) playersGameEndedCallback\n    ) internal returns (uint256[] memory) {\n        enforceGameExists(gameId);\n        emitRankRewards(gameId, gameId.getLeaderBoard());\n        (, uint256[] memory finalScores) = gameId.getScores();\n        address[] memory players = gameId.getPlayers();\n        for (uint256 i = 0; i < players.length; i++) {\n            removeAndUnlockPlayer(gameId, players[i]);\n            playersGameEndedCallback(gameId, players[i]);\n        }\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = LibRankify.RInstanceStorage();\n        IERC20(_RInstance.gamePaymentToken).transfer(\n            beneficiary,\n            (_RInstance.joinGamePrice * players.length) + _RInstance.gamePrice\n        );\n        return finalScores;\n    }\n\n    /**\n     * @dev Allows a player to quit a game. `gameId` is the ID of the game. `player` is the address of the player. `slash` is a boolean indicating whether to slash the player's payment refund. `onPlayerLeftCallback` is a callback function to call when the player leaves.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     *\n     * Modifies:\n     *\n     * - If the join game price is not 0, transfers a refund to `player` and decreases the game's payments balance by the refund amount.\n     * - Removes and unlocks `player` from the game.\n     * - Calls `onPlayerLeftCallback` for `player`.\n     */\n    function quitGame(\n        uint256 gameId,\n        address player,\n        bool slash,\n        function(uint256, address) onPlayerLeftCallback\n    ) internal {\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = RInstanceStorage();\n        if (_RInstance.joinGamePrice != 0) {\n            uint256 divideBy = slash ? 2 : 1;\n            uint256 paymentRefund = _RInstance.joinGamePrice / divideBy;\n            IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n            game.paymentsBalance -= paymentRefund;\n            IERC20(_RInstance.gamePaymentToken).transfer(player, paymentRefund);\n        }\n        removeAndUnlockPlayer(gameId, player); // this will throw if game has started or doesnt exist\n        onPlayerLeftCallback(gameId, player);\n    }\n\n    /**\n     * @dev Cancels the game with the given ID, refunds half of the game's payment to the game creator, and transfers the remaining balance to the beneficiary. `gameId` is the ID of the game. `onPlayerLeftCallback` is a callback function to call for each player when they leave. `beneficiary` is the address to transfer the remaining balance to.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     *\n     * Modifies:\n     *\n     * - Calls `quitGame` for each player in the game.\n     * - Transfers half of the game's payment to the game creator.\n     * - Decreases the game's payments balance by the refund amount.\n     * - Transfers the remaining balance of the game to `beneficiary`.\n     * - Deletes the game.\n     */ function cancelGame(\n        uint256 gameId,\n        function(uint256, address) onPlayerLeftCallback,\n        address beneficiary\n    ) internal {\n        // Cancel the game for each player\n        address[] memory players = gameId.getPlayers();\n        for (uint256 i = 0; i < players.length; i++) {\n            quitGame(gameId, players[i], false, onPlayerLeftCallback); //this will throw if game has started or doesnt exist\n        }\n\n        // Refund payment to the game creator\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = RInstanceStorage();\n        uint256 paymentRefund = _RInstance.gamePrice / 2;\n        IERC20(_RInstance.gamePaymentToken).transfer(game.createdBy, paymentRefund);\n        game.paymentsBalance -= paymentRefund;\n\n        // Transfer remaining payments balance to the beneficiary\n        IERC20(_RInstance.gamePaymentToken).transfer(beneficiary, game.paymentsBalance);\n        game.paymentsBalance = 0;\n\n        // Delete the game\n        gameId.deleteGame();\n    }\n\n    /**\n     * @dev Fulfills the rank requirement for a player to join a game. `gameId` is the ID of the game. `player` is the address of the player.\n     *\n     * Modifies:\n     *\n     * - Locks the rank token(s) of `player` in the rank token contract.\n     * - If the game has additional ranks, locks the additional ranks of `player` in the respective rank token contracts.\n     */\n    function fulfillRankRq(uint256 gameId, address player) internal {\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        if (game.rank > 1) {\n            _fulfillRankRq(player, game.rank, settings.rankTokenAddress);\n            for (uint256 i = 0; i < game.additionalRanks.length; i++) {\n                _fulfillRankRq(player, game.rank, game.additionalRanks[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev Emits rank rewards to the top three addresses in the leaderboard. `gameId` is the ID of the game. `leaderboard` is an array of addresses representing the leaderboard sorted in descendign order. `rankTokenAddress` is the address of the rank token contract.\n     *\n     * Modifies:\n     *\n     * - Transfers rank tokens from this contract to the top three addresses in the leaderboard.\n     */\n    function emitRankReward(uint256 gameId, address[] memory leaderboard, address rankTokenAddress) private {\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        IRankToken rankTokenContract = IRankToken(rankTokenAddress);\n        rankTokenContract.safeTransferFrom(address(this), leaderboard[0], game.rank + 1, 1, \"\");\n        rankTokenContract.safeTransferFrom(address(this), leaderboard[1], game.rank, 2, \"\");\n        rankTokenContract.safeTransferFrom(address(this), leaderboard[2], game.rank, 1, \"\");\n    }\n\n    /**\n     * @dev Emits rank rewards to the top addresses in the leaderboard for each rank in the game. `gameId` is the ID of the game. `leaderboard` is an array of addresses representing the leaderboard.\n     *\n     * Modifies:\n     *\n     * - Calls `emitRankReward` for the main rank and each additional rank in the game.\n     */\n    function emitRankRewards(uint256 gameId, address[] memory leaderboard) internal {\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        IRankifyInstanceCommons.RInstanceSettings storage settings = LibRankify.RInstanceStorage();\n        emitRankReward(gameId, leaderboard, settings.rankTokenAddress);\n        for (uint256 i = 0; i < game.additionalRanks.length; i++) {\n            emitRankReward(gameId, leaderboard, game.additionalRanks[i]);\n        }\n    }\n\n    /**\n     * @dev Releases a rank token for a player with a specific game rank. `player` is the address of the player. `gameRank` is the game rank of the player. `rankTokenAddress` is the address of the rank token contract.\n     *\n     * Modifies:\n     *\n     * - Unlocks one rank token of `gameRank` for `player` in the rank token contract.\n     */\n    function _releaseRankToken(address player, uint256 gameRank, address rankTokenAddress) private {\n        IRankToken rankToken = IRankToken(rankTokenAddress);\n        rankToken.unlock(player, gameRank, 1);\n    }\n\n    /**\n     * @dev Removes a player from a game and unlocks their rank tokens. `gameId` is the ID of the game. `player` is the address of the player to be removed.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     *\n     * Modifies:\n     *\n     * - Removes `player` from the game.\n     * - If the game rank is greater than 1, unlocks the game rank token for `player` in the rank token contract and unlocks each additional rank token for `player` in the respective rank token contracts.\n     */\n    function removeAndUnlockPlayer(uint256 gameId, address player) internal {\n        enforceGameExists(gameId);\n        gameId.removePlayer(player); //This will throw if game is in the process\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        if (game.rank > 1) {\n            _releaseRankToken(player, game.rank, settings.rankTokenAddress);\n            for (uint256 i = 0; i < game.additionalRanks.length; i++) {\n                _releaseRankToken(player, game.rank, game.additionalRanks[i]);\n            }\n        }\n    }\n\n    /**\n     * @dev Tries to make a move for a player in a game. `gameId` is the ID of the game. `player` is the address of the player.\n     * The \"move\" is considered to be a state when player has made all actions he could in the given turn.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     *\n     * Modifies:\n     *\n     * - If the player has not voted and a vote is expected, or if the player has not made a proposal and a proposal is expected, does not make a move and returns `false`.\n     * - Otherwise, makes a move for `player` and returns `true`.\n     */\n    function tryPlayerMove(uint256 gameId, address player) internal returns (bool) {\n        uint256 turn = gameId.getTurn();\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        bool expectVote = true;\n        bool expectProposal = true;\n        if (turn == 1) expectVote = false; //Dont expect votes at firt turn\n        // else if (gameId.isLastTurn()) expectProposal = false; // For now easiest solution is to keep collecting proposals as that is less complicated boundry case\n        if (game.numPrevProposals < settings.voting.minQuadraticPositons) expectVote = false; // If there is not enough proposals then round is skipped votes cannot be filled\n        bool madeMove = true;\n        if (expectVote && !game.playerVoted[player]) madeMove = false;\n        if (expectProposal && game.proposalCommitmentHashes[player] == \"\") madeMove = false;\n        if (madeMove) gameId.playerMove(player);\n        return madeMove;\n    }\n\n    /**\n     * @dev Calculates the scores using a quadratic formula based on the revealed votes and proposer indices. `gameId` is the ID of the game. `votesRevealed` is an array of revealed votes. `proposerIndicies` is an array of proposer indices that links proposals to index in getPlayers().\n     *\n     * Returns:\n     *\n     * - An array of updated scores for each player.\n     * - An array of scores calculated for the current round.\n     */\n    function calculateScoresQuadratic(\n        uint256 gameId,\n        uint256[][] memory votesRevealed,\n        uint256[] memory proposerIndicies\n    ) internal returns (uint256[] memory, uint256[] memory) {\n        address[] memory players = gameId.getPlayers();\n        uint256[] memory scores = new uint256[](players.length);\n        uint256[] memory roundScores = new uint256[](players.length);\n        bool[] memory playerVoted = new bool[](players.length);\n        IRankifyInstanceCommons.RInstanceSettings storage settings = RInstanceStorage();\n        IRankifyInstanceCommons.RInstance storage game = getGameStorage(gameId);\n        // Convert mappiing to array to pass it to libQuadratic\n        for (uint256 i = 0; i < players.length; i++) {\n            playerVoted[i] = game.playerVoted[players[i]];\n        }\n        roundScores = settings.voting.computeScoresByVPIndex(\n            votesRevealed,\n            playerVoted,\n            settings.voting.maxQuadraticPoints,\n            proposerIndicies.length\n        );\n        for (uint256 playerIdx = 0; playerIdx < players.length; playerIdx++) {\n            //for each player\n            if (proposerIndicies[playerIdx] < players.length) {\n                //if player proposal exists\n                scores[playerIdx] = gameId.getScore(players[playerIdx]) + roundScores[playerIdx];\n                gameId.setScore(players[playerIdx], scores[playerIdx]);\n            } else {\n                //Player did not propose\n            }\n        }\n        return (scores, roundScores);\n    }\n}\n"
    },
    "src/libraries/LibReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n// import \"./LibDiamondOwner.sol\";\n// import { IMultipass } from \"../interfaces/sol\";\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nlibrary LibReentrancyGuard {\n    bytes32 constant TBG_STORAGE_POSITION = keccak256(\"reentrancyguard.storage.position\");\n\n    struct ReentrancyGuardStruct {\n        bool _entered;\n    }\n\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStruct storage ds) {\n        bytes32 position = TBG_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n}\n"
    },
    "src/libraries/LibTurnBasedGame.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"hardhat/console.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// import {EnumerableMap} from \"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {LibArray} from \"../libraries/LibArray.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\n\n/**\n * @title LibTBG\n * @dev Library for managing turn-based games.\n * It is designed to be used as a base library for games, and provides the following functionality:\n * - setting game settings such as time per turn, max players, min players, etc as well as perform score and leaderboard tracking\n *\n * Limitations:\n * - It is assumed there is only one game per player\n * - It is assumed there is only on game master per game\n *\n * ***WARNING*** Some limitations:\n * - This library is still under development and its interfaces may change.\n * - getting game data (which has own storage assigement and can be encapsulated from library) however there is no storage slot collision checks in place\n *\n */\nlibrary LibTBG {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    struct GameSettings {\n        uint256 timePerTurn;\n        uint256 maxPlayersSize;\n        uint256 minPlayersSize;\n        uint256 timeToJoin;\n        uint256 maxTurns;\n        uint256 numWinners;\n        uint256 voteCredits;\n        string subject;\n    }\n\n    struct GameInstance {\n        address gameMaster;\n        uint256 currentTurn;\n        uint256 turnStartedAt;\n        uint256 registrationOpenAt;\n        bool hasStarted;\n        bool hasEnded;\n        EnumerableSet.AddressSet players;\n        mapping(address => bool) madeMove;\n        uint256 numPlayersMadeMove;\n        mapping(address => uint256) score;\n        bytes32 implemenationStoragePointer;\n        bool isOvertime;\n        address[] leaderboard;\n    }\n\n    struct TBGStorageStruct {\n        GameSettings settings;\n        mapping(uint256 => GameInstance) games;\n        mapping(address => uint256) playerInGame;\n        uint256 totalGamesCreated;\n    }\n\n    bytes32 constant TBG_STORAGE_POSITION = keccak256(\"turnbasedgame.storage.position\");\n    bytes32 constant IMPLEMENTATION_STORAGE_POSITION = keccak256(\"implementation.turnbasedgame.storage.position\");\n\n    function TBGStorage() internal pure returns (TBGStorageStruct storage es) {\n        bytes32 position = TBG_STORAGE_POSITION;\n        assembly {\n            es.slot := position\n        }\n    }\n\n    function _getGame(uint256 gameId) internal view returns (GameInstance storage) {\n        TBGStorageStruct storage tbg = TBGStorage();\n        return tbg.games[gameId];\n    }\n\n    /**\n     * @dev Initializes the game with the provided settings. `settings` is the settings for the game.\n     *\n     * Requirements:\n     *\n     * - `settings.timePerTurn` must not be zero.\n     * - `settings.maxPlayersSize` must not be zero.\n     * - `settings.minPlayersSize` must be at least 2.\n     * - `settings.maxTurns` must not be zero.\n     * - `settings.numWinners` must not be zero and must be less than `settings.minPlayersSize`.\n     * - `settings.timeToJoin` must not be zero.\n     * - `settings.maxPlayersSize` must not be less than `settings.minPlayersSize`.\n     * - `settings.subject` must not be an empty string.\n     *\n     * Modifies:\n     *\n     * - Sets the settings of the game to `settings`.\n     */\n    function init(GameSettings memory settings) internal {\n        TBGStorageStruct storage tbg = TBGStorage();\n        if (settings.timePerTurn == 0) require(false, \"settings.timePerTurn\"); //  revert invalidConfiguration('timePerTurn');\n        if (settings.maxPlayersSize == 0) require(false, \"settings.maxPlayersSize\"); // revert invalidConfiguration('maxPlayersSize');\n        if (settings.minPlayersSize < 2) require(false, \"settings.minPlayersSize\"); //revert invalidConfiguration('minPlayersSize');\n        if (settings.maxTurns == 0) require(false, \"settings.maxTurns\"); //revert invalidConfiguration('maxTurns');\n        if (settings.numWinners == 0 || settings.numWinners >= settings.minPlayersSize) require(false, \"numWinners\"); //revert invalidConfiguration('numWinners');\n        if (settings.timeToJoin == 0) require(false, \"timeToJoin\"); // revert invalidConfiguration('timeToJoin');\n        if (settings.maxPlayersSize < settings.minPlayersSize) require(false, \"maxPlayersSize\"); //revert invalidConfiguration('maxPlayersSize');\n        if (bytes(settings.subject).length == 0) require(false, \"subject length\"); //revert invalidConfiguration('subject length');\n\n        tbg.settings = settings;\n    }\n\n    /**\n     * @dev Creates a new game with the provided game ID and game master. `gameId` is the ID of the game. `gm` is the address of the game master.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must not already exist.\n     * - `gm` must not be the zero address.\n     * - `gameId` must not be zero.\n     * - The game master of the game with `gameId` must be the zero address.\n     *\n     * Modifies:\n     *\n     * - Sets the game master of the game with `gameId` to `gm`.\n     * - Increments the total number of games created.\n     */\n    function createGame(uint256 gameId, address gm) internal {\n        TBGStorageStruct storage tbg = TBGStorage();\n        require(!gameExists(gameId), \"createGame->Already exists\");\n        require(gm != address(0), \"createGame->GM\");\n        require(gameId != 0, \"createGame->gameId\");\n        require(tbg.games[gameId].gameMaster == address(0), \"createGame->gameId\");\n        tbg.games[gameId].gameMaster = gm;\n        tbg.totalGamesCreated += 1;\n\n        //totalGamesCreated ensures nonce-like behaviur:\n        //even if game would get deleted and re-created with same name, data storage would be different\n        tbg.games[gameId].implemenationStoragePointer = keccak256(\n            abi.encode(gameId, tbg.totalGamesCreated, TBG_STORAGE_POSITION)\n        );\n    }\n\n    /**\n     * @dev Deletes a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     *\n     * Modifies:\n     *\n     * - Sets the game master, current turn, hasEnded, hasStarted,\n     *   implementationStoragePointer, isOvertime, leaderboard, numPlayersMadeMove,\n     *   players, registrationOpenAt, and turnStartedAt of the game with `gameId`\n     *   to their initial values.\n     * - Sets the score and madeMove of each player in the game with `gameId`\n     *   to their initial values.\n     */\n    function deleteGame(uint256 gameId) internal {\n        TBGStorageStruct storage tbg = TBGStorage();\n        GameInstance storage _game = _getGame(gameId);\n        address[] memory players = _game.players.values();\n        for (uint256 i = 0; i < players.length; i++) {\n            tbg.games[gameId].score[players[i]] = 0;\n            tbg.games[gameId].madeMove[players[i]] = false;\n        }\n        delete tbg.games[gameId].gameMaster;\n        delete tbg.games[gameId].currentTurn;\n        delete tbg.games[gameId].hasEnded;\n        delete tbg.games[gameId].hasStarted;\n        delete tbg.games[gameId].implemenationStoragePointer;\n        delete tbg.games[gameId].isOvertime;\n        delete tbg.games[gameId].leaderboard;\n        delete tbg.games[gameId].numPlayersMadeMove;\n        delete tbg.games[gameId].players;\n        delete tbg.games[gameId].registrationOpenAt;\n        delete tbg.games[gameId].turnStartedAt;\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID can be joined. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game can be joined.\n     */\n    function canBeJoined(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        if (_game.hasStarted || _game.registrationOpenAt == 0) return false;\n        return true;\n    }\n\n    /**\n     * @dev Adds a player to a game with the provided game ID. `gameId` is the ID of the game. `participant` is the address of the player.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     * - `participant` must not already be in a game.\n     * - The number of players in the game with `gameId` must be less than the maximum number of players.\n     * - The game with `gameId` must be joinable.\n     *\n     * Modifies:\n     *\n     * - Adds `participant` to the players of the game with `gameId`.\n     * - Sets the madeMove of `participant` in the game with `gameId` to false.\n     * - Sets the game of `participant` to `gameId`.\n     */\n    function addPlayer(uint256 gameId, address participant) internal {\n        TBGStorageStruct storage tbg = TBGStorage();\n        require(gameExists(gameId), \"addPlayer->invalid game\");\n\n        require(tbg.playerInGame[participant] == 0, \"addPlayer->Player in game\");\n        GameInstance storage _game = _getGame(gameId);\n        require(_game.players.length() < tbg.settings.maxPlayersSize, \"addPlayer->party full\");\n\n        require(canBeJoined(gameId), \"addPlayer->cant join now\");\n        _game.players.add(participant);\n        _game.madeMove[participant] = false;\n        tbg.playerInGame[participant] = gameId;\n    }\n\n    /**\n     * @dev Checks if a player is in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the player is in the game.\n     */\n    function isPlayerInGame(uint256 gameId, address player) internal view returns (bool) {\n        TBGStorageStruct storage tbg = TBGStorage();\n        return tbg.playerInGame[player] == gameId ? true : false;\n    }\n\n    /**\n     * @dev Removes a player from a game with the provided game ID. `gameId` is the ID of the game. `participant` is the address of the player.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     * - `participant` must be in the game with `gameId`.\n     * - The game with `gameId` must not have started or must have ended.\n     *\n     * Modifies:\n     *\n     * - Sets the game of `participant` to 0.\n     * - Removes `participant` from the players of the game with `gameId`.\n     */\n    function removePlayer(uint256 gameId, address participant) internal {\n        TBGStorageStruct storage tbg = TBGStorage();\n        GameInstance storage _game = _getGame(gameId);\n        require(gameExists(gameId), \"game does not exist\");\n        require(tbg.playerInGame[participant] == gameId, \"Not in the game\");\n        require(_game.hasStarted == false || _game.hasEnded == true, \"Cannot leave once started\");\n        tbg.playerInGame[participant] = 0;\n        _game.players.remove(participant);\n    }\n\n    /**\n     * @dev Checks if the current turn in a game with the provided game ID has timed out. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - `gameId` must not be zero.\n     * - The game with `gameId` must have started.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the current turn has timed out.\n     */\n    function isTurnTimedOut(uint256 gameId) internal view returns (bool) {\n        TBGStorageStruct storage tbg = TBGStorage();\n        GameInstance storage _game = _getGame(gameId);\n        assert(gameId != 0);\n        assert(_game.hasStarted == true);\n        if (block.timestamp <= tbg.settings.timePerTurn + _game.turnStartedAt) return false;\n        return true;\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID exists. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game exists.\n     */\n    function gameExists(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        if (_game.gameMaster != address(0)) return true;\n        return false;\n    }\n\n    /**\n     * @dev Enforces that a game with the provided game ID has started. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - `gameId` must not be zero.\n     * - The game with `gameId` must have started.\n     */\n    function enforceHasStarted(uint256 gameId) internal view {\n        GameInstance storage _game = _getGame(gameId);\n        assert(gameId != 0);\n        require(_game.hasStarted, \"Game has not yet started\");\n    }\n\n    /**\n     * @dev Enforces that a game with the provided game ID has started. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - `gameId` must not be zero.\n     * - The game with `gameId` must have started.\n     *\n     */\n    function canEndTurn(uint256 gameId) internal view returns (bool) {\n        bool turnTimedOut = isTurnTimedOut(gameId);\n        GameInstance storage _game = _getGame(gameId);\n        if (!_game.hasStarted || isGameOver(gameId)) return false;\n        if (turnTimedOut) return true;\n        return false;\n    }\n\n    /**\n     * @dev Checks if the current turn in a game with the provided game ID can end early. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the current turn can end early.\n     */\n    function canEndTurnEarly(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        bool everyoneMadeMove = (_game.numPlayersMadeMove) == _game.players.length() ? true : false;\n        if (!_game.hasStarted || isGameOver(gameId)) return false;\n        if (everyoneMadeMove || canEndTurn(gameId)) return true;\n        return false;\n    }\n\n    /**\n     * @dev Modifier that requires the current turn in a game with the provided game ID to be able to end. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - The current turn in the game with `gameId` must be able to end.\n     */\n    modifier onlyInTurnTime(uint256 gameId) {\n        require(isTurnTimedOut(gameId) == false, \"onlyInTurnTime -> turn timedout\");\n        _;\n    }\n\n    modifier onlyWhenTurnCanEnd(uint256 gameId) {\n        require(canEndTurn(gameId) == true, \"onlyWhenTurnCanEnd: Not everyone made a move yet and there still is time\");\n        _;\n    }\n\n    /**\n     * @dev Clears the current moves in a game. `game` is the game.\n     *\n     * Modifies:\n     *\n     * - Sets the madeMove of each player in `game` to false.\n     */\n    function _clearCurrentMoves(GameInstance storage game) internal {\n        for (uint256 i = 0; i < game.players.length(); i++) {\n            address player = game.players.at(i);\n            game.madeMove[player] = false;\n        }\n        game.numPlayersMadeMove = 0;\n    }\n\n    /**\n     * @dev Resets the states of the players in a game. `game` is the game.\n     *\n     * Modifies:\n     *\n     * - Sets the madeMove and score of each player in `game` to their initial values.\n     */\n    function _resetPlayerStates(GameInstance storage game) internal {\n        for (uint256 i = 0; i < game.players.length(); i++) {\n            address player = game.players.at(i);\n            game.madeMove[player] = false;\n            game.score[player] = 0;\n        }\n    }\n\n    /**\n     * @dev Sets the score of a player in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player. `value` is the score.\n     *\n     * Requirements:\n     *\n     * - `player` must be in the game with `gameId`.\n     *\n     * Modifies:\n     *\n     * - Sets the score of `player` in the game with `gameId` to `value`.\n     */\n    function setScore(uint256 gameId, address player, uint256 value) internal {\n        GameInstance storage _game = _getGame(gameId);\n        require(isPlayerInGame(gameId, player), \"player not in a game\");\n        _game.score[player] = value;\n    }\n\n    /**\n     * @dev Gets the score of a player in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\n     *\n     * Returns:\n     *\n     * - The score of `player` in the game with `gameId`.\n     */\n    function getScore(uint256 gameId, address player) internal view returns (uint256) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.score[player];\n    }\n\n    /**\n     * @dev Gets the scores of the players in a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - An array of the addresses of the players in the game with `gameId`.\n     * - An array of the scores of the players in the game with `gameId`.\n     */\n    function getScores(uint256 gameId) internal view returns (address[] memory, uint256[] memory) {\n        address[] memory players = getPlayers(gameId);\n        uint256[] memory scores = new uint256[](players.length);\n        for (uint256 i = 0; i < players.length; i++) {\n            scores[i] = getScore(gameId, players[i]);\n        }\n        return (players, scores);\n    }\n\n    /**\n     * @dev Opens registration for a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     *\n     * Modifies:\n     *\n     * - Sets the registrationOpenAt of the game with `gameId` to the current block timestamp.\n     */\n    function openRegistration(uint256 gameId) internal {\n        require(gameExists(gameId), \"game not found\");\n        GameInstance storage _game = _getGame(gameId);\n        _game.registrationOpenAt = block.timestamp;\n    }\n\n    /**\n     * @dev Checks if registration is open for a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether registration is open for the game.\n     */\n    function isRegistrationOpen(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        TBGStorageStruct storage tbg = TBGStorage();\n        if (_game.registrationOpenAt == 0) {\n            return false;\n        } else {\n            return _game.registrationOpenAt < block.timestamp + tbg.settings.timeToJoin ? true : false;\n        }\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID can start. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game can start.\n     */\n    function canStart(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        TBGStorageStruct storage tbg = TBGStorage();\n        if (_game.hasStarted) return false;\n        if (_game.registrationOpenAt == 0) return false;\n        if (gameId == 0) return false;\n        if (block.timestamp <= _game.registrationOpenAt + tbg.settings.timeToJoin) return false;\n        if (_game.players.length() < tbg.settings.minPlayersSize) return false;\n        return true;\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID can start early. `gameId` is the ID of the game.\n     * By \"early\" it is assumed that time to join has not yet passed, but it's already cap players limit reached.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game can start early.\n     */\n    function canStartEarly(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        TBGStorageStruct storage tbg = TBGStorage();\n\n        if ((_game.players.length() == tbg.settings.maxPlayersSize) || canStart(gameId)) return true;\n        return false;\n    }\n\n    /**\n     * @dev Starts a game with the provided game ID early. `gameId` is the ID of the game.\n     * By \"early\" it is assumed that time to join has not yet passed, but it's already cap players limit reached.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     * - The game with `gameId` must not have started.\n     * - The game with `gameId` must have opened registration.\n     * - The number of players in the game with `gameId` must be greater than or equal to the minimum number of players.\n     * - The number of players in the game with `gameId` must be equal to the maximum number of players or the current block timestamp must be greater than the registration open time plus the time to join.\n     *\n     * Modifies:\n     *\n     * - Sets the hasStarted, hasEnded, currentTurn, and turnStartedAt of the game with `gameId` to their new values.\n     * - Resets the states of the players in the game with `gameId`.\n     */\n    function startGameEarly(uint256 gameId) internal {\n        GameInstance storage _game = _getGame(gameId);\n        TBGStorageStruct storage tbg = TBGStorage();\n        require(_game.hasStarted == false, \"startGame->already started\");\n        require(_game.registrationOpenAt != 0, \"startGame->Game registration was not yet open\");\n        require(gameId != 0, \"startGame->Game not found\");\n        require(_game.players.length() >= tbg.settings.minPlayersSize, \"startGame->Not enough players\");\n        require(\n            (_game.players.length() == tbg.settings.maxPlayersSize) ||\n                (block.timestamp > _game.registrationOpenAt + tbg.settings.timeToJoin),\n            \"startGame->Not enough players\"\n        );\n        _game.hasStarted = true;\n        _game.hasEnded = false;\n        _game.currentTurn = 1;\n        _game.turnStartedAt = block.timestamp;\n        _resetPlayerStates(_game);\n    }\n\n    /**\n     * @dev Starts a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must exist.\n     * - The game with `gameId` must not have started.\n     * - The game with `gameId` must have opened registration.\n     * - The current block timestamp must be greater than the registration open time plus the time to join.\n     *\n     * Modifies:\n     *\n     * - Sets the hasStarted, hasEnded, currentTurn, and turnStartedAt of the game with `gameId` to their new values.\n     * - Resets the states of the players in the game with `gameId`.\n     */\n    function startGame(uint256 gameId) internal {\n        GameInstance storage _game = _getGame(gameId);\n        TBGStorageStruct storage tbg = TBGStorage();\n        require(_game.hasStarted == false, \"startGame->already started\");\n        require(_game.registrationOpenAt != 0, \"startGame->Game registration was not yet open\");\n        require(block.timestamp > _game.registrationOpenAt + tbg.settings.timeToJoin, \"startGame->Still Can Join\");\n        require(gameId != 0, \"startGame->Game not found\");\n        require(_game.players.length() >= tbg.settings.minPlayersSize, \"startGame->Not enough players\");\n        _game.hasStarted = true;\n        _game.hasEnded = false;\n        _game.currentTurn = 1;\n        _game.turnStartedAt = block.timestamp;\n        _resetPlayerStates(_game);\n    }\n\n    /**\n     * @dev Gets the current turn of a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - The current turn of the game with `gameId`.\n     */\n    function getTurn(uint256 gameId) internal view returns (uint256) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.currentTurn;\n    }\n\n    /**\n     * @dev Gets the game master of a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - The game master of the game with `gameId`.\n     */\n    function getGM(uint256 gameId) internal view returns (address) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.gameMaster;\n    }\n\n    /**\n     * @dev Checks if the current turn is the last turn in a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the current turn is the last turn in the game.\n     */\n    function isLastTurn(uint256 gameId) internal view returns (bool) {\n        TBGStorageStruct storage tbg = TBGStorage();\n        GameInstance storage _game = _getGame(gameId);\n        if (_game.currentTurn == tbg.settings.maxTurns) return true;\n        else return false;\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID is over. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game is over.\n     */\n    function isGameOver(uint256 gameId) internal view returns (bool) {\n        TBGStorageStruct storage tbg = TBGStorage();\n        GameInstance storage _game = _getGame(gameId);\n        if ((_game.currentTurn > tbg.settings.maxTurns) && !_game.isOvertime) return true;\n        else return false;\n    }\n\n    /**\n     * @dev Enforces that a game with the provided game ID is not over. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must not be over.\n     */\n    function enforceIsNotOver(uint256 gameId) internal view {\n        require(!isGameOver(gameId), \"Game over\");\n    }\n\n    /**\n     * @dev Records a player's move in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must have started.\n     * - The game with `gameId` must not be over.\n     * - `player` must not have made a move in the current turn of the game with `gameId`.\n     * - `player` must be in the game with `gameId`.\n     *\n     * Modifies:\n     *\n     * - Sets the madeMove of `player` in the game with `gameId` to true.\n     * - Increments the numPlayersMadeMove of the game with `gameId`.\n     */\n    function playerMove(uint256 gameId, address player) internal onlyInTurnTime(gameId) {\n        GameInstance storage _game = _getGame(gameId);\n        enforceHasStarted(gameId);\n        enforceIsNotOver(gameId);\n        require(_game.madeMove[player] == false, \"already made a move\");\n        TBGStorageStruct storage tbg = TBGStorage();\n        require(gameId == tbg.playerInGame[player], \"is not in the game\");\n        _game.madeMove[player] = true;\n        _game.numPlayersMadeMove += 1;\n    }\n\n    /**\n     * @dev Enforces that a player is in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\n     *\n     * Requirements:\n     *\n     * - `player` must be in the game with `gameId`.\n     */\n    function enforceIsPlayingGame(uint256 gameId, address player) internal view {\n        TBGStorageStruct storage tbg = TBGStorage();\n        require(gameId == tbg.playerInGame[player], \"is not in the game\");\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID has started. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game has started.\n     */\n    function hasStarted(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.hasStarted;\n    }\n\n    /**\n     * @dev Gets the leaderboard of a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - An array of the addresses of the players in the game with `gameId`, sorted by score.\n     */\n    function getLeaderBoard(uint256 gameId) internal view returns (address[] memory) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.leaderboard;\n    }\n\n    /**\n     * @dev Advances to the next turn in a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - The game with `gameId` must be able to end the current turn early. (all players have moved or the turn has timed out)\n     *\n     * Modifies:\n     *\n     * - Clears the current moves in the game with `gameId`.\n     * - Increments the currentTurn of the game with `gameId`.\n     * - Sets the turnStartedAt of the game with `gameId` to the current block timestamp.\n     * - If the current turn is the last turn or the game with `gameId` is in overtime, checks if the game is a tie and sets the isOvertime of the game with `gameId` to the result.\n     * - Sets the hasEnded of the game with `gameId` to whether the game is over.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the current turn is the last turn.\n     * - A boolean indicating whether the game is a tie.\n     * - A boolean indicating whether the game is over.\n     */\n    function nextTurn(uint256 gameId) internal returns (bool, bool, bool) {\n        require(canEndTurnEarly(gameId), \"nextTurn->CanEndEarly\");\n        GameInstance storage _game = _getGame(gameId);\n        _clearCurrentMoves(_game);\n        _game.currentTurn += 1;\n        _game.turnStartedAt = block.timestamp;\n        bool _isLastTurn = isLastTurn(gameId);\n        if (_isLastTurn || _game.isOvertime) {\n            bool _isTie = isTie(gameId);\n            _game.isOvertime = _isTie;\n        }\n        _game.hasEnded = isGameOver(gameId);\n\n        (_game.leaderboard, ) = sortByScore(gameId);\n        return (_isLastTurn, _game.isOvertime, _game.hasEnded);\n    }\n\n    /**\n     * @dev Gets the data storage pointer.\n     *\n     * Returns:\n     *\n     * - The data storage pointer.\n     */\n    function getDataStorage() internal pure returns (bytes32 pointer) {\n        return IMPLEMENTATION_STORAGE_POSITION;\n    }\n\n    /**\n     * @dev Gets the game data storage pointer of a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - The game data storage pointer of the game with `gameId`.\n     */\n    function getGameDataStorage(uint256 gameId) internal view returns (bytes32 pointer) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.implemenationStoragePointer;\n    }\n\n    /**\n     * @dev Gets the number of players in a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - The number of players in the game with `gameId`.\n     */\n    function getPlayersNumber(uint256 gameId) internal view returns (uint256) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.players.length();\n    }\n\n    /**\n     * @dev Gets the players in a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - An array of the addresses of the players in the game with `gameId`.\n     */\n    function getPlayers(uint256 gameId) internal view returns (address[] memory) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.players.values();\n    }\n\n    /**\n     * @dev Gets the game settings.\n     *\n     * Returns:\n     *\n     * - The game settings.\n     */\n    function getGameSettings() internal view returns (GameSettings memory) {\n        TBGStorageStruct storage tbg = TBGStorage();\n        return tbg.settings;\n    }\n\n    /**\n     * @dev Enforces that a game with the provided game ID is in the pre-registration stage. `gameId` is the ID of the game.\n     *\n     * Requirements:\n     *\n     * - Registration must not be open for the game with `gameId`.\n     * - The game with `gameId` must not have started.\n     */\n    function enforceIsPreRegistrationStage(uint256 gameId) internal view {\n        require(!isRegistrationOpen(gameId), \"Cannot do when registration is open\");\n        require(!hasStarted(gameId), \"Cannot do when game started\");\n    }\n\n    /**\n     * @dev Adds overtime to a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Modifies:\n     *\n     * - Sets the isOvertime of the game with `gameId` to true.\n     */\n    function addOvertime(uint256 gameId) internal {\n        GameInstance storage _game = _getGame(gameId);\n        _game.isOvertime = true;\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID is in overtime. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game is in overtime.\n     */\n    function isOvertime(uint256 gameId) internal view returns (bool) {\n        GameInstance storage _game = _getGame(gameId);\n        return _game.isOvertime;\n    }\n\n    /**\n     * @dev Resets the overtime of a game with the provided game ID. `gameId` is the ID of the game.\n     *\n     * Modifies:\n     *\n     * - Sets the isOvertime of the game with `gameId` to false.\n     */\n    function resetOvertime(uint256 gameId) internal {\n        GameInstance storage _game = _getGame(gameId);\n        _game.isOvertime = false;\n    }\n\n    /**\n     * @dev Checks if a game with the provided game ID is a tie. `gameId` is the ID of the game.\n     * Tie being defined as at least two of the top `numWinners` players having the same score.\n     *\n     * Returns:\n     *\n     * - A boolean indicating whether the game is a tie.\n     */\n    function isTie(uint256 gameId) internal view returns (bool) {\n        TBGStorageStruct storage tbg = TBGStorage();\n        (address[] memory players, uint256[] memory scores) = getScores(gameId);\n\n        LibArray.quickSort(scores, int256(0), int256(scores.length - 1));\n        for (uint256 i = 0; i < players.length - 1; i++) {\n            if ((i <= tbg.settings.numWinners - 1)) {\n                if (scores[i] == scores[i + 1]) {\n                    return (true);\n                }\n            } else {\n                break;\n            }\n        }\n        return (false);\n    }\n\n    /**\n     * @dev Gets the game ID of the game a player is in. `player` is the address of the player.\n     *\n     * Returns:\n     *\n     * - The game ID of the game `player` is in.\n     */\n    function getPlayersGame(address player) internal view returns (uint256) {\n        TBGStorageStruct storage tbg = TBGStorage();\n\n        return tbg.playerInGame[player];\n    }\n\n    /**\n     * @dev Sorts the players and scores arrays in descending order of scores using the quicksort algorithm. `players` is the array of player addresses. `scores` is the array of scores. `left` is the left index. `right` is the right index.\n     *\n     * Modifies:\n     *\n     * - Sorts the `players` and `scores` arrays in place.\n     */\n    function _quickSort(address[] memory players, uint256[] memory scores, int256 left, int256 right) private view {\n        int256 i = left;\n        int256 j = right;\n        if (i == j) return;\n        uint256 pivot = scores[uint256(left + (right - left) / 2)];\n        while (i <= j) {\n            while (scores[uint256(i)] > pivot) i++;\n            while (pivot > scores[uint256(j)]) j--;\n            if (i <= j) {\n                (scores[uint256(i)], scores[uint256(j)]) = (scores[uint256(j)], scores[uint256(i)]);\n                (players[uint256(i)], players[uint256(j)]) = (players[uint256(j)], players[uint256(i)]);\n                i++;\n                j--;\n            }\n        }\n        if (left < j) _quickSort(players, scores, left, j);\n        if (i < right) _quickSort(players, scores, i, right);\n    }\n\n    /**\n     * @dev Sorts the players in a game with the provided game ID by score in descending order. `gameId` is the ID of the game.\n     *\n     * Returns:\n     *\n     * - An array of the addresses of the players in the game with `gameId`, sorted by score.\n     * - An array of the scores of the players in the game with `gameId`, sorted in descending order.\n     */\n    function sortByScore(uint256 gameId) internal view returns (address[] memory, uint256[] memory) {\n        (address[] memory players, uint256[] memory scores) = getScores(gameId);\n        _quickSort(players, scores, 0, int256(scores.length - 1));\n        return (players, scores);\n    }\n}\n"
    },
    "src/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\npragma solidity ^0.8.20;\n\ncontract MockERC20 is ERC20Burnable, Ownable {\n    uint256 numTokens;\n\n    constructor(string memory name_, string memory symbol_, address owner) ERC20(name_, symbol_) {\n        require(owner != address(0), \"must specify owner of the contract\");\n        transferOwnership(owner);\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        require(to != address(0), \"MockERC20->mint: Address not specified\");\n        require(amount != 0, \"MockERC20->mint: amount not specified\");\n        _mint(to, amount);\n    }\n}\n"
    },
    "src/modifiers/OnlyOwnerDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\nimport \"../vendor/libraries/LibDiamond.sol\";\n\n// import \"./interfaces/IERC173.sol\";\n\ncontract OnlyOwnerDiamond {\n    modifier onlyOwner() {\n        LibDiamond.enforceIsContractOwner();\n        _;\n    }\n}\n"
    },
    "src/tokens/RankToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IRankToken} from \"../interfaces/IRankToken.sol\";\nimport \"../abstracts/CompositeERC1155.sol\";\nimport \"hardhat/console.sol\";\npragma solidity ^0.8.20;\n\ncontract RankToken is CompositeERC1155, Ownable, IRankToken {\n    string private _contractURI;\n    mapping(address => uint256) public rank;\n    uint256 public topRank;\n    address private _rankingInstance;\n    uint256 _levelUpThreshold;\n\n    modifier onlyRankingInstance() {\n        require(msg.sender == _rankingInstance, \"only ranking contract can do that\");\n        _;\n    }\n\n    constructor(\n        string memory uri_,\n        address owner_,\n        string memory cURI,\n        uint256 levelUpThreshold,\n        address[] memory components,\n        uint256[] memory componentWeights\n    ) CompositeERC1155(uri_, components, componentWeights) {\n        require(owner_ != address(0), \"must specify owner of the contract\");\n        _contractURI = cURI;\n        _levelUpThreshold = levelUpThreshold;\n        transferOwnership(owner_);\n    }\n\n    function getRankingInstance() public view returns (address) {\n        return _rankingInstance;\n    }\n\n    function contractURI() public view returns (string memory) {\n        return _contractURI;\n    }\n\n    function setURI(string memory uri_) public onlyOwner {\n        _setURI(uri_);\n    }\n\n    function setContractURI(string memory uri_) public onlyOwner {\n        _contractURI = uri_;\n    }\n\n    event Leader(address indexed account, uint256 indexed rank);\n\n    function _mintRank(address to, uint256 amount, uint256 level, bytes memory data) private {\n        require(to != address(0), \"RankToken->mint: Address not specified\");\n        require(amount != 0, \"RankToken->mint: amount not specified\");\n        require(level != 0, \"RankToken->mint: pool id not specified\");\n        if (level > topRank) {\n            topRank = level;\n            emit Leader(to, level);\n        }\n        _mint(to, level, amount, data);\n    }\n\n    function mint(address to, uint256 amount, uint256 level, bytes memory data) public onlyRankingInstance {\n        _mintRank(to, amount, level, data);\n    }\n\n    function updateRankingInstance(address newRankingInstance) public onlyOwner {\n        require(newRankingInstance != address(0), \"must specify ranking instance\");\n        _rankingInstance = newRankingInstance;\n        emit RankingInstanceUpdated(newRankingInstance);\n    }\n\n    function lock(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public override(LockableERC1155, ILockableERC1155) onlyRankingInstance {\n        super.lock(account, id, amount);\n    }\n\n    function unlock(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) public override(LockableERC1155, ILockableERC1155) onlyRankingInstance {\n        super.unlock(account, id, amount);\n    }\n\n    function batchMint(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public onlyRankingInstance {\n        require(to != address(0), \"RankToken->mint: Address not specified\");\n        require(amounts.length != 0, \"RankToken->mint: amount not specified\");\n        require(ids.length != 0, \"RankToken->mint: pool id not specified\");\n        _mintBatch(to, ids, amounts, data);\n    }\n\n    function levelUp(address to, uint256 level, bytes memory data) public {\n        require(to == msg.sender || msg.sender == _rankingInstance, \"levelUp: Not permitted\");\n        _burn(to, level, _levelUpThreshold);\n        _mintRank(to, 1, level, data);\n        emit LevelUp(to, level);\n    }\n\n    function findNewRank(address account, uint256 oldRank) public view returns (uint256) {\n        for (uint256 i = oldRank; i > 0; i--) {\n            uint256 _balanceTemp = balanceOf(account, i);\n            if (_balanceTemp > 0) return i;\n        }\n        return 0;\n    }\n\n    event RankUpdated(address indexed account, uint256 indexed rank);\n\n    function _afterTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal override {\n        for (uint256 i = 0; i < ids.length; i++) {\n            if (rank[to] < ids[i] && amounts[i] != 0) {\n                rank[to] = ids[i];\n                emit RankUpdated(to, ids[i]);\n            }\n            if (from != address(0) && (rank[from] != findNewRank(from, rank[from]))) {\n                uint256 newRankFrom = findNewRank(from, rank[from]);\n                rank[from] = newRankFrom;\n                emit RankUpdated(from, newRankFrom);\n            }\n\n            super._afterTokenTransfer(operator, from, to, ids, amounts, data);\n        }\n    }\n\n    //ToDo: Rename in to rankOf(address account)\n    function getAccountRank(address account) external view returns (uint256) {\n        return rank[account];\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC1155) returns (bool) {\n        return interfaceId == type(IRankToken).interfaceId || super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "src/vendor/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/******************************************************************************\\\n*  Adapted from\n*  Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {\n        Add,\n        Replace,\n        Remove\n    }\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\n}\n"
    },
    "src/vendor/libraries/LibDiamond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\n// https://github.com/mudgen/diamond-3-hardhat\n\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\n\nlibrary LibDiamond {\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // owner of the contract\n        address contractOwner;\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        DiamondStorage storage ds = diamondStorage();\n        address previousOwner = ds.contractOwner;\n        ds.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = diamondStorage().contractOwner;\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == diamondStorage().contractOwner, \"LibDiamond: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"LibDiamondCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"LibDiamondCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"LibDiamondCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"LibDiamondCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"LibDiamondCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"LibDiamondCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"LibDiamondCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }\n\n    function addFunction(\n        DiamondStorage storage ds,\n        bytes4 _selector,\n        uint96 _selectorPosition,\n        address _facetAddress\n    ) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\n        require(_facetAddress != address(0), \"LibDiamondCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"LibDiamondCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"LibDiamondCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"LibDiamondCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"LibDiamondCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"LibDiamondCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200000
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}