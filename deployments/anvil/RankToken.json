{
  "address": "0x4Dc6A1437f6797F4A24a1d4f1F44bc45EC6461dB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessLayer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idsLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valuesLength",
          "type": "uint256"
        }
      ],
      "name": "ERC1155InvalidArrayLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidOperator",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC1155InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ERC1155MissingApprovalForAll",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "insufficient",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRankingInstance",
          "type": "address"
        }
      ],
      "name": "RankingInstanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TokensLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TokensUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "accessLayer",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "unlockedBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa7850680694e75394a9b35402b976cb719cb7fb8b7133fb040b911640b22f66b",
  "receipt": {
    "to": null,
    "from": "0x6Cf8d74C7875de8C2FfB09228F4bf2A21b25e583",
    "contractAddress": "0x4Dc6A1437f6797F4A24a1d4f1F44bc45EC6461dB",
    "transactionIndex": 0,
    "gasUsed": "2736385",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000080000000000000000008000800000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x542fe6916b1204eec8aa78d0dddbb12fa9f080d54adeb18b0491044ae4194d71",
    "transactionHash": "0xa7850680694e75394a9b35402b976cb719cb7fb8b7133fb040b911640b22f66b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7134924,
        "transactionHash": "0xa7850680694e75394a9b35402b976cb719cb7fb8b7133fb040b911640b22f66b",
        "address": "0x4Dc6A1437f6797F4A24a1d4f1F44bc45EC6461dB",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 0,
        "blockHash": "0x542fe6916b1204eec8aa78d0dddbb12fa9f080d54adeb18b0491044ae4194d71"
      }
    ],
    "blockNumber": 7134924,
    "cumulativeGasUsed": "2736385",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "https://assets.vote4best.app/rank",
    "https://assets.vote4best.app/musicRankToken.json",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "2b4595510619c748efb40664c0a37a1f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessLayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"insufficient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRankingInstance\",\"type\":\"address\"}],\"name\":\"RankingInstanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TokensUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"accessLayer\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unlockedBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Peersky\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"TransferBatch(address,address,address,uint256[],uint256[])\":{\"details\":\"Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers.\"},\"TransferSingle(address,address,address,uint256,uint256)\":{\"details\":\"Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\"},\"URI(string,uint256)\":{\"details\":\"Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}.\"}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"batchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Mints specified amounts of tokens to an account. `to` is the address of the account to mint the tokens to. `ids` is the array of IDs of the tokens to mint. `amounts` is the array of amounts of tokens to mint. `data` is the additional data.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"unlockedBalanceOf(address,uint256)\":{\"details\":\"Returns the unlocked balance of a specific ERC1155 token for an account. The unlocked balance is calculated by subtracting the locked amount from the total balance.\",\"params\":{\"account\":\"The address of the account.\",\"id\":\"The ID of the ERC1155 token.\"},\"returns\":{\"_0\":\"The unlocked balance of the ERC1155 token for the account.\"}},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"title\":\"RankToken\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"RankToken is a composite ERC1155 token that is used to track user ranks\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/RankToken.sol\":\"RankToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x070826217a19b56724fe97adc7e5daef1d614e45b98ab964bda02b3be01e9870\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/ERC1155Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC1155Upgradeable} from \\\"../ERC1155Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        if (account != _msgSender() && !isApprovedForAll(account, _msgSender())) {\\n            revert ERC1155MissingApprovalForAll(_msgSender(), account);\\n        }\\n\\n        _burnBatch(account, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x235663392e8add928a0bfa535d22c7304eb81703f6c73e755f3145120d47319e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x1528f3ef49ef2750b428564df007feb2d5c7a792bf79c6d125409c96322a4c00\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/abstracts/ERC7746Middleware.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../libraries/LibMiddleware.sol\\\";\\n\\n/**\\n * @title ERC7746Middleware\\n * @notice Abstract contract that serves as a middleware for ERC7746 standard.\\n * This contract is intended to be inherited by other contracts that implement\\n * the ERC7746 functionality. It provides base functionality and structure\\n * that can be extended and customized by derived contracts.\\n * @author Peeramid Labs, 2024\\n */\\nabstract contract ERC7746Middleware {\\n    /**\\n     * @notice Modifier to apply custom logic for ERC7746 compliance.\\n     * @param _selector The function selector to be checked.\\n     * @param sender The address of the sender.\\n     * @param data The calldata being passed to the function.\\n     * @param value The value being transferred.\\n     */\\n    modifier ERC7746C(bytes4 _selector, address sender, bytes calldata data, uint256 value) {\\n        bytes[] memory layerReturns = LibMiddleware.beforeCall(_selector, sender, data, value);\\n        _;\\n        LibMiddleware.afterCall(_selector, sender, data, value, layerReturns);\\n    }\\n\\n    /**\\n     * @notice Modifier to apply ERC7746 specific logic.\\n     * This modifier can be used to enforce certain conditions or\\n     * execute specific code before or after the function it modifies.\\n     */\\n    modifier ERC7746() {\\n        bytes[] memory layerReturns = LibMiddleware.beforeCall(msg.sig, msg.sender, msg.data, msg.value);\\n        _;\\n        LibMiddleware.afterCall(msg.sig, msg.sender, msg.data, msg.value, layerReturns);\\n    }\\n}\\n\",\"keccak256\":\"0xb63c6fa5bdaeeee6cc0a1c014ec941dcd0d995b6a0e857d788c6b121d92fb6c5\",\"license\":\"Apache-2.0\"},\"@peeramid-labs/eds/src/interfaces/IERC7746.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IERC7746 Interface\\n * @dev Interface for the ERC7746 standard.\\n */\\ninterface IERC7746 {\\n    /// @notice Validates a function call before execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @return beforeCallResult Arbitrary data to be passed to `afterCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function beforeCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @notice Validates a function call after execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @param beforeCallResult The data returned by `beforeCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function afterCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data,\\n        bytes memory beforeCallResult\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eb8e8f14581dff37cc01475b0eb63926998b958328aa23e8afe3c0e2c93024a\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/libraries/LibMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\n\\nlibrary LibMiddleware {\\n    bytes32 private constant ACCESS_LAYERS_STORAGE_POSITION = keccak256(\\\"lib.access.layer.storage\\\");\\n\\n    struct LayerStruct {\\n        address layerAddess;\\n        bytes layerConfigData;\\n    }\\n\\n    function accessLayersStorage() internal pure returns (LayerStruct[] storage ls) {\\n        bytes32 position = ACCESS_LAYERS_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function setLayer(address layerAddress, uint256 layerIndex, bytes memory layerConfigData) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls[layerIndex].layerAddess = layerAddress;\\n        ls[layerIndex].layerConfigData = layerConfigData;\\n    }\\n\\n    function addLayer(LayerStruct memory newLayer) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls.push(newLayer);\\n    }\\n\\n    function setLayers(LayerStruct[] memory newLayers) internal {\\n        uint256 length = newLayers.length;\\n        for (uint256 i; i < length; ++i) {\\n            addLayer(newLayers[i]);\\n        }\\n    }\\n\\n    function addLayer(address layerAddress, bytes memory layerConfigData) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        LayerStruct memory newLayer = LayerStruct({layerAddess: layerAddress, layerConfigData: layerConfigData});\\n        ls.push(newLayer);\\n    }\\n\\n    function popLayer() internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls.pop();\\n    }\\n\\n    function getLayer(uint256 layerIdx) internal view returns (LayerStruct storage) {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        return ls[layerIdx];\\n    }\\n\\n    function beforeCall(\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value\\n    ) internal returns (bytes[] memory) {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        uint256 length = ls.length;\\n        bytes[] memory layerReturns = new bytes[](length);\\n        for (uint256 i; i < length; ++i) {\\n            layerReturns[i] = validateLayerBeforeCall(ls[i], _selector, sender, data, value);\\n        }\\n        return layerReturns;\\n    }\\n\\n    function validateLayerBeforeCall(\\n        LayerStruct storage layer,\\n        bytes4 _selector,\\n        address sender,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        bytes memory retval = IERC7746(layer.layerAddess).beforeCall(\\n            layer.layerConfigData,\\n            _selector,\\n            sender,\\n            value,\\n            data\\n        );\\n\\n        return retval;\\n    }\\n\\n    function afterCall(\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value,\\n        bytes[] memory beforeCallReturns\\n    ) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        uint256 length = ls.length;\\n        for (uint256 i; i < length; ++i) {\\n            validateLayerAfterCall(ls[length - 1 - i], _selector, sender, data, value, beforeCallReturns[i]);\\n        }\\n    }\\n\\n    function extractRevertReason(bytes memory revertData) internal pure returns (string memory reason) {\\n        uint256 l = revertData.length;\\n        if (l < 68) return \\\"\\\";\\n        uint256 t;\\n        assembly {\\n            revertData := add(revertData, 4)\\n            t := mload(revertData) // Save the content of the length slot\\n            mstore(revertData, sub(l, 4)) // Set proper length\\n        }\\n        reason = abi.decode(revertData, (string));\\n        assembly {\\n            mstore(revertData, t) // Restore the content of the length slot\\n        }\\n    }\\n\\n    function validateLayerAfterCall(\\n        LayerStruct storage layer,\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value,\\n        bytes memory beforeCallReturnValue\\n    ) internal {\\n        IERC7746(layer.layerAddess).afterCall(\\n            layer.layerConfigData,\\n            _selector,\\n            sender,\\n            value,\\n            data,\\n            beforeCallReturnValue\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1dab29dcf57b1596d1ea89302fd143e46ff6b42edf8b58bf81b0c76eb08a4bfe\",\"license\":\"MIT\"},\"src/abstracts/LockableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport {ILockableERC1155} from \\\"../interfaces/ILockableERC1155.sol\\\";\\n\\n/**\\n * @title LockableERC1155\\n * @dev This is an abstract contract that extends the ERC1155 token contract and implements the ILockableERC1155 interface.\\n *      It provides functionality to lock and unlock token amounts for specific accounts and IDs.\\n */\\nabstract contract LockableERC1155 is ERC1155BurnableUpgradeable, ILockableERC1155 {\\n    struct LockableERC1155Storage {\\n        mapping(address => mapping(uint256 tokenId => uint256)) lockedAmounts;\\n    }\\n\\n    bytes32 constant LOCKABLE_TOKEN_STORAGE_POSITION = keccak256(\\\"erc1155.lockable.storage.position\\\");\\n\\n    function getLockableERC1155Storage() private pure returns (LockableERC1155Storage storage s) {\\n        bytes32 position = LOCKABLE_TOKEN_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks a specified amount of tokens for a given account and token ID.\\n     * If the account does not have enough balance to lock the specified amount,\\n     * the function will revert with an \\\"insufficient\\\" error message.\\n     * Emits a `TokensLocked` event after successfully locking the tokens.\\n     * @param account The address of the account to lock tokens for.\\n     * @param id The ID of the token to lock.\\n     * @param amount The amount of tokens to lock.\\n     */\\n    function lock(address account, uint256 id, uint256 amount) public virtual {\\n        LockableERC1155Storage storage s = getLockableERC1155Storage();\\n        if (balanceOf(account, id) < s.lockedAmounts[account][id] + amount)\\n            revert insufficient(id, s.lockedAmounts[account][id], amount);\\n        s.lockedAmounts[account][id] += amount;\\n        emit TokensLocked(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev Unlocks a specified amount of tokens for a given account and token ID.\\n     * If the locked amount is less than the specified amount, it reverts with an \\\"insufficient\\\" error message.\\n     * Emits a `TokensUnlocked` event after unlocking the tokens.\\n     * @param account The address of the account to unlock tokens for.\\n     * @param id The ID of the token to unlock.\\n     * @param amount The amount of tokens to unlock.\\n     */\\n    function unlock(address account, uint256 id, uint256 amount) public virtual {\\n        LockableERC1155Storage storage s = getLockableERC1155Storage();\\n        if (s.lockedAmounts[account][id] < amount) revert insufficient(id, s.lockedAmounts[account][id], amount);\\n        s.lockedAmounts[account][id] -= amount;\\n        emit TokensUnlocked(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the unlocked balance of a specific ERC1155 token for an account.\\n     * The unlocked balance is calculated by subtracting the locked amount from the total balance.\\n     * @param account The address of the account.\\n     * @param id The ID of the ERC1155 token.\\n     * @return The unlocked balance of the ERC1155 token for the account.\\n     */\\n    function unlockedBalanceOf(address account, uint256 id) public view returns (uint256) {\\n        LockableERC1155Storage storage s = getLockableERC1155Storage();\\n        return balanceOf(account, id) - s.lockedAmounts[account][id];\\n    }\\n\\n    /**\\n     * @dev Hook function that is called before any token transfer.\\n     * It checks if the transfer is allowed based on the locked amounts of the tokens.\\n     * If the transfer is not allowed, it reverts with an error message.\\n     * @param from The address from which the tokens are being transferred.\\n     * @param to The address to which the tokens are being transferred.\\n     * @param ids An array of token IDs being transferred.\\n     * @param values An array of token amounts being transferred.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            if (from != address(0)) {\\n                if (getLockableERC1155Storage().lockedAmounts[from][ids[i]] + values[i] > balanceOf(from, ids[i])) {\\n                    revert insufficient(\\n                        ids[i],\\n                        balanceOf(from, ids[i]),\\n                        getLockableERC1155Storage().lockedAmounts[from][ids[i]] + values[i]\\n                    );\\n                }\\n            }\\n        }\\n        super._update(from, to, ids, values);\\n    }\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public virtual override(ERC1155BurnableUpgradeable, ILockableERC1155) {\\n        if (getLockableERC1155Storage().lockedAmounts[account][id] + value > balanceOf(account, id))\\n            revert insufficient(\\n                id,\\n                balanceOf(account, id),\\n                getLockableERC1155Storage().lockedAmounts[account][id] + value\\n            );\\n        super.burn(account, id, value);\\n    }\\n}\\n\",\"keccak256\":\"0x102288c4079831f2d9e3c5b688f157d9f11585831492aa9cc510d0cbab4c11f8\",\"license\":\"Apache-2.0\"},\"src/interfaces/ILockableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n/**\\n * @title ILockableERC1155\\n * @dev Interface for a lockable ERC1155 token contract.\\n */\\ninterface ILockableERC1155 is IERC1155 {\\n    error insufficient(uint256 id, uint256 balance, uint256 required);\\n\\n    event TokensLocked(address indexed account, uint256 indexed id, uint256 value);\\n\\n    event TokensUnlocked(address indexed account, uint256 indexed id, uint256 value);\\n\\n    /**\\n     * @dev Locks a specified amount of tokens for a given account and token ID. `account` is the address of the account to lock the tokens for. `id` is the ID of the token to lock. `amount` is the amount of tokens to lock.\\n     *\\n     * emits a _TokensLocked_ event.\\n     */\\n    function lock(address account, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Unlocks a specified amount of tokens for a given account and token ID. `account` is the address of the account to unlock the tokens for. `id` is the ID of the token to unlock. `amount` is the amount of tokens to unlock.\\n     *\\n     * emits a _TokensUnlocked_ event.\\n     */\\n    function unlock(address account, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the unlocked balance of tokens for a given account and token ID. `account` is the address of the account to check the unlocked balance for. `id` is the ID of the token to check the unlocked balance for.\\n     *\\n     * Returns:\\n     *\\n     * - The unlocked balance of tokens.\\n     */\\n    function unlockedBalanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function burn(address account, uint256 id, uint256 value) external;\\n}\\n\",\"keccak256\":\"0x3bb17ebca15e79a703e18ef72460ea5c9e463f127b2f28d3936c3c751529c439\",\"license\":\"MIT\"},\"src/interfaces/IRankToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ILockableERC1155} from \\\"./ILockableERC1155.sol\\\";\\n\\ninterface IRankToken is ILockableERC1155 {\\n    event RankingInstanceUpdated(address indexed newRankingInstance);\\n\\n    // event LevelUp(address indexed account, uint256 id);\\n\\n    /**\\n     * @dev Mints a specified amount of tokens to an account. `to` is the address of the account to mint the tokens to. `amount` is the amount of tokens to mint. `poolId` is the ID of the pool. `data` is the additional data.\\n     */\\n    function mint(address to, uint256 amount, uint256 poolId, bytes memory data) external;\\n\\n    /**\\n     * @dev Mints specified amounts of tokens to an account. `to` is the address of the account to mint the tokens to. `ids` is the array of IDs of the tokens to mint. `amounts` is the array of amounts of tokens to mint. `data` is the additional data.\\n     */\\n    function batchMint(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\\n\\n    // /**\\n    //  * @dev Updates the ranking instance. `newRankingInstance` is the address of the new ranking instance.\\n    //  *\\n    //  * emits a _RankingInstanceUpdated_ event.\\n    //  */\\n    // function updateRankingInstance(address newRankingInstance) external;\\n\\n    /**\\n     * @dev Gets the ranking instance which can emit new rank updates and mint rank tokens.\\n     *\\n     * Returns:\\n     *\\n     * - The address of the ranking instance.\\n     */\\n    // function getRankingInstance() external view returns (address);\\n\\n    // /**\\n    //  * @dev Finds the new rank of an account. `account` is the address of the account. `oldRank` is the old rank of the account.\\n    //  * It checks the balance of the account and returns the new rank that can be upgraded to.\\n    //  *\\n    //  * Returns:\\n    //  *\\n    //  * - The new rank of the account.\\n    //  */\\n    // function findNewRank(address account, uint256 oldRank) external view returns (uint256);\\n\\n    // /**\\n    //  * @dev Gets the rank of an account. `account` is the address of the account.\\n    //  *\\n    //  * Returns:\\n    //  *\\n    //  * - The rank of the account.\\n    //  */\\n    // function getAccountRank(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb21a5ffaf22d264802b6615c579e41eff9a331a48b085acedfd935f97733c5c7\",\"license\":\"MIT\"},\"src/tokens/RankToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.28;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IRankToken} from \\\"../interfaces/IRankToken.sol\\\";\\nimport \\\"../abstracts/LockableERC1155.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/abstracts/ERC7746Middleware.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/libraries/LibMiddleware.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n//ToDo: it was planned to make it track for highest token users hold (their rank), right now it's not implemented. Yet.\\n\\n/**\\n * @title RankToken\\n * @author Peersky\\n * @notice RankToken is a composite ERC1155 token that is used to track user ranks\\n */\\ncontract RankToken is LockableERC1155, IRankToken, ERC7746Middleware {\\n    struct Storage {\\n        string _contractURI;\\n    }\\n\\n    bytes32 constant RANK_TOKEN_STORAGE_POSITION = keccak256(\\\"rank.token.storage.position\\\");\\n\\n    function getStorage() private pure returns (Storage storage s) {\\n        bytes32 position = LOCKABLE_TOKEN_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    constructor(string memory uri_, string memory cURI, address accessLayer) {\\n        initialize(uri_, cURI, accessLayer);\\n    }\\n\\n    function initialize(string memory uri_, string memory cURI, address accessLayer) public initializer {\\n        // __Ownable_init(owner_);\\n        _setURI(uri_);\\n        getStorage()._contractURI = cURI;\\n        LibMiddleware.LayerStruct[] memory layers = new LibMiddleware.LayerStruct[](1);\\n\\n        // Set the layer for the sender\\n        layers[0] = LibMiddleware.LayerStruct({layerAddess: accessLayer, layerConfigData: \\\"\\\"});\\n        LibMiddleware.setLayers(layers);\\n    }\\n\\n    // function getRankingInstance() public view returns (address) {\\n    //     return getStorage().rankingInstance;\\n    // }\\n\\n    function contractURI() public view returns (string memory) {\\n        return getStorage()._contractURI;\\n    }\\n\\n    function setURI(string memory uri_) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        _setURI(uri_);\\n    }\\n\\n    function setContractURI(string memory uri_) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        getStorage()._contractURI = uri_;\\n    }\\n\\n    function _mintRank(address to, uint256 amount, uint256 level, bytes memory data) private {\\n        require(to != address(0), \\\"RankToken->mint: Address not specified\\\");\\n        require(amount != 0, \\\"RankToken->mint: amount not specified\\\");\\n        require(level != 0, \\\"RankToken->mint: pool id not specified\\\");\\n        // if (level > topRank) {\\n        //     topRank = level;\\n        //     emit Leader(to, level);\\n        // }\\n        _mint(to, level, amount, data);\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        uint256 level,\\n        bytes memory data\\n    ) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        _mintRank(to, amount, level, data);\\n    }\\n\\n    // function updateRankingInstance(address newRankingInstance) public onlyOwner {\\n    //     require(newRankingInstance != address(0), \\\"must specify ranking instance\\\");\\n    //     getStorage()._rankingInstance = newRankingInstance;\\n    //     emit RankingInstanceUpdated(newRankingInstance);\\n    // }\\n\\n    function lock(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public override(LockableERC1155, ILockableERC1155) ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        super.lock(account, id, amount);\\n    }\\n\\n    function unlock(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public override(LockableERC1155, ILockableERC1155) ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        super.unlock(account, id, amount);\\n    }\\n\\n    function batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        require(to != address(0), \\\"RankToken->mint: Address not specified\\\");\\n        require(amounts.length != 0, \\\"RankToken->mint: amount not specified\\\");\\n        require(ids.length != 0, \\\"RankToken->mint: pool id not specified\\\");\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal override {\\n        super._update(from, to, ids, values);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC1155Upgradeable) returns (bool) {\\n        return interfaceId == type(IRankToken).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 value\\n    ) public override(LockableERC1155, ILockableERC1155) ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        super.burn(account, id, value);\\n    }\\n}\\n\",\"keccak256\":\"0x84d4055fb366cde250ff0f26721b0b29b5d39a094c8e40dd0a2ddca830488df2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516132d23803806132d283398101604081905261002f91610415565b61003a838383610042565b5050506105f5565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff1615906001600160401b031660008115801561008c5750825b90506000826001600160401b031660011480156100a85750303b155b9050811580156100b6575080155b156100d45760405163f92ee8a960e01b815260040160405180910390fd5b84546001600160401b0319166001178555831561010257845460ff60401b1916680100000000000000001785555b61010b8861021d565b7fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af266101368882610521565b50604080516001808252818301909252600091816020015b60408051808201909152600081526060602082015281526020019060019003908161014e5790505090506040518060400160405280886001600160a01b0316815260200160405180602001604052806000815250815250816000815181106101b8576101b86105df565b60209081029190910101526101cc8161026e565b50831561021357845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b7f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45026102698382610521565b505050565b805160005b81811015610269576102a3838281518110610290576102906105df565b60200260200101516102ab60201b60201c565b600101610273565b7f650fcebb359486b662eb1b0aa6a1d52f283f87f1ffcacdfb2b58744a08e075ae8054600181018255600082905282517fda2a52c55025b17bec7d5eef42765efcfebc5e19591a1b3d775cf38f4689f236600290920291820180546001600160a01b0319166001600160a01b03909216919091178155602084015184927fda2a52c55025b17bec7d5eef42765efcfebc5e19591a1b3d775cf38f4689f23701906103559082610521565b5050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261038357600080fd5b81516001600160401b0381111561039c5761039c61035c565b604051601f8201601f19908116603f011681016001600160401b03811182821017156103ca576103ca61035c565b6040528181528382016020018510156103e257600080fd5b60005b82811015610401576020818601810151838301820152016103e5565b506000918101602001919091529392505050565b60008060006060848603121561042a57600080fd5b83516001600160401b0381111561044057600080fd5b61044c86828701610372565b602086015190945090506001600160401b0381111561046a57600080fd5b61047686828701610372565b604086015190935090506001600160a01b038116811461049557600080fd5b809150509250925092565b600181811c908216806104b457607f821691505b6020821081036104d457634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561026957806000526020600020601f840160051c810160208510156105015750805b601f840160051c820191505b81811015610355576000815560010161050d565b81516001600160401b0381111561053a5761053a61035c565b61054e8161054884546104a0565b846104da565b6020601f821160018114610582576000831561056a5750848201515b600019600385901b1c1916600184901b178455610355565b600084815260208120601f198516915b828110156105b25787850151825560209485019460019092019101610592565b50848210156105d05786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b612cce806106046000396000f3fe608060405234801561001057600080fd5b50600436106101505760003560e01c8063731133e9116100cd578063e2ab691d11610081578063e985e9c511610066578063e985e9c5146102b9578063f242432a14610314578063f5298aca1461032757600080fd5b8063e2ab691d1461029e578063e8a3d485146102b157600080fd5b8063a22cb465116100b2578063a22cb46514610265578063b48ab8b614610278578063b5674c681461028b57600080fd5b8063731133e91461023f578063938e3d7b1461025257600080fd5b80630e89341c11610124578063468b3b3311610109578063468b3b33146101f95780634e1273f41461020c5780636b20c4541461022c57600080fd5b80630e89341c146101c65780632eb2c2d6146101e657600080fd5b8062fdd58e1461015557806301ffc9a71461017b57806302fe53051461019e578063077f224a146101b3575b600080fd5b610168610163366004612146565b61033a565b6040519081526020015b60405180910390f35b61018e610189366004612189565b610383565b6040519015158152602001610172565b6101b16101ac366004612275565b6103c1565b005b6101b16101c13660046122aa565b610404565b6101d96101d4366004612323565b61061c565b604051610172919061238c565b6101b16101f436600461242b565b6106f3565b610168610207366004612146565b61079d565b61021f61021a3660046124e1565b6107fc565b60405161017291906125e6565b6101b161023a3660046125f9565b6108e2565b6101b161024d366004612672565b610982565b6101b1610260366004612275565b6109cb565b6101b16102733660046126d3565b610a28565b6101b161028636600461270f565b610a37565b6101b161029936600461279c565b610ba2565b6101b16102ac36600461279c565b610be9565b6101d9610c17565b61018e6102c73660046127cf565b6001600160a01b0391821660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020908152604080832093909416825291909152205460ff1690565b6101b1610322366004612802565b610cc8565b6101b161033536600461279c565b610d65565b60008181527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167fc79b8b5f00000000000000000000000000000000000000000000000000000000148061037d575061037d82610d93565b6000356001600160e01b031916336000366000806103e28686868686610e2e565b90506103ed87610f46565b6103fb868686868686610f92565b50505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff1660008115801561044f5750825b905060008267ffffffffffffffff16600114801561046c5750303b155b90508115801561047a575080155b156104b1576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156104fc57845468ff00000000000000001916680100000000000000001785555b61050588610f46565b7fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2661053088826128dc565b50604080516001808252818301909252600091816020015b6040805180820190915260008152606060208201528152602001906001900390816105485790505090506040518060400160405280886001600160a01b0316815260200160405180602001604052806000815250815250816000815181106105b2576105b261299b565b60200260200101819052506105c681611024565b50831561061257845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b7f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c450280546060917f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45009161066d9061285b565b80601f01602080910402602001604051908101604052809291908181526020018280546106999061285b565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b5050505050915050919050565b336001600160a01b038616811480159061075257506001600160a01b0380871660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4501602090815260408083209385168352929052205460ff16155b156107885760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b610795868686868661105b565b505050505050565b6001600160a01b03821660009081527fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af26602081815260408084208585529091528220546107ea858561033a565b6107f491906129c7565b949350505050565b6060815183511461084657815183516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161077f565b6000835167ffffffffffffffff811115610862576108626121ad565b60405190808252806020026020018201604052801561088b578160200160208202803683370190505b50905060005b84518110156108da576020808202860101516108b59060208084028701015161033a565b8282815181106108c7576108c761299b565b6020908102919091010152600101610891565b509392505050565b6001600160a01b038316331480159061093e57506001600160a01b03831660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020908152604080832033845290915290205460ff16155b1561097257335b60405163711bec9160e11b81526001600160a01b039182166004820152908416602482015260440161077f565b61097d8383836110c2565b505050565b6000356001600160e01b031916336000366000806109a38686868686610e2e565b90506109b18a8a8a8a611108565b6109bf868686868686610f92565b50505050505050505050565b6000356001600160e01b031916336000366000806109ec8686868686610e2e565b90507fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af26610a1988826128dc565b506103fb868686868686610f92565b610a33338383611254565b5050565b6000356001600160e01b03191633600036600080610a588686868686610e2e565b90506001600160a01b038a16610abf5760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a2041646472657373206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b8751600003610b365760405162461bcd60e51b815260206004820152602560248201527f52616e6b546f6b656e2d3e6d696e743a20616d6f756e74206e6f74207370656360448201527f6966696564000000000000000000000000000000000000000000000000000000606482015260840161077f565b8851600003610b965760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a20706f6f6c206964206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b6109b18a8a8a8a611329565b6000356001600160e01b03191633600036600080610bc38686868686610e2e565b9050610bd0898989611361565b610bde868686868686610f92565b505050505050505050565b6000356001600160e01b03191633600036600080610c0a8686868686610e2e565b9050610bd089898961146d565b60607fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af268054610c459061285b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c719061285b565b8015610cbe5780601f10610c9357610100808354040283529160200191610cbe565b820191906000526020600020905b815481529060010190602001808311610ca157829003601f168201915b5050505050905090565b336001600160a01b0386168114801590610d2757506001600160a01b0380871660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4501602090815260408083209385168352929052205460ff16155b15610d585760405163711bec9160e11b81526001600160a01b0380831660048301528716602482015260440161077f565b610795868686868661158d565b6000356001600160e01b03191633600036600080610d868686868686610e2e565b9050610bd0898989611612565b60006001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480610df657506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061037d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461037d565b7f650fcebb359486b662eb1b0aa6a1d52f283f87f1ffcacdfb2b58744a08e075ae80546060919060008167ffffffffffffffff811115610e7057610e706121ad565b604051908082528060200260200182016040528015610ea357816020015b6060815260200190600190039081610e8e5790505b50905060005b82811015610f3957610f14848281548110610ec657610ec661299b565b90600052602060002090600202018b8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92506116fc915050565b828281518110610f2657610f2661299b565b6020908102919091010152600101610ea9565b5098975050505050505050565b7f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c450261097d83826128dc565b7f650fcebb359486b662eb1b0aa6a1d52f283f87f1ffcacdfb2b58744a08e075ae805460005b81811015610bde5761101c8382610fd06001866129c7565b610fda91906129c7565b81548110610fea57610fea61299b565b90600052602060002090600202018a8a8a8a8a8a888151811061100f5761100f61299b565b60200260200101516117a7565b600101610fb8565b805160005b8181101561097d576110538382815181106110465761104661299b565b6020026020010151611839565b600101611029565b6001600160a01b03841661108557604051632bfa23e760e11b81526000600482015260240161077f565b6001600160a01b0385166110ae57604051626a0d4560e21b81526000600482015260240161077f565b6110bb85858585856118fb565b5050505050565b6001600160a01b0383166110eb57604051626a0d4560e21b81526000600482015260240161077f565b61097d8360008484604051806020016040528060008152506118fb565b6001600160a01b03841661116d5760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a2041646472657373206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b826000036111e35760405162461bcd60e51b815260206004820152602560248201527f52616e6b546f6b656e2d3e6d696e743a20616d6f756e74206e6f74207370656360448201527f6966696564000000000000000000000000000000000000000000000000000000606482015260840161077f565b816000036112425760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a20706f6f6c206964206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b61124e8483858461194e565b50505050565b7f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45006001600160a01b0383166112b8576040517fced3e1000000000000000000000000000000000000000000000000000000000081526000600482015260240161077f565b6001600160a01b038481166000818152600184016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a350505050565b6001600160a01b03841661135357604051632bfa23e760e11b81526000600482015260240161077f565b61124e6000858585856118fb565b6001600160a01b03831660009081527fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2660208181526040808420868552909152909120548211156113fa576001600160a01b038416600090815260208281526040808320868452909152908190205490516331303bbb60e01b81526004810185905260248101919091526044810183905260640161077f565b6001600160a01b0384166000908152602082815260408083208684529091528120805484929061142b9084906129c7565b909155505060405182815283906001600160a01b038616907f89882ad382a3742d4db24e4dabc5000c5852aed762904db28442e4e1630a1d079060200161131b565b6001600160a01b03831660009081527fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2660208181526040808420868552909152909120546114bc9083906129da565b6114c6858561033a565b101561151a576001600160a01b038416600090815260208281526040808320868452909152908190205490516331303bbb60e01b81526004810185905260248101919091526044810183905260640161077f565b6001600160a01b0384166000908152602082815260408083208684529091528120805484929061154b9084906129da565b909155505060405182815283906001600160a01b038616907fd741e738a23fd18a03a26522320d9fc6cac1fed483e215ea9150fbc2fc43385d9060200161131b565b6001600160a01b0384166115b757604051632bfa23e760e11b81526000600482015260240161077f565b6001600160a01b0385166115e057604051626a0d4560e21b81526000600482015260240161077f565b604080516001808252602082018690528183019081526060820185905260808201909252906103fb87878484876118fb565b61161c838361033a565b817fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af266001600160a01b038616600090815260209182526040808220878352909252205461166991906129da565b11156116f1578161167a848461033a565b827fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af266001600160a01b03871660009081526020918252604080822088835290925220546116c791906129da565b6040516331303bbb60e01b815260048101939093526024830191909152604482015260640161077f565b61097d8383836119ab565b84546040517f4440d2450000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b0390911690634440d245906117559060018b01908a908a9089908b90600401612a70565b6000604051808303816000875af1158015611774573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179c9190810190612ac6565b979650505050505050565b86546040517fc3e9576a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c3e9576a906117fe9060018b01908a908a9088908b908b908a90600401612b3d565b600060405180830381600087803b15801561181857600080fd5b505af115801561182c573d6000803e3d6000fd5b5050505050505050505050565b7f650fcebb359486b662eb1b0aa6a1d52f283f87f1ffcacdfb2b58744a08e075ae8054600181018255600082905282517fda2a52c55025b17bec7d5eef42765efcfebc5e19591a1b3d775cf38f4689f236600290920291820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091178155602084015184927fda2a52c55025b17bec7d5eef42765efcfebc5e19591a1b3d775cf38f4689f23701906110bb90826128dc565b61190785858585611a1d565b6001600160a01b038416156110bb57825133906001036119405760208481015190840151611939838989858589611a29565b5050610795565b610795818787878787611b7f565b6001600160a01b03841661197857604051632bfa23e760e11b81526000600482015260240161077f565b604080516001808252602082018690528183019081526060820185905260808201909252906107956000878484876118fb565b6001600160a01b0383163314801590611a0757506001600160a01b03831660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020908152604080832033845290915290205460ff16155b15611a125733610945565b61097d838383611c9a565b61124e84848484611d02565b6001600160a01b0384163b15610795576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190611a869089908990889088908890600401612bc2565b6020604051808303816000875af1925050508015611ac1575060408051601f3d908101601f19168201909252611abe91810190612bff565b60015b611b2a573d808015611aef576040519150601f19603f3d011682016040523d82523d6000602084013e611af4565b606091505b508051600003611b2257604051632bfa23e760e11b81526001600160a01b038616600482015260240161077f565b805181602001fd5b6001600160e01b031981167ff23a6e6100000000000000000000000000000000000000000000000000000000146103fb57604051632bfa23e760e11b81526001600160a01b038616600482015260240161077f565b6001600160a01b0384163b15610795576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c8190611bdc9089908990889088908890600401612c1c565b6020604051808303816000875af1925050508015611c17575060408051601f3d908101601f19168201909252611c1491810190612bff565b60015b611c45573d808015611aef576040519150601f19603f3d011682016040523d82523d6000602084013e611af4565b6001600160e01b031981167fbc197c8100000000000000000000000000000000000000000000000000000000146103fb57604051632bfa23e760e11b81526001600160a01b038616600482015260240161077f565b6001600160a01b038316611cc357604051626a0d4560e21b81526000600482015260240161077f565b604080516001808252602082018590528183019081526060820184905260a082019092526000608082018181529192916110bb918791859085906118fb565b60005b8251811015611eb6576001600160a01b03851615611eae57611d4085848381518110611d3357611d3361299b565b602002602001015161033a565b828281518110611d5257611d5261299b565b6020026020010151611d817fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2690565b6000016000886001600160a01b03166001600160a01b031681526020019081526020016000206000868581518110611dbb57611dbb61299b565b6020026020010151815260200190815260200160002054611ddc91906129da565b1115611eae57828181518110611df457611df461299b565b6020026020010151611e1286858481518110611d3357611d3361299b565b838381518110611e2457611e2461299b565b6020026020010151611e537fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2690565b6000016000896001600160a01b03166001600160a01b031681526020019081526020016000206000878681518110611e8d57611e8d61299b565b60200260200101518152602001908152602001600020546116c791906129da565b600101611d05565b5061124e8484848460007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c450090508151835114611f2b57825182516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161077f565b3360005b845181101561204a576020818102868101820151908601909101516001600160a01b03891615611ffb576000828152602086815260408083206001600160a01b038d16845290915290205481811015611fd4576040517f03dee4c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b16600482015260248101829052604481018390526064810184905260840161077f565b6000838152602087815260408083206001600160a01b038e16845290915290209082900390555b6001600160a01b03881615612040576000828152602086815260408083206001600160a01b038c1684529091528120805483929061203a9084906129da565b90915550505b5050600101611f2f565b5083516001036120cb5760208401516000906020850151909150866001600160a01b0316886001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516120bc929190918252602082015260400190565b60405180910390a45050610795565b846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161211a929190612c73565b60405180910390a4505050505050565b80356001600160a01b038116811461214157600080fd5b919050565b6000806040838503121561215957600080fd5b6121628361212a565b946020939093013593505050565b6001600160e01b03198116811461218657600080fd5b50565b60006020828403121561219b57600080fd5b81356121a681612170565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121ec576121ec6121ad565b604052919050565b600067ffffffffffffffff82111561220e5761220e6121ad565b50601f01601f191660200190565b600082601f83011261222d57600080fd5b8135602083016000612246612241846121f4565b6121c3565b905082815285838301111561225a57600080fd5b82826020830137600092810160200192909252509392505050565b60006020828403121561228757600080fd5b813567ffffffffffffffff81111561229e57600080fd5b6107f48482850161221c565b6000806000606084860312156122bf57600080fd5b833567ffffffffffffffff8111156122d657600080fd5b6122e28682870161221c565b935050602084013567ffffffffffffffff8111156122ff57600080fd5b61230b8682870161221c565b92505061231a6040850161212a565b90509250925092565b60006020828403121561233557600080fd5b5035919050565b60005b8381101561235757818101518382015260200161233f565b50506000910152565b6000815180845261237881602086016020860161233c565b601f01601f19169290920160200192915050565b6020815260006121a66020830184612360565b600067ffffffffffffffff8211156123b9576123b96121ad565b5060051b60200190565b600082601f8301126123d457600080fd5b81356123e26122418261239f565b8082825260208201915060208360051b86010192508583111561240457600080fd5b602085015b83811015612421578035835260209283019201612409565b5095945050505050565b600080600080600060a0868803121561244357600080fd5b61244c8661212a565b945061245a6020870161212a565b9350604086013567ffffffffffffffff81111561247657600080fd5b612482888289016123c3565b935050606086013567ffffffffffffffff81111561249f57600080fd5b6124ab888289016123c3565b925050608086013567ffffffffffffffff8111156124c857600080fd5b6124d48882890161221c565b9150509295509295909350565b600080604083850312156124f457600080fd5b823567ffffffffffffffff81111561250b57600080fd5b8301601f8101851361251c57600080fd5b803561252a6122418261239f565b8082825260208201915060208360051b85010192508783111561254c57600080fd5b6020840193505b82841015612575576125648461212a565b825260209384019390910190612553565b9450505050602083013567ffffffffffffffff81111561259457600080fd5b6125a0858286016123c3565b9150509250929050565b600081518084526020840193506020830160005b828110156125dc5781518652602095860195909101906001016125be565b5093949350505050565b6020815260006121a660208301846125aa565b60008060006060848603121561260e57600080fd5b6126178461212a565b9250602084013567ffffffffffffffff81111561263357600080fd5b61263f868287016123c3565b925050604084013567ffffffffffffffff81111561265c57600080fd5b612668868287016123c3565b9150509250925092565b6000806000806080858703121561268857600080fd5b6126918561212a565b93506020850135925060408501359150606085013567ffffffffffffffff8111156126bb57600080fd5b6126c78782880161221c565b91505092959194509250565b600080604083850312156126e657600080fd5b6126ef8361212a565b91506020830135801515811461270457600080fd5b809150509250929050565b6000806000806080858703121561272557600080fd5b61272e8561212a565b9350602085013567ffffffffffffffff81111561274a57600080fd5b612756878288016123c3565b935050604085013567ffffffffffffffff81111561277357600080fd5b61277f878288016123c3565b925050606085013567ffffffffffffffff8111156126bb57600080fd5b6000806000606084860312156127b157600080fd5b6127ba8461212a565b95602085013595506040909401359392505050565b600080604083850312156127e257600080fd5b6127eb8361212a565b91506127f96020840161212a565b90509250929050565b600080600080600060a0868803121561281a57600080fd5b6128238661212a565b94506128316020870161212a565b93506040860135925060608601359150608086013567ffffffffffffffff8111156124c857600080fd5b600181811c9082168061286f57607f821691505b60208210810361288f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561097d57806000526020600020601f840160051c810160208510156128bc5750805b601f840160051c820191505b818110156110bb57600081556001016128c8565b815167ffffffffffffffff8111156128f6576128f66121ad565b61290a81612904845461285b565b84612895565b6020601f82116001811461293e57600083156129265750848201515b600019600385901b1c1916600184901b1784556110bb565b600084815260208120601f198516915b8281101561296e578785015182556020948501946001909201910161294e565b508482101561298c5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561037d5761037d6129b1565b8082018082111561037d5761037d6129b1565b600081546129fa8161285b565b808552600182168015612a145760018114612a3057612a67565b60ff1983166020870152602082151560051b8701019350612a67565b84600052602060002060005b83811015612a5e5781546020828a010152600182019150602081019050612a3c565b87016020019450505b50505092915050565b60a081526000612a8360a08301886129ed565b6001600160e01b0319871660208401526001600160a01b03861660408401528460608401528281036080840152612aba8185612360565b98975050505050505050565b600060208284031215612ad857600080fd5b815167ffffffffffffffff811115612aef57600080fd5b8201601f81018413612b0057600080fd5b8051612b0e612241826121f4565b818152856020838501011115612b2357600080fd5b612b3482602083016020860161233c565b95945050505050565b60c081526000612b5060c083018a6129ed565b6001600160e01b0319891660208401526001600160a01b0388166040840152866060840152828103608084015284815284866020830137600060208683010152601f19601f8601168101905060208382030160a0840152612bb46020820185612360565b9a9950505050505050505050565b6001600160a01b03861681526001600160a01b038516602082015283604082015282606082015260a06080820152600061179c60a0830184612360565b600060208284031215612c1157600080fd5b81516121a681612170565b6001600160a01b03861681526001600160a01b038516602082015260a060408201526000612c4d60a08301866125aa565b8281036060840152612c5f81866125aa565b90508281036080840152612aba8185612360565b604081526000612c8660408301856125aa565b8281036020840152612b3481856125aa56fea2646970667358221220b824e53b69bfea5c351219c797dfc613406e6de23f783296187552c665cd198764736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101505760003560e01c8063731133e9116100cd578063e2ab691d11610081578063e985e9c511610066578063e985e9c5146102b9578063f242432a14610314578063f5298aca1461032757600080fd5b8063e2ab691d1461029e578063e8a3d485146102b157600080fd5b8063a22cb465116100b2578063a22cb46514610265578063b48ab8b614610278578063b5674c681461028b57600080fd5b8063731133e91461023f578063938e3d7b1461025257600080fd5b80630e89341c11610124578063468b3b3311610109578063468b3b33146101f95780634e1273f41461020c5780636b20c4541461022c57600080fd5b80630e89341c146101c65780632eb2c2d6146101e657600080fd5b8062fdd58e1461015557806301ffc9a71461017b57806302fe53051461019e578063077f224a146101b3575b600080fd5b610168610163366004612146565b61033a565b6040519081526020015b60405180910390f35b61018e610189366004612189565b610383565b6040519015158152602001610172565b6101b16101ac366004612275565b6103c1565b005b6101b16101c13660046122aa565b610404565b6101d96101d4366004612323565b61061c565b604051610172919061238c565b6101b16101f436600461242b565b6106f3565b610168610207366004612146565b61079d565b61021f61021a3660046124e1565b6107fc565b60405161017291906125e6565b6101b161023a3660046125f9565b6108e2565b6101b161024d366004612672565b610982565b6101b1610260366004612275565b6109cb565b6101b16102733660046126d3565b610a28565b6101b161028636600461270f565b610a37565b6101b161029936600461279c565b610ba2565b6101b16102ac36600461279c565b610be9565b6101d9610c17565b61018e6102c73660046127cf565b6001600160a01b0391821660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020908152604080832093909416825291909152205460ff1690565b6101b1610322366004612802565b610cc8565b6101b161033536600461279c565b610d65565b60008181527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b031982167fc79b8b5f00000000000000000000000000000000000000000000000000000000148061037d575061037d82610d93565b6000356001600160e01b031916336000366000806103e28686868686610e2e565b90506103ed87610f46565b6103fb868686868686610f92565b50505050505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000810460ff16159067ffffffffffffffff1660008115801561044f5750825b905060008267ffffffffffffffff16600114801561046c5750303b155b90508115801561047a575080155b156104b1576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156104fc57845468ff00000000000000001916680100000000000000001785555b61050588610f46565b7fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2661053088826128dc565b50604080516001808252818301909252600091816020015b6040805180820190915260008152606060208201528152602001906001900390816105485790505090506040518060400160405280886001600160a01b0316815260200160405180602001604052806000815250815250816000815181106105b2576105b261299b565b60200260200101819052506105c681611024565b50831561061257845468ff000000000000000019168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050505050565b7f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c450280546060917f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45009161066d9061285b565b80601f01602080910402602001604051908101604052809291908181526020018280546106999061285b565b80156106e65780601f106106bb576101008083540402835291602001916106e6565b820191906000526020600020905b8154815290600101906020018083116106c957829003601f168201915b5050505050915050919050565b336001600160a01b038616811480159061075257506001600160a01b0380871660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4501602090815260408083209385168352929052205460ff16155b156107885760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b610795868686868661105b565b505050505050565b6001600160a01b03821660009081527fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af26602081815260408084208585529091528220546107ea858561033a565b6107f491906129c7565b949350505050565b6060815183511461084657815183516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161077f565b6000835167ffffffffffffffff811115610862576108626121ad565b60405190808252806020026020018201604052801561088b578160200160208202803683370190505b50905060005b84518110156108da576020808202860101516108b59060208084028701015161033a565b8282815181106108c7576108c761299b565b6020908102919091010152600101610891565b509392505050565b6001600160a01b038316331480159061093e57506001600160a01b03831660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020908152604080832033845290915290205460ff16155b1561097257335b60405163711bec9160e11b81526001600160a01b039182166004820152908416602482015260440161077f565b61097d8383836110c2565b505050565b6000356001600160e01b031916336000366000806109a38686868686610e2e565b90506109b18a8a8a8a611108565b6109bf868686868686610f92565b50505050505050505050565b6000356001600160e01b031916336000366000806109ec8686868686610e2e565b90507fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af26610a1988826128dc565b506103fb868686868686610f92565b610a33338383611254565b5050565b6000356001600160e01b03191633600036600080610a588686868686610e2e565b90506001600160a01b038a16610abf5760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a2041646472657373206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b8751600003610b365760405162461bcd60e51b815260206004820152602560248201527f52616e6b546f6b656e2d3e6d696e743a20616d6f756e74206e6f74207370656360448201527f6966696564000000000000000000000000000000000000000000000000000000606482015260840161077f565b8851600003610b965760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a20706f6f6c206964206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b6109b18a8a8a8a611329565b6000356001600160e01b03191633600036600080610bc38686868686610e2e565b9050610bd0898989611361565b610bde868686868686610f92565b505050505050505050565b6000356001600160e01b03191633600036600080610c0a8686868686610e2e565b9050610bd089898961146d565b60607fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af268054610c459061285b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c719061285b565b8015610cbe5780601f10610c9357610100808354040283529160200191610cbe565b820191906000526020600020905b815481529060010190602001808311610ca157829003601f168201915b5050505050905090565b336001600160a01b0386168114801590610d2757506001600160a01b0380871660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4501602090815260408083209385168352929052205460ff16155b15610d585760405163711bec9160e11b81526001600160a01b0380831660048301528716602482015260440161077f565b610795868686868661158d565b6000356001600160e01b03191633600036600080610d868686868686610e2e565b9050610bd0898989611612565b60006001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480610df657506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b8061037d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b031983161461037d565b7f650fcebb359486b662eb1b0aa6a1d52f283f87f1ffcacdfb2b58744a08e075ae80546060919060008167ffffffffffffffff811115610e7057610e706121ad565b604051908082528060200260200182016040528015610ea357816020015b6060815260200190600190039081610e8e5790505b50905060005b82811015610f3957610f14848281548110610ec657610ec661299b565b90600052602060002090600202018b8b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92506116fc915050565b828281518110610f2657610f2661299b565b6020908102919091010152600101610ea9565b5098975050505050505050565b7f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c450261097d83826128dc565b7f650fcebb359486b662eb1b0aa6a1d52f283f87f1ffcacdfb2b58744a08e075ae805460005b81811015610bde5761101c8382610fd06001866129c7565b610fda91906129c7565b81548110610fea57610fea61299b565b90600052602060002090600202018a8a8a8a8a8a888151811061100f5761100f61299b565b60200260200101516117a7565b600101610fb8565b805160005b8181101561097d576110538382815181106110465761104661299b565b6020026020010151611839565b600101611029565b6001600160a01b03841661108557604051632bfa23e760e11b81526000600482015260240161077f565b6001600160a01b0385166110ae57604051626a0d4560e21b81526000600482015260240161077f565b6110bb85858585856118fb565b5050505050565b6001600160a01b0383166110eb57604051626a0d4560e21b81526000600482015260240161077f565b61097d8360008484604051806020016040528060008152506118fb565b6001600160a01b03841661116d5760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a2041646472657373206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b826000036111e35760405162461bcd60e51b815260206004820152602560248201527f52616e6b546f6b656e2d3e6d696e743a20616d6f756e74206e6f74207370656360448201527f6966696564000000000000000000000000000000000000000000000000000000606482015260840161077f565b816000036112425760405162461bcd60e51b815260206004820152602660248201527f52616e6b546f6b656e2d3e6d696e743a20706f6f6c206964206e6f742073706560448201526518da599a595960d21b606482015260840161077f565b61124e8483858461194e565b50505050565b7f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45006001600160a01b0383166112b8576040517fced3e1000000000000000000000000000000000000000000000000000000000081526000600482015260240161077f565b6001600160a01b038481166000818152600184016020908152604080832094881680845294825291829020805460ff191687151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a350505050565b6001600160a01b03841661135357604051632bfa23e760e11b81526000600482015260240161077f565b61124e6000858585856118fb565b6001600160a01b03831660009081527fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2660208181526040808420868552909152909120548211156113fa576001600160a01b038416600090815260208281526040808320868452909152908190205490516331303bbb60e01b81526004810185905260248101919091526044810183905260640161077f565b6001600160a01b0384166000908152602082815260408083208684529091528120805484929061142b9084906129c7565b909155505060405182815283906001600160a01b038616907f89882ad382a3742d4db24e4dabc5000c5852aed762904db28442e4e1630a1d079060200161131b565b6001600160a01b03831660009081527fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2660208181526040808420868552909152909120546114bc9083906129da565b6114c6858561033a565b101561151a576001600160a01b038416600090815260208281526040808320868452909152908190205490516331303bbb60e01b81526004810185905260248101919091526044810183905260640161077f565b6001600160a01b0384166000908152602082815260408083208684529091528120805484929061154b9084906129da565b909155505060405182815283906001600160a01b038616907fd741e738a23fd18a03a26522320d9fc6cac1fed483e215ea9150fbc2fc43385d9060200161131b565b6001600160a01b0384166115b757604051632bfa23e760e11b81526000600482015260240161077f565b6001600160a01b0385166115e057604051626a0d4560e21b81526000600482015260240161077f565b604080516001808252602082018690528183019081526060820185905260808201909252906103fb87878484876118fb565b61161c838361033a565b817fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af266001600160a01b038616600090815260209182526040808220878352909252205461166991906129da565b11156116f1578161167a848461033a565b827fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af266001600160a01b03871660009081526020918252604080822088835290925220546116c791906129da565b6040516331303bbb60e01b815260048101939093526024830191909152604482015260640161077f565b61097d8383836119ab565b84546040517f4440d2450000000000000000000000000000000000000000000000000000000081526060916000916001600160a01b0390911690634440d245906117559060018b01908a908a9089908b90600401612a70565b6000604051808303816000875af1158015611774573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179c9190810190612ac6565b979650505050505050565b86546040517fc3e9576a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063c3e9576a906117fe9060018b01908a908a9088908b908b908a90600401612b3d565b600060405180830381600087803b15801561181857600080fd5b505af115801561182c573d6000803e3d6000fd5b5050505050505050505050565b7f650fcebb359486b662eb1b0aa6a1d52f283f87f1ffcacdfb2b58744a08e075ae8054600181018255600082905282517fda2a52c55025b17bec7d5eef42765efcfebc5e19591a1b3d775cf38f4689f236600290920291820180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091178155602084015184927fda2a52c55025b17bec7d5eef42765efcfebc5e19591a1b3d775cf38f4689f23701906110bb90826128dc565b61190785858585611a1d565b6001600160a01b038416156110bb57825133906001036119405760208481015190840151611939838989858589611a29565b5050610795565b610795818787878787611b7f565b6001600160a01b03841661197857604051632bfa23e760e11b81526000600482015260240161077f565b604080516001808252602082018690528183019081526060820185905260808201909252906107956000878484876118fb565b6001600160a01b0383163314801590611a0757506001600160a01b03831660009081527f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c45016020908152604080832033845290915290205460ff16155b15611a125733610945565b61097d838383611c9a565b61124e84848484611d02565b6001600160a01b0384163b15610795576040517ff23a6e610000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063f23a6e6190611a869089908990889088908890600401612bc2565b6020604051808303816000875af1925050508015611ac1575060408051601f3d908101601f19168201909252611abe91810190612bff565b60015b611b2a573d808015611aef576040519150601f19603f3d011682016040523d82523d6000602084013e611af4565b606091505b508051600003611b2257604051632bfa23e760e11b81526001600160a01b038616600482015260240161077f565b805181602001fd5b6001600160e01b031981167ff23a6e6100000000000000000000000000000000000000000000000000000000146103fb57604051632bfa23e760e11b81526001600160a01b038616600482015260240161077f565b6001600160a01b0384163b15610795576040517fbc197c810000000000000000000000000000000000000000000000000000000081526001600160a01b0385169063bc197c8190611bdc9089908990889088908890600401612c1c565b6020604051808303816000875af1925050508015611c17575060408051601f3d908101601f19168201909252611c1491810190612bff565b60015b611c45573d808015611aef576040519150601f19603f3d011682016040523d82523d6000602084013e611af4565b6001600160e01b031981167fbc197c8100000000000000000000000000000000000000000000000000000000146103fb57604051632bfa23e760e11b81526001600160a01b038616600482015260240161077f565b6001600160a01b038316611cc357604051626a0d4560e21b81526000600482015260240161077f565b604080516001808252602082018590528183019081526060820184905260a082019092526000608082018181529192916110bb918791859085906118fb565b60005b8251811015611eb6576001600160a01b03851615611eae57611d4085848381518110611d3357611d3361299b565b602002602001015161033a565b828281518110611d5257611d5261299b565b6020026020010151611d817fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2690565b6000016000886001600160a01b03166001600160a01b031681526020019081526020016000206000868581518110611dbb57611dbb61299b565b6020026020010151815260200190815260200160002054611ddc91906129da565b1115611eae57828181518110611df457611df461299b565b6020026020010151611e1286858481518110611d3357611d3361299b565b838381518110611e2457611e2461299b565b6020026020010151611e537fabb1a8240a51bc1a396d93f585b28abbeb62208a7cb4238eab6b9a656a02af2690565b6000016000896001600160a01b03166001600160a01b031681526020019081526020016000206000878681518110611e8d57611e8d61299b565b60200260200101518152602001908152602001600020546116c791906129da565b600101611d05565b5061124e8484848460007f88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c450090508151835114611f2b57825182516040517f5b0599910000000000000000000000000000000000000000000000000000000081526004810192909252602482015260440161077f565b3360005b845181101561204a576020818102868101820151908601909101516001600160a01b03891615611ffb576000828152602086815260408083206001600160a01b038d16845290915290205481811015611fd4576040517f03dee4c50000000000000000000000000000000000000000000000000000000081526001600160a01b038b16600482015260248101829052604481018390526064810184905260840161077f565b6000838152602087815260408083206001600160a01b038e16845290915290209082900390555b6001600160a01b03881615612040576000828152602086815260408083206001600160a01b038c1684529091528120805483929061203a9084906129da565b90915550505b5050600101611f2f565b5083516001036120cb5760208401516000906020850151909150866001600160a01b0316886001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6285856040516120bc929190918252602082015260400190565b60405180910390a45050610795565b846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161211a929190612c73565b60405180910390a4505050505050565b80356001600160a01b038116811461214157600080fd5b919050565b6000806040838503121561215957600080fd5b6121628361212a565b946020939093013593505050565b6001600160e01b03198116811461218657600080fd5b50565b60006020828403121561219b57600080fd5b81356121a681612170565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156121ec576121ec6121ad565b604052919050565b600067ffffffffffffffff82111561220e5761220e6121ad565b50601f01601f191660200190565b600082601f83011261222d57600080fd5b8135602083016000612246612241846121f4565b6121c3565b905082815285838301111561225a57600080fd5b82826020830137600092810160200192909252509392505050565b60006020828403121561228757600080fd5b813567ffffffffffffffff81111561229e57600080fd5b6107f48482850161221c565b6000806000606084860312156122bf57600080fd5b833567ffffffffffffffff8111156122d657600080fd5b6122e28682870161221c565b935050602084013567ffffffffffffffff8111156122ff57600080fd5b61230b8682870161221c565b92505061231a6040850161212a565b90509250925092565b60006020828403121561233557600080fd5b5035919050565b60005b8381101561235757818101518382015260200161233f565b50506000910152565b6000815180845261237881602086016020860161233c565b601f01601f19169290920160200192915050565b6020815260006121a66020830184612360565b600067ffffffffffffffff8211156123b9576123b96121ad565b5060051b60200190565b600082601f8301126123d457600080fd5b81356123e26122418261239f565b8082825260208201915060208360051b86010192508583111561240457600080fd5b602085015b83811015612421578035835260209283019201612409565b5095945050505050565b600080600080600060a0868803121561244357600080fd5b61244c8661212a565b945061245a6020870161212a565b9350604086013567ffffffffffffffff81111561247657600080fd5b612482888289016123c3565b935050606086013567ffffffffffffffff81111561249f57600080fd5b6124ab888289016123c3565b925050608086013567ffffffffffffffff8111156124c857600080fd5b6124d48882890161221c565b9150509295509295909350565b600080604083850312156124f457600080fd5b823567ffffffffffffffff81111561250b57600080fd5b8301601f8101851361251c57600080fd5b803561252a6122418261239f565b8082825260208201915060208360051b85010192508783111561254c57600080fd5b6020840193505b82841015612575576125648461212a565b825260209384019390910190612553565b9450505050602083013567ffffffffffffffff81111561259457600080fd5b6125a0858286016123c3565b9150509250929050565b600081518084526020840193506020830160005b828110156125dc5781518652602095860195909101906001016125be565b5093949350505050565b6020815260006121a660208301846125aa565b60008060006060848603121561260e57600080fd5b6126178461212a565b9250602084013567ffffffffffffffff81111561263357600080fd5b61263f868287016123c3565b925050604084013567ffffffffffffffff81111561265c57600080fd5b612668868287016123c3565b9150509250925092565b6000806000806080858703121561268857600080fd5b6126918561212a565b93506020850135925060408501359150606085013567ffffffffffffffff8111156126bb57600080fd5b6126c78782880161221c565b91505092959194509250565b600080604083850312156126e657600080fd5b6126ef8361212a565b91506020830135801515811461270457600080fd5b809150509250929050565b6000806000806080858703121561272557600080fd5b61272e8561212a565b9350602085013567ffffffffffffffff81111561274a57600080fd5b612756878288016123c3565b935050604085013567ffffffffffffffff81111561277357600080fd5b61277f878288016123c3565b925050606085013567ffffffffffffffff8111156126bb57600080fd5b6000806000606084860312156127b157600080fd5b6127ba8461212a565b95602085013595506040909401359392505050565b600080604083850312156127e257600080fd5b6127eb8361212a565b91506127f96020840161212a565b90509250929050565b600080600080600060a0868803121561281a57600080fd5b6128238661212a565b94506128316020870161212a565b93506040860135925060608601359150608086013567ffffffffffffffff8111156124c857600080fd5b600181811c9082168061286f57607f821691505b60208210810361288f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561097d57806000526020600020601f840160051c810160208510156128bc5750805b601f840160051c820191505b818110156110bb57600081556001016128c8565b815167ffffffffffffffff8111156128f6576128f66121ad565b61290a81612904845461285b565b84612895565b6020601f82116001811461293e57600083156129265750848201515b600019600385901b1c1916600184901b1784556110bb565b600084815260208120601f198516915b8281101561296e578785015182556020948501946001909201910161294e565b508482101561298c5786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561037d5761037d6129b1565b8082018082111561037d5761037d6129b1565b600081546129fa8161285b565b808552600182168015612a145760018114612a3057612a67565b60ff1983166020870152602082151560051b8701019350612a67565b84600052602060002060005b83811015612a5e5781546020828a010152600182019150602081019050612a3c565b87016020019450505b50505092915050565b60a081526000612a8360a08301886129ed565b6001600160e01b0319871660208401526001600160a01b03861660408401528460608401528281036080840152612aba8185612360565b98975050505050505050565b600060208284031215612ad857600080fd5b815167ffffffffffffffff811115612aef57600080fd5b8201601f81018413612b0057600080fd5b8051612b0e612241826121f4565b818152856020838501011115612b2357600080fd5b612b3482602083016020860161233c565b95945050505050565b60c081526000612b5060c083018a6129ed565b6001600160e01b0319891660208401526001600160a01b0388166040840152866060840152828103608084015284815284866020830137600060208683010152601f19601f8601168101905060208382030160a0840152612bb46020820185612360565b9a9950505050505050505050565b6001600160a01b03861681526001600160a01b038516602082015283604082015282606082015260a06080820152600061179c60a0830184612360565b600060208284031215612c1157600080fd5b81516121a681612170565b6001600160a01b03861681526001600160a01b038516602082015260a060408201526000612c4d60a08301866125aa565b8281036060840152612c5f81866125aa565b90508281036080840152612aba8185612360565b604081526000612c8660408301856125aa565b8281036020840152612b3481856125aa56fea2646970667358221220b824e53b69bfea5c351219c797dfc613406e6de23f783296187552c665cd198764736f6c634300081c0033",
  "devdoc": {
    "author": "Peersky",
    "errors": {
      "ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred.",
            "tokenId": "Identifier number of a token."
          }
        }
      ],
      "ERC1155InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC1155InvalidArrayLength(uint256,uint256)": [
        {
          "details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
          "params": {
            "idsLength": "Length of the array of token identifiers",
            "valuesLength": "Length of the array of token amounts"
          }
        }
      ],
      "ERC1155InvalidOperator(address)": [
        {
          "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC1155InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC1155InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC1155MissingApprovalForAll(address,address)": [
        {
          "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
          "params": {
            "operator": "Address that may be allowed to operate on tokens without being their owner.",
            "owner": "Address of the current owner of a token."
          }
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ]
    },
    "events": {
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to `approved`."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "TransferBatch(address,address,address,uint256[],uint256[])": {
        "details": "Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all transfers."
      },
      "TransferSingle(address,address,address,uint256,uint256)": {
        "details": "Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`."
      },
      "URI(string,uint256)": {
        "details": "Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI. If an {URI} event was emitted for `id`, the standard https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value returned by {IERC1155MetadataURI-uri}."
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "batchMint(address,uint256[],uint256[],bytes)": {
        "details": "Mints specified amounts of tokens to an account. `to` is the address of the account to mint the tokens to. `ids` is the array of IDs of the tokens to mint. `amounts` is the array of amounts of tokens to mint. `data` is the additional data."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "unlockedBalanceOf(address,uint256)": {
        "details": "Returns the unlocked balance of a specific ERC1155 token for an account. The unlocked balance is calculated by subtracting the locked amount from the total balance.",
        "params": {
          "account": "The address of the account.",
          "id": "The ID of the ERC1155 token."
        },
        "returns": {
          "_0": "The unlocked balance of the ERC1155 token for the account."
        }
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "title": "RankToken",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "RankToken is a composite ERC1155 token that is used to track user ranks",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}