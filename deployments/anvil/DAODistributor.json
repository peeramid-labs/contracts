{
  "address": "0x15215a4D9F95f5fd777035a70930c436dE10E01d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "defaultCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "schedule",
          "type": "uint48"
        }
      ],
      "name": "AccessControlEnforcedDefaultAdminDelay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AccessControlEnforcedDefaultAdminRules",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        }
      ],
      "name": "AccessControlInvalidDefaultAdmin",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "DistributionExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "DistributionNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "InitializerNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "InvalidInstance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "repository",
          "type": "address"
        }
      ],
      "name": "InvalidRepository",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "distributionId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "name": "InvalidVersionRequested",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "repository",
          "type": "address"
        }
      ],
      "name": "RepositoryAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "distributionId",
          "type": "bytes32"
        }
      ],
      "name": "UnversionedDistribution",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "distributionId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        }
      ],
      "name": "VersionOutdated",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DefaultAdminDelayChangeCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "newDelay",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "effectSchedule",
          "type": "uint48"
        }
      ],
      "name": "DefaultAdminDelayChangeScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DefaultAdminTransferCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "acceptSchedule",
          "type": "uint48"
        }
      ],
      "name": "DefaultAdminTransferScheduled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "distribution",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "DistributionAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "DistributionRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "distributionId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newInstanceId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "instances",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "Instantiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "InstantiationCostChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "distributionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "major",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "minor",
                  "type": "uint64"
                },
                {
                  "internalType": "uint128",
                  "name": "patch",
                  "type": "uint128"
                }
              ],
              "internalType": "struct LibSemver.Version",
              "name": "version",
              "type": "tuple"
            },
            {
              "internalType": "enum LibSemver.requirements",
              "name": "requirement",
              "type": "uint8"
            }
          ],
          "indexed": true,
          "internalType": "struct LibSemver.VersionRequirement",
          "name": "newRequirement",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "major",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "minor",
                  "type": "uint64"
                },
                {
                  "internalType": "uint128",
                  "name": "patch",
                  "type": "uint128"
                }
              ],
              "internalType": "struct LibSemver.Version",
              "name": "version",
              "type": "tuple"
            },
            {
              "internalType": "enum LibSemver.requirements",
              "name": "requirement",
              "type": "uint8"
            }
          ],
          "indexed": false,
          "internalType": "struct LibSemver.VersionRequirement",
          "name": "newRequirementData",
          "type": "tuple"
        }
      ],
      "name": "VersionChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptDefaultAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRepository",
          "name": "repository",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "major",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "minor",
                  "type": "uint64"
                },
                {
                  "internalType": "uint128",
                  "name": "patch",
                  "type": "uint128"
                }
              ],
              "internalType": "struct LibSemver.Version",
              "name": "version",
              "type": "tuple"
            },
            {
              "internalType": "enum LibSemver.requirements",
              "name": "requirement",
              "type": "uint8"
            }
          ],
          "internalType": "struct LibSemver.VersionRequirement",
          "name": "requirement",
          "type": "tuple"
        }
      ],
      "name": "addDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "addDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "config",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "maybeInstance",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "afterCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "config",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        },
        {
          "internalType": "address",
          "name": "maybeInstance",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "beforeCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "beginDefaultAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sourceId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "calculateDistributorId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "repository",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "name": "calculateDistributorId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelDefaultAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint48",
          "name": "newDelay",
          "type": "uint48"
        }
      ],
      "name": "changeDefaultAdminDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "distributionId",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "major",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "minor",
                  "type": "uint64"
                },
                {
                  "internalType": "uint128",
                  "name": "patch",
                  "type": "uint128"
                }
              ],
              "internalType": "struct LibSemver.Version",
              "name": "version",
              "type": "tuple"
            },
            {
              "internalType": "enum LibSemver.requirements",
              "name": "requirement",
              "type": "uint8"
            }
          ],
          "internalType": "struct LibSemver.VersionRequirement",
          "name": "newRequirement",
          "type": "tuple"
        }
      ],
      "name": "changeVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAdminDelay",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultAdminDelayIncreaseWait",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultInstantiationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "distributorsId",
          "type": "bytes32"
        }
      ],
      "name": "distributionComponents",
      "outputs": [
        {
          "internalType": "address",
          "name": "distributionLocation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "initializer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "instance",
          "type": "uint256"
        }
      ],
      "name": "distributionOf",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "distributorsId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "getDistributionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "distributorsId",
          "type": "bytes32"
        }
      ],
      "name": "getDistributionURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributions",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "getInstanceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "instanceId",
          "type": "uint256"
        }
      ],
      "name": "instanceVersions",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "major",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "minor",
          "type": "uint64"
        },
        {
          "internalType": "uint128",
          "name": "patch",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "args",
          "type": "bytes"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "srcs",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "name",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "version",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "instantiationCosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numInstances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingDefaultAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "internalType": "uint48",
          "name": "schedule",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingDefaultAdminDelay",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "newDelay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "schedule",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "removeDistribution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rollbackDefaultAdminDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "name": "setInstantiationCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "distributorsId",
          "type": "bytes32"
        }
      ],
      "name": "versionRequirements",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "major",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minor",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "patch",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibSemver.Version",
          "name": "version",
          "type": "tuple"
        },
        {
          "internalType": "enum LibSemver.requirements",
          "name": "requirement",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e4a4ab23993d5eec9d443066b1b7dac4aceb2962c0928ed5f5faabe6220416d",
  "receipt": {
    "to": null,
    "from": "0x6Cf8d74C7875de8C2FfB09228F4bf2A21b25e583",
    "contractAddress": "0x15215a4D9F95f5fd777035a70930c436dE10E01d",
    "transactionIndex": 0,
    "gasUsed": "3643718",
    "logsBloom": "0x
    "blockHash": "0x5eeee0d4a6b483accc163fd1a4b295aaa0ac62f172e8953da4a53909cec4ff01",
    "transactionHash": "0x9e4a4ab23993d5eec9d443066b1b7dac4aceb2962c0928ed5f5faabe6220416d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7134195,
        "transactionHash": "0x9e4a4ab23993d5eec9d443066b1b7dac4aceb2962c0928ed5f5faabe6220416d",
        "address": "0x15215a4D9F95f5fd777035a70930c436dE10E01d",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000507c2d32185667156de5b4c440feef3800078bdb",
          "0x0000000000000000000000006cf8d74c7875de8c2ffb09228f4bf2a21b25e583"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5eeee0d4a6b483accc163fd1a4b295aaa0ac62f172e8953da4a53909cec4ff01"
      }
    ],
    "blockNumber": 7134195,
    "cumulativeGasUsed": "3643718",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x507c2d32185667156de5B4C440FEEf3800078bDb",
    "0x4D03e0A776Dff6c210BE0E816F59cC82EEf20Def",
    "1000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "47d55bac03dce70d666aae0a21c6b0ed",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"name\":\"AccessControlEnforcedDefaultAdminDelay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AccessControlEnforcedDefaultAdminRules\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"}],\"name\":\"AccessControlInvalidDefaultAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DistributionExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DistributionNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"InitializerNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"InvalidInstance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repository\",\"type\":\"address\"}],\"name\":\"InvalidRepository\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"InvalidVersionRequested\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repository\",\"type\":\"address\"}],\"name\":\"RepositoryAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributionId\",\"type\":\"bytes32\"}],\"name\":\"UnversionedDistribution\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"name\":\"VersionOutdated\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultAdminDelayChangeCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"effectSchedule\",\"type\":\"uint48\"}],\"name\":\"DefaultAdminDelayChangeScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DefaultAdminTransferCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"acceptSchedule\",\"type\":\"uint48\"}],\"name\":\"DefaultAdminTransferScheduled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distribution\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"DistributionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"DistributionRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"distributionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newInstanceId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"instances\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"Instantiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"InstantiationCostChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"distributionId\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"patch\",\"type\":\"uint128\"}],\"internalType\":\"struct LibSemver.Version\",\"name\":\"version\",\"type\":\"tuple\"},{\"internalType\":\"enum LibSemver.requirements\",\"name\":\"requirement\",\"type\":\"uint8\"}],\"indexed\":true,\"internalType\":\"struct LibSemver.VersionRequirement\",\"name\":\"newRequirement\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"patch\",\"type\":\"uint128\"}],\"internalType\":\"struct LibSemver.Version\",\"name\":\"version\",\"type\":\"tuple\"},{\"internalType\":\"enum LibSemver.requirements\",\"name\":\"requirement\",\"type\":\"uint8\"}],\"indexed\":false,\"internalType\":\"struct LibSemver.VersionRequirement\",\"name\":\"newRequirementData\",\"type\":\"tuple\"}],\"name\":\"VersionChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRepository\",\"name\":\"repository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"patch\",\"type\":\"uint128\"}],\"internalType\":\"struct LibSemver.Version\",\"name\":\"version\",\"type\":\"tuple\"},{\"internalType\":\"enum LibSemver.requirements\",\"name\":\"requirement\",\"type\":\"uint8\"}],\"internalType\":\"struct LibSemver.VersionRequirement\",\"name\":\"requirement\",\"type\":\"tuple\"}],\"name\":\"addDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"addDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"maybeInstance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"afterCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"config\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"maybeInstance\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"beforeCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"beginDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"calculateDistributorId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"repository\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"name\":\"calculateDistributorId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelDefaultAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"}],\"name\":\"changeDefaultAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributionId\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"patch\",\"type\":\"uint128\"}],\"internalType\":\"struct LibSemver.Version\",\"name\":\"version\",\"type\":\"tuple\"},{\"internalType\":\"enum LibSemver.requirements\",\"name\":\"requirement\",\"type\":\"uint8\"}],\"internalType\":\"struct LibSemver.VersionRequirement\",\"name\":\"newRequirement\",\"type\":\"tuple\"}],\"name\":\"changeVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdminDelay\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultAdminDelayIncreaseWait\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultInstantiationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributorsId\",\"type\":\"bytes32\"}],\"name\":\"distributionComponents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"distributionLocation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initializer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instance\",\"type\":\"uint256\"}],\"name\":\"distributionOf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributorsId\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"getDistributionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributorsId\",\"type\":\"bytes32\"}],\"name\":\"getDistributionURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributions\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"getInstanceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"instanceId\",\"type\":\"uint256\"}],\"name\":\"instanceVersions\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"patch\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"srcs\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"name\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"version\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"instantiationCosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numInstances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDefaultAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingDefaultAdminDelay\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"newDelay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"schedule\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"removeDistribution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rollbackDefaultAdminDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"name\":\"setInstantiationCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"distributorsId\",\"type\":\"bytes32\"}],\"name\":\"versionRequirements\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"patch\",\"type\":\"uint128\"}],\"internalType\":\"struct LibSemver.Version\",\"name\":\"version\",\"type\":\"tuple\"},{\"internalType\":\"enum LibSemver.requirements\",\"name\":\"requirement\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Peeramid Labs, 2024\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlEnforcedDefaultAdminDelay(uint48)\":[{\"details\":\"The delay for transferring the default admin delay is enforced and the operation must wait until `schedule`. NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\"}],\"AccessControlEnforcedDefaultAdminRules()\":[{\"details\":\"At least one of the following rules was violated: - The `DEFAULT_ADMIN_ROLE` must only be managed by itself. - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time. - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\"}],\"AccessControlInvalidDefaultAdmin(address)\":[{\"details\":\"The new default admin is not a valid default admin.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"DistributionExists(bytes32)\":[{\"params\":{\"id\":\"The unique identifier of the distribution that already exists.\"}}],\"DistributionNotFound(bytes32)\":[{\"params\":{\"id\":\"The unique identifier of the distribution that was not found.\"}}],\"InitializerNotFound(bytes32)\":[{\"params\":{\"id\":\"The unique identifier of the distribution that was not found.\"}}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}]},\"events\":{\"DefaultAdminDelayChangeCanceled()\":{\"details\":\"Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\"},\"DefaultAdminDelayChangeScheduled(uint48,uint48)\":{\"details\":\"Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next delay to be applied between default admin transfer after `effectSchedule` has passed.\"},\"DefaultAdminTransferCanceled()\":{\"details\":\"Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\"},\"DefaultAdminTransferScheduled(address,uint48)\":{\"details\":\"Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule` passes.\"},\"DistributionAdded(bytes32,address,address)\":{\"details\":\"It MUST emit when {IDistributor.addDistribution} is called.\",\"params\":{\"distribution\":\"The address of the distribution that was added.\",\"id\":\"The unique identifier of the distribution that was added.\",\"initializer\":\"The address of the initializer for the distribution.\"}},\"DistributionRemoved(bytes32)\":{\"details\":\"It MUST emit when {IDistributor.removeDistribution} is called.\",\"params\":{\"id\":\"The unique identifier of the distribution that was removed.\"}},\"Instantiated(bytes32,uint256,uint256,address[],bytes)\":{\"details\":\"It MUST emit when {IDistributor.instantiate} is called.\",\"params\":{\"args\":\"The arguments that were used for instantiation.\",\"distributionId\":\"The unique identifier of the distribution.\",\"instances\":\"The addresses of the instances that were created.\",\"newInstanceId\":\"The unique identifier of the instance.\",\"version\":\"The version of the distribution, taken either from IDistribution or from IRepository.\"}},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"VersionChanged(bytes32,((uint64,uint64,uint128),uint8),((uint64,uint64,uint128),uint8))\":{\"params\":{\"distributionId\":\"The unique identifier of the distribution.\",\"newRequirement\":\"The new version requirement (hashed for indexing).\",\"newRequirementData\":\"The new version requirement data.\"}}},\"kind\":\"dev\",\"methods\":{\"acceptDefaultAdminTransfer()\":{\"details\":\"Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. After calling the function: - `DEFAULT_ADMIN_ROLE` should be granted to the caller. - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder. - {pendingDefaultAdmin} should be reset to zero values. Requirements: - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`. - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\"},\"addDistribution(address,address,((uint64,uint64,uint128),uint8))\":{\"details\":\"WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.\",\"params\":{\"initializer\":\"The address that initializes the distribution.\",\"repository\":\"The repository to which the distribution will be added.\",\"requirement\":\"The version requirements for the distribution.\"}},\"addDistribution(bytes32,address)\":{\"details\":\"This function can only be called by an account with the `DEFAULT_ADMIN_ROLE`.\",\"params\":{\"id\":\"The unique identifier for the distribution.\",\"initializer\":\"The address that initializes the distribution.\"}},\"afterCall(bytes,bytes4,address,uint256,bytes,bytes)\":{\"details\":\"it will revert if: (1) `msg.sender` is not a valid instance; (2) `maybeInstance` is not a valid instance (3) `instanceId` belongs to disactivated distribution\",\"params\":{\"beforeCallResult\":\"The data returned by `beforeCallValidation`.\",\"configuration\":\"Middleware-specific configuration data.\",\"data\":\"The calldata for the function call.\",\"selector\":\"The function selector being called.\",\"sender\":\"The address initiating the call.\",\"value\":\"The amount of ETH sent with the call (if any).\"}},\"beforeCall(bytes,bytes4,address,uint256,bytes)\":{\"details\":\"it will revert if: (1) `msg.sender` is not a valid instance; (2) `maybeInstance` is not a valid instance (3) `instanceId` belongs to disactivated distribution\",\"params\":{\"configuration\":\"Middleware-specific configuration data.\",\"data\":\"The calldata for the function call.\",\"selector\":\"The function selector being called.\",\"sender\":\"The address initiating the call.\",\"value\":\"The amount of ETH sent with the call (if any).\"},\"returns\":{\"_0\":\"beforeCallResult Arbitrary data to be passed to `afterCallValidation`.\"}},\"beginDefaultAdminTransfer(address)\":{\"details\":\"Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance after the current timestamp plus a {defaultAdminDelay}. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminRoleChangeStarted event.\"},\"cancelDefaultAdminTransfer()\":{\"details\":\"Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminTransferCanceled event.\"},\"changeDefaultAdminDelay(uint48)\":{\"details\":\"Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting into effect after the current timestamp plus a {defaultAdminDelay}. This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay} set before calling. The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin} complete transfer (including acceptance). The schedule is designed for two scenarios: - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by {defaultAdminDelayIncreaseWait}. - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`. A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\"},\"changeVersion(bytes32,((uint64,uint64,uint128),uint8))\":{\"params\":{\"distributionId\":\"The unique identifier of the distribution whose version requirement is to be changed.\",\"newRequirement\":\"The new version requirement to be set for the distribution.\"}},\"defaultAdmin()\":{\"details\":\"Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\"},\"defaultAdminDelay()\":{\"details\":\"Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started. This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set the acceptance schedule. NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this function returns the new delay. See {changeDefaultAdminDelay}.\"},\"defaultAdminDelayIncreaseWait()\":{\"details\":\"Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay}) to take effect. Default to 5 days. When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds) that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can be overrode for a custom {defaultAdminDelay} increase scheduling. IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise, there's a risk of setting a high new delay that goes into effect almost immediately without the possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\"},\"getDistributionId(address)\":{\"params\":{\"instance\":\"The address of the instance for which the distribution ID is being requested.\"},\"returns\":{\"_0\":\"The distribution ID as a bytes32 value.\"}},\"getDistributions()\":{\"returns\":{\"_0\":\"An array of unique identifiers of all distributions.\"}},\"getInstanceId(address)\":{\"params\":{\"instance\":\"The address of the instance whose ID is to be retrieved.\"},\"returns\":{\"_0\":\"The unique identifier (uint256) associated with the specified instance address.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"instantiate(bytes32,bytes)\":{\"params\":{\"args\":\"The calldata arguments required for the instantiation process.\",\"id\":\"The unique identifier for the contract to be instantiated.\"},\"returns\":{\"name\":\"The name of the instantiated distribution.\",\"srcs\":\"An array of instantiated infrastructure\",\"version\":\"The version number of the instantiated distribution.\"}},\"owner()\":{\"details\":\"See {IERC5313-owner}.\"},\"pendingDefaultAdmin()\":{\"details\":\"Returns a tuple of a `newAdmin` and an accept schedule. After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role by calling {acceptDefaultAdminTransfer}, completing the role transfer. A zero value only in `acceptSchedule` indicates no pending admin transfer. NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\"},\"pendingDefaultAdminDelay()\":{\"details\":\"Returns a tuple of `newDelay` and an effect schedule. After the `schedule` passes, the `newDelay` will get into effect immediately for every new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}. A zero value only in `effectSchedule` indicates no pending delay change. NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay} will be zero after the effect schedule.\"},\"removeDistribution(bytes32)\":{\"details\":\"This function can only be called by an account with the `DEFAULT_ADMIN_ROLE`.\",\"params\":{\"id\":\"The unique identifier of the distribution entry to be removed.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"See {AccessControl-renounceRole}. For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule has also passed when calling this function. After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions. NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin}, thereby disabling any functionality that is only available for it, and the possibility of reassigning a non-administrated role.\"},\"revokeRole(bytes32,address)\":{\"details\":\"See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\"},\"rollbackDefaultAdminDelay()\":{\"details\":\"Cancels a scheduled {defaultAdminDelay} change. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminDelayChangeCanceled event.\"},\"setInstantiationCost(bytes32,uint256)\":{\"params\":{\"cost\":\"cost of instantiation\",\"id\":\"distributors id\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165.\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and `interfaceId` is not 0xffffffff, `false` otherwise.\"}}},\"title\":\"DAODistributor\",\"version\":1},\"userdoc\":{\"errors\":{\"DistributionExists(bytes32)\":[{\"notice\":\"Error indicating that a distribution with the specified ID already exists.\"}],\"DistributionNotFound(bytes32)\":[{\"notice\":\"Error indicating that the distribution with the specified ID was not found.\"}],\"InitializerNotFound(bytes32)\":[{\"notice\":\"Error indicating that the initializer for the distribution was not found.\"}]},\"events\":{\"DistributionAdded(bytes32,address,address)\":{\"notice\":\"Event emitted when a distribution is added.\"},\"DistributionRemoved(bytes32)\":{\"notice\":\"Event emitted when a distribution is removed.\"},\"Instantiated(bytes32,uint256,uint256,address[],bytes)\":{\"notice\":\"Event emitted when a new distribution is instantiated.\"},\"VersionChanged(bytes32,((uint64,uint64,uint128),uint8),((uint64,uint64,uint128),uint8))\":{\"notice\":\"Emitted when the version of the distributor is changed.\"}},\"kind\":\"user\",\"methods\":{\"addDistribution(address,address,((uint64,uint64,uint128),uint8))\":{\"notice\":\"Adds a new versioned distribution to the repository.\"},\"addDistribution(bytes32,address)\":{\"notice\":\"Adds a new distribution with the given identifier and initializer address.\"},\"afterCall(bytes,bytes4,address,uint256,bytes,bytes)\":{\"notice\":\"This is ERC7746 hook must be called by instance methods that access scope is limited to the same instance or distribution\"},\"beforeCall(bytes,bytes4,address,uint256,bytes)\":{\"notice\":\"This is ERC7746 hook must be called by instance methods that access scope is limited to the same instance or distribution\"},\"changeVersion(bytes32,((uint64,uint64,uint128),uint8))\":{\"notice\":\"Changes the version requirement for a specific distribution.\"},\"getDistributionId(address)\":{\"notice\":\"Retrieves the distribution ID associated with a given instance address.\"},\"getDistributions()\":{\"notice\":\"Retrieves the unique identifiers of all distributions.\"},\"getInstanceId(address)\":{\"notice\":\"Retrieves the unique identifier for a given instance address.\"},\"instantiate(bytes32,bytes)\":{\"notice\":\"Instantiates a new contract with the given identifier and arguments.\"},\"removeDistribution(bytes32)\":{\"notice\":\"Removes a distribution entry identified by the given ID.\"},\"setInstantiationCost(bytes32,uint256)\":{\"notice\":\"Sets instantiation cost on a specific instantiation id\"},\"supportsInterface(bytes4)\":{\"notice\":\"This function checks if the contract implements the interface defined by ERC165\"}},\"notice\":\"This contract is a distributor for Peeramid Labs. It is designed to handle the distribution logic specific to Peeramid Labs. The contract leverages access control mechanisms to ensure that only authorized users can perform certain actions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/distributors/DAODistributor.sol\":\"DAODistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa0e92d42942f4f57c5be50568dac11e9d00c93efcb458026e18d2d9b9b2e7308\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/AccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlDefaultAdminRules} from \\\"./IAccessControlDefaultAdminRules.sol\\\";\\nimport {AccessControl, IAccessControl} from \\\"../AccessControl.sol\\\";\\nimport {SafeCast} from \\\"../../utils/math/SafeCast.sol\\\";\\nimport {Math} from \\\"../../utils/math/Math.sol\\\";\\nimport {IERC5313} from \\\"../../interfaces/IERC5313.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows specifying special rules to manage\\n * the `DEFAULT_ADMIN_ROLE` holder, which is a sensitive role with special permissions\\n * over other roles that may potentially have privileged rights in the system.\\n *\\n * If a specific role doesn't have an admin role assigned, the holder of the\\n * `DEFAULT_ADMIN_ROLE` will have the ability to grant it and revoke it.\\n *\\n * This contract implements the following risk mitigations on top of {AccessControl}:\\n *\\n * * Only one account holds the `DEFAULT_ADMIN_ROLE` since deployment until it's potentially renounced.\\n * * Enforces a 2-step process to transfer the `DEFAULT_ADMIN_ROLE` to another account.\\n * * Enforces a configurable delay between the two steps, with the ability to cancel before the transfer is accepted.\\n * * The delay can be changed by scheduling, see {changeDefaultAdminDelay}.\\n * * It is not possible to use another role to manage the `DEFAULT_ADMIN_ROLE`.\\n *\\n * Example usage:\\n *\\n * ```solidity\\n * contract MyToken is AccessControlDefaultAdminRules {\\n *   constructor() AccessControlDefaultAdminRules(\\n *     3 days,\\n *     msg.sender // Explicit initial `DEFAULT_ADMIN_ROLE` holder\\n *    ) {}\\n * }\\n * ```\\n */\\nabstract contract AccessControlDefaultAdminRules is IAccessControlDefaultAdminRules, IERC5313, AccessControl {\\n    // pending admin pair read/written together frequently\\n    address private _pendingDefaultAdmin;\\n    uint48 private _pendingDefaultAdminSchedule; // 0 == unset\\n\\n    uint48 private _currentDelay;\\n    address private _currentDefaultAdmin;\\n\\n    // pending delay pair read/written together frequently\\n    uint48 private _pendingDelay;\\n    uint48 private _pendingDelaySchedule; // 0 == unset\\n\\n    /**\\n     * @dev Sets the initial values for {defaultAdminDelay} and {defaultAdmin} address.\\n     */\\n    constructor(uint48 initialDelay, address initialDefaultAdmin) {\\n        if (initialDefaultAdmin == address(0)) {\\n            revert AccessControlInvalidDefaultAdmin(address(0));\\n        }\\n        _currentDelay = initialDelay;\\n        _grantRole(DEFAULT_ADMIN_ROLE, initialDefaultAdmin);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlDefaultAdminRules).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC5313-owner}.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return defaultAdmin();\\n    }\\n\\n    ///\\n    /// Override AccessControl role management\\n    ///\\n\\n    /**\\n     * @dev See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super.grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super.revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-renounceRole}.\\n     *\\n     * For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling\\n     * {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule\\n     * has also passed when calling this function.\\n     *\\n     * After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions.\\n     *\\n     * NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin},\\n     * thereby disabling any functionality that is only available for it, and the possibility of reassigning a\\n     * non-administrated role.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override(AccessControl, IAccessControl) {\\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\\n            (address newDefaultAdmin, uint48 schedule) = pendingDefaultAdmin();\\n            if (newDefaultAdmin != address(0) || !_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\\n                revert AccessControlEnforcedDefaultAdminDelay(schedule);\\n            }\\n            delete _pendingDefaultAdminSchedule;\\n        }\\n        super.renounceRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_grantRole}.\\n     *\\n     * For `DEFAULT_ADMIN_ROLE`, it only allows granting if there isn't already a {defaultAdmin} or if the\\n     * role has been previously renounced.\\n     *\\n     * NOTE: Exposing this function through another mechanism may make the `DEFAULT_ADMIN_ROLE`\\n     * assignable again. Make sure to guarantee this is the expected behavior in your implementation.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            if (defaultAdmin() != address(0)) {\\n                revert AccessControlEnforcedDefaultAdminRules();\\n            }\\n            _currentDefaultAdmin = account;\\n        }\\n        return super._grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_revokeRole}.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        if (role == DEFAULT_ADMIN_ROLE && account == defaultAdmin()) {\\n            delete _currentDefaultAdmin;\\n        }\\n        return super._revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev See {AccessControl-_setRoleAdmin}. Reverts for `DEFAULT_ADMIN_ROLE`.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual override {\\n        if (role == DEFAULT_ADMIN_ROLE) {\\n            revert AccessControlEnforcedDefaultAdminRules();\\n        }\\n        super._setRoleAdmin(role, adminRole);\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules accessors\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdmin() public view virtual returns (address) {\\n        return _currentDefaultAdmin;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function pendingDefaultAdmin() public view virtual returns (address newAdmin, uint48 schedule) {\\n        return (_pendingDefaultAdmin, _pendingDefaultAdminSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdminDelay() public view virtual returns (uint48) {\\n        uint48 schedule = _pendingDelaySchedule;\\n        return (_isScheduleSet(schedule) && _hasSchedulePassed(schedule)) ? _pendingDelay : _currentDelay;\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function pendingDefaultAdminDelay() public view virtual returns (uint48 newDelay, uint48 schedule) {\\n        schedule = _pendingDelaySchedule;\\n        return (_isScheduleSet(schedule) && !_hasSchedulePassed(schedule)) ? (_pendingDelay, schedule) : (0, 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function defaultAdminDelayIncreaseWait() public view virtual returns (uint48) {\\n        return 5 days;\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdmin/pendingDefaultAdmin\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _beginDefaultAdminTransfer(newAdmin);\\n    }\\n\\n    /**\\n     * @dev See {beginDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _beginDefaultAdminTransfer(address newAdmin) internal virtual {\\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + defaultAdminDelay();\\n        _setPendingDefaultAdmin(newAdmin, newSchedule);\\n        emit DefaultAdminTransferScheduled(newAdmin, newSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function cancelDefaultAdminTransfer() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _cancelDefaultAdminTransfer();\\n    }\\n\\n    /**\\n     * @dev See {cancelDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _cancelDefaultAdminTransfer() internal virtual {\\n        _setPendingDefaultAdmin(address(0), 0);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function acceptDefaultAdminTransfer() public virtual {\\n        (address newDefaultAdmin, ) = pendingDefaultAdmin();\\n        if (_msgSender() != newDefaultAdmin) {\\n            // Enforce newDefaultAdmin explicit acceptance.\\n            revert AccessControlInvalidDefaultAdmin(_msgSender());\\n        }\\n        _acceptDefaultAdminTransfer();\\n    }\\n\\n    /**\\n     * @dev See {acceptDefaultAdminTransfer}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _acceptDefaultAdminTransfer() internal virtual {\\n        (address newAdmin, uint48 schedule) = pendingDefaultAdmin();\\n        if (!_isScheduleSet(schedule) || !_hasSchedulePassed(schedule)) {\\n            revert AccessControlEnforcedDefaultAdminDelay(schedule);\\n        }\\n        _revokeRole(DEFAULT_ADMIN_ROLE, defaultAdmin());\\n        _grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\\n        delete _pendingDefaultAdmin;\\n        delete _pendingDefaultAdminSchedule;\\n    }\\n\\n    ///\\n    /// AccessControlDefaultAdminRules public and internal setters for defaultAdminDelay/pendingDefaultAdminDelay\\n    ///\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _changeDefaultAdminDelay(newDelay);\\n    }\\n\\n    /**\\n     * @dev See {changeDefaultAdminDelay}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _changeDefaultAdminDelay(uint48 newDelay) internal virtual {\\n        uint48 newSchedule = SafeCast.toUint48(block.timestamp) + _delayChangeWait(newDelay);\\n        _setPendingDelay(newDelay, newSchedule);\\n        emit DefaultAdminDelayChangeScheduled(newDelay, newSchedule);\\n    }\\n\\n    /**\\n     * @inheritdoc IAccessControlDefaultAdminRules\\n     */\\n    function rollbackDefaultAdminDelay() public virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _rollbackDefaultAdminDelay();\\n    }\\n\\n    /**\\n     * @dev See {rollbackDefaultAdminDelay}.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _rollbackDefaultAdminDelay() internal virtual {\\n        _setPendingDelay(0, 0);\\n    }\\n\\n    /**\\n     * @dev Returns the amount of seconds to wait after the `newDelay` will\\n     * become the new {defaultAdminDelay}.\\n     *\\n     * The value returned guarantees that if the delay is reduced, it will go into effect\\n     * after a wait that honors the previously set delay.\\n     *\\n     * See {defaultAdminDelayIncreaseWait}.\\n     */\\n    function _delayChangeWait(uint48 newDelay) internal view virtual returns (uint48) {\\n        uint48 currentDelay = defaultAdminDelay();\\n\\n        // When increasing the delay, we schedule the delay change to occur after a period of \\\"new delay\\\" has passed, up\\n        // to a maximum given by defaultAdminDelayIncreaseWait, by default 5 days. For example, if increasing from 1 day\\n        // to 3 days, the new delay will come into effect after 3 days. If increasing from 1 day to 10 days, the new\\n        // delay will come into effect after 5 days. The 5 day wait period is intended to be able to fix an error like\\n        // using milliseconds instead of seconds.\\n        //\\n        // When decreasing the delay, we wait the difference between \\\"current delay\\\" and \\\"new delay\\\". This guarantees\\n        // that an admin transfer cannot be made faster than \\\"current delay\\\" at the time the delay change is scheduled.\\n        // For example, if decreasing from 10 days to 3 days, the new delay will come into effect after 7 days.\\n        return\\n            newDelay > currentDelay\\n                ? uint48(Math.min(newDelay, defaultAdminDelayIncreaseWait())) // no need to safecast, both inputs are uint48\\n                : currentDelay - newDelay;\\n    }\\n\\n    ///\\n    /// Private setters\\n    ///\\n\\n    /**\\n     * @dev Setter of the tuple for pending admin and its schedule.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function _setPendingDefaultAdmin(address newAdmin, uint48 newSchedule) private {\\n        (, uint48 oldSchedule) = pendingDefaultAdmin();\\n\\n        _pendingDefaultAdmin = newAdmin;\\n        _pendingDefaultAdminSchedule = newSchedule;\\n\\n        // An `oldSchedule` from `pendingDefaultAdmin()` is only set if it hasn't been accepted.\\n        if (_isScheduleSet(oldSchedule)) {\\n            // Emit for implicit cancellations when another default admin was scheduled.\\n            emit DefaultAdminTransferCanceled();\\n        }\\n    }\\n\\n    /**\\n     * @dev Setter of the tuple for pending delay and its schedule.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function _setPendingDelay(uint48 newDelay, uint48 newSchedule) private {\\n        uint48 oldSchedule = _pendingDelaySchedule;\\n\\n        if (_isScheduleSet(oldSchedule)) {\\n            if (_hasSchedulePassed(oldSchedule)) {\\n                // Materialize a virtual delay\\n                _currentDelay = _pendingDelay;\\n            } else {\\n                // Emit for implicit cancellations when another delay was scheduled.\\n                emit DefaultAdminDelayChangeCanceled();\\n            }\\n        }\\n\\n        _pendingDelay = newDelay;\\n        _pendingDelaySchedule = newSchedule;\\n    }\\n\\n    ///\\n    /// Private helpers\\n    ///\\n\\n    /**\\n     * @dev Defines if an `schedule` is considered set. For consistency purposes.\\n     */\\n    function _isScheduleSet(uint48 schedule) private pure returns (bool) {\\n        return schedule != 0;\\n    }\\n\\n    /**\\n     * @dev Defines if an `schedule` is considered passed. For consistency purposes.\\n     */\\n    function _hasSchedulePassed(uint48 schedule) private view returns (bool) {\\n        return schedule < block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0xd5e43578dce2678fbd458e1221dc37b20e983ecce4a314b422704f07d6015c5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC165 detection.\\n */\\ninterface IAccessControlDefaultAdminRules is IAccessControl {\\n    /**\\n     * @dev The new default admin is not a valid default admin.\\n     */\\n    error AccessControlInvalidDefaultAdmin(address defaultAdmin);\\n\\n    /**\\n     * @dev At least one of the following rules was violated:\\n     *\\n     * - The `DEFAULT_ADMIN_ROLE` must only be managed by itself.\\n     * - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time.\\n     * - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\\n     */\\n    error AccessControlEnforcedDefaultAdminRules();\\n\\n    /**\\n     * @dev The delay for transferring the default admin delay is enforced and\\n     * the operation must wait until `schedule`.\\n     *\\n     * NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\\n     */\\n    error AccessControlEnforcedDefaultAdminDelay(uint48 schedule);\\n\\n    /**\\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\\n     * passes.\\n     */\\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\\n     */\\n    event DefaultAdminTransferCanceled();\\n\\n    /**\\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\\n     */\\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\\n     */\\n    event DefaultAdminDelayChangeCanceled();\\n\\n    /**\\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\\n     */\\n    function defaultAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\\n     *\\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\\n     *\\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\\n     *\\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\\n     */\\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\\n     *\\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\\n     * the acceptance schedule.\\n     *\\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\\n     * function returns the new delay. See {changeDefaultAdminDelay}.\\n     */\\n    function defaultAdminDelay() external view returns (uint48);\\n\\n    /**\\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\\n     *\\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\\n     *\\n     * A zero value only in `effectSchedule` indicates no pending delay change.\\n     *\\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\\n     * will be zero after the effect schedule.\\n     */\\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\\n     * after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminRoleChangeStarted event.\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) external;\\n\\n    /**\\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function cancelDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * After calling the function:\\n     *\\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\\n     * - {pendingDefaultAdmin} should be reset to zero values.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\\n     */\\n    function acceptDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\\n     * set before calling.\\n     *\\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\\n     * complete transfer (including acceptance).\\n     *\\n     * The schedule is designed for two scenarios:\\n     *\\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\\n     * {defaultAdminDelayIncreaseWait}.\\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\\n     *\\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) external;\\n\\n    /**\\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function rollbackDefaultAdminDelay() external;\\n\\n    /**\\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\\n     * to take effect. Default to 5 days.\\n     *\\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\\n     *\\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\\n     */\\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\\n}\\n\",\"keccak256\":\"0x969a4661694319a003d037ccbf7c8310f8994d746b763c933d3f76d906e67203\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5313.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5313.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface for the Light Contract Ownership Standard.\\n *\\n * A standardized minimal interface required to identify an account that controls a contract\\n */\\ninterface IERC5313 {\\n    /**\\n     * @dev Gets the address of the owner.\\n     */\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0x22412c268e74cc3cbf550aecc2f7456f6ac40783058e219cfe09f26f4d396621\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/ICodeIndexDep.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// This file is exactly same as ./ICodeIndexer.sol\\\\\\n// With exception for more loose pragma version\\n// Updating the CodeIndex pragma directly would cause changing the deployed bytecode for ERC7744\\ninterface ICodeIndex {\\n    event Indexed(address indexed container, bytes32 indexed codeHash);\\n    error alreadyExists(bytes32 id, address source);\\n\\n    function register(address container) external;\\n\\n    function get(bytes32 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x4a6ec56ae205ae88909b51b198e4379071087d56de7124214332013550a463c2\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/abstracts/CodeIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../ICodeIndexDep.sol\\\";\\n\\nabstract contract CodeIndexer {\\n    //Create2 contract\\n    ICodeIndex private constant INDEX_CONTRACT = ICodeIndex(0xc0D31d398c5ee86C5f8a23FA253ee8a586dA03Ce);\\n    constructor() {}\\n    // @inheritdoc ICodeIndex\\n    function getContractsIndex() internal pure returns (ICodeIndex) {\\n        return INDEX_CONTRACT;\\n    }\\n    // @inheritdoc ICodeIndex\\n    function index(address source) internal {\\n        INDEX_CONTRACT.register(source);\\n    }\\n}\\n\",\"keccak256\":\"0x142f2bf6a1486bbc463bfc1737c7d8cb692b10f7b7d6e2f8118b485e4603d85a\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/abstracts/Distributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../interfaces/IDistribution.sol\\\";\\nimport \\\"../interfaces/IDistributor.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../interfaces/IInitializer.sol\\\";\\nimport \\\"../abstracts/CodeIndexer.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {IContractURI} from \\\"../interfaces/IContractURI.sol\\\";\\n/**\\n * @title Distributor\\n * @notice Abstract contract that implements the IDistributor interface, CodeIndexer, and ERC165.\\n * This contract serves as a base for creating distributor contracts with specific functionalities.\\n * It provides the necessary structure and functions to be extended by other contracts.\\n * @author Peeramid Labs, 2024\\n */\\nabstract contract Distributor is IDistributor, CodeIndexer, ERC165 {\\n    using LibSemver for LibSemver.Version;\\n    struct DistributionComponent {\\n        address distributionLocation;\\n        address initializer;\\n    }\\n\\n    struct VersionedDistribution {\\n        LibSemver.VersionRequirement requirement;\\n    }\\n\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    EnumerableSet.Bytes32Set private distributionsSet;\\n    mapping(address instance => uint256 instanceId) private instanceIds;\\n    mapping(uint256 instance => bytes32 distributorsId) public distributionOf;\\n    mapping(bytes32 distributorsId => DistributionComponent distribution) public distributionComponents;\\n    mapping(bytes32 distributorsId => LibSemver.VersionRequirement VersionRequirement) public versionRequirements;\\n    mapping(uint256 instanceId => LibSemver.Version instanceVersion) public instanceVersions;\\n\\n    uint256 public numInstances;\\n    // @inheritdoc IDistributor\\n    function getDistributions() external view returns (bytes32[] memory) {\\n        return distributionsSet.values();\\n    }\\n    // @inheritdoc IDistributor\\n    function getDistributionId(address instance) external view virtual returns (bytes32) {\\n        return distributionOf[getInstanceId(instance)];\\n    }\\n    // @inheritdoc IDistributor\\n    function getInstanceId(address instance) public view virtual returns (uint256) {\\n        return instanceIds[instance];\\n    }\\n    // @inheritdoc IDistributor\\n    function getDistributionURI(bytes32 distributorsId) external view returns (string memory) {\\n        DistributionComponent memory distributionComponent = distributionComponents[distributorsId];\\n        return IContractURI(distributionComponent.distributionLocation).contractURI();\\n    }\\n\\n    function _addDistribution(\\n        address repository,\\n        address initializer,\\n        LibSemver.VersionRequirement memory requirement\\n    ) internal virtual returns (bytes32 distributorId) {\\n        if (!ERC165Checker.supportsInterface(address(repository), type(IRepository).interfaceId)) {\\n            revert InvalidRepository(repository);\\n        }\\n        distributorId = keccak256(abi.encode(repository, initializer));\\n        if (LibSemver.toUint256(requirement.version) == 0) {\\n            revert InvalidVersionRequested(distributorId, LibSemver.toString(requirement.version));\\n        }\\n        _newDistributionRecord(distributorId, repository, initializer);\\n        versionRequirements[distributorId] = requirement;\\n        emit VersionChanged(distributorId, requirement, requirement);\\n    }\\n\\n    function calculateDistributorId(address repository, address initializer) public pure returns (bytes32) {\\n        return keccak256(abi.encode(repository, initializer));\\n    }\\n\\n    function calculateDistributorId(bytes32 sourceId, address initializer) public pure returns (bytes32) {\\n        return keccak256(abi.encode(sourceId, initializer));\\n    }\\n\\n    function _newDistributionRecord(bytes32 distributorId, address source, address initializer) private {\\n        if (distributionsSet.contains(distributorId)) revert DistributionExists(distributorId);\\n        distributionsSet.add(distributorId);\\n        distributionComponents[distributorId] = DistributionComponent(source, initializer);\\n        emit DistributionAdded(distributorId, source, initializer);\\n    }\\n    function _addDistribution(bytes32 id, address initializerAddress) internal virtual returns (bytes32 distributorId) {\\n        ICodeIndex codeIndex = getContractsIndex();\\n        address distributionLocation = codeIndex.get(id);\\n        if (distributionLocation == address(0)) revert DistributionNotFound(id);\\n        distributorId = keccak256(abi.encode(id, initializerAddress));\\n        _newDistributionRecord(distributorId, distributionLocation, initializerAddress);\\n    }\\n\\n    function _removeDistribution(bytes32 distributorsId) internal virtual {\\n        if (!distributionsSet.contains(distributorsId)) revert DistributionNotFound(distributorsId);\\n        distributionsSet.remove(distributorsId);\\n        delete distributionComponents[distributorsId];\\n        delete versionRequirements[distributorsId];\\n        emit DistributionRemoved(distributorsId);\\n    }\\n\\n    /**\\n     * @notice Internal function to instantiate a new instance.\\n     * @dev WARNING: This function will DELEGATECALL to initializer if such is provided. Initializer contract MUST be trusted by distributor.\\n     */\\n    function _instantiate(\\n        bytes32 distributorsId,\\n        bytes memory args\\n    ) internal virtual returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion) {\\n        if (!distributionsSet.contains(distributorsId)) revert DistributionNotFound(distributorsId);\\n        DistributionComponent memory distributionComponent = distributionComponents[distributorsId];\\n        LibSemver.VersionRequirement memory versionRequirement = versionRequirements[distributorsId];\\n\\n        // External initializer is provided, delegatecall to it\\n        // Contrary, if no initializer is provided, the distribution is expected to be self-initializing\\n        bool externallyInitialized = distributionComponent.initializer == address(0);\\n        bytes4 selector = IInitializer.initialize.selector;\\n        bytes memory instantiationArgs = externallyInitialized ? args : bytes(\\\"\\\");\\n        address distributionLocation;\\n        numInstances++;\\n        uint256 instanceId = numInstances;\\n\\n        if (LibSemver.toUint256(versionRequirement.version) == 0) {\\n            // Unversioned distribution, expect IDistribution\\n            distributionLocation = distributionComponent.distributionLocation;\\n            // Name and version are inferred from what the distribution provides\\n            (instances, distributionName, distributionVersion) = IDistribution(distributionLocation).instantiate(\\n                instantiationArgs\\n            );\\n            // Unversioned distributions are considered to be at version 0, and are not expected to change\\n            // This might change in the future, as it could make sense to inherit `distributionVersion` from the distribution\\n            // Yet for ease of runtime validation and to avoid potential issues, we keep it at 0\\n            instanceVersions[numInstances] = LibSemver.parse(0);\\n        } else {\\n            // Versioned distribution, expect IRepository\\n            IRepository repository = IRepository(distributionComponent.distributionLocation);\\n            IRepository.Source memory repoSource = repository.get(versionRequirement);\\n            ICodeIndex codeIndex = getContractsIndex();\\n            distributionLocation = codeIndex.get(repoSource.sourceId);\\n            if (distributionLocation == address(0)) revert DistributionNotFound(repoSource.sourceId);\\n            (instances, , ) = IDistribution(distributionLocation).instantiate(instantiationArgs);\\n            distributionName = repository.repositoryName();\\n            distributionVersion = LibSemver.toUint256(repoSource.version);\\n            instanceVersions[numInstances] = repoSource.version;\\n        }\\n\\n        if (externallyInitialized) {\\n            (bool success, bytes memory result) = address(distributionComponent.initializer).delegatecall(\\n                abi.encodeWithSelector(selector, instances, args)\\n            );\\n            if (!success) {\\n                if (result.length > 0) {\\n                    assembly {\\n                        let returndata_size := mload(result)\\n                        revert(add(32, result), returndata_size)\\n                    }\\n                } else {\\n                    revert(\\\"initializer delegatecall failed without revert reason\\\");\\n                }\\n            }\\n        }\\n\\n        {\\n            uint256 instancesLength = instances.length;\\n            for (uint256 i; i < instancesLength; ++i) {\\n                instanceIds[instances[i]] = instanceId;\\n                distributionOf[instanceId] = distributorsId;\\n            }\\n        }\\n        emit Instantiated(distributorsId, instanceId, distributionVersion, instances, args);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC7746\\n     * @notice This is ERC7746 hook must be called by instance methods that access scope is limited to the same instance or distribution\\n     * @dev it will revert if: (1) `msg.sender` is not a valid instance; (2) `maybeInstance` is not a valid instance (3) `instanceId` belongs to disactivated distribution\\n     */\\n    function beforeCall(\\n        bytes memory config,\\n        bytes4,\\n        address maybeInstance,\\n        uint256,\\n        bytes memory\\n    ) external view virtual returns (bytes memory) {\\n        address target = config.length > 0 ? abi.decode(config, (address)) : msg.sender;\\n        bytes32 distributorsId = distributionOf[getInstanceId(maybeInstance)];\\n        uint256 instanceId = getInstanceId(maybeInstance);\\n        if (\\n            distributorsId != bytes32(0) &&\\n            getInstanceId(target) == instanceId &&\\n            distributionsSet.contains(distributorsId)\\n        ) {\\n            // ToDo: This check could be based on DistributionOf, hence allowing cross-instance calls\\n            // Use layerConfig to allow client to configure requirement for the call\\n            if (!LibSemver.compare(instanceVersions[instanceId], versionRequirements[distributorsId])) {\\n                revert VersionOutdated(distributorsId, LibSemver.toString(instanceVersions[instanceId]));\\n            }\\n            return abi.encode(distributorsId, \\\"\\\");\\n        }\\n        revert InvalidInstance(maybeInstance);\\n    }\\n    /**\\n     * @inheritdoc IERC7746\\n     * @notice This is ERC7746 hook must be called by instance methods that access scope is limited to the same instance or distribution\\n     * @dev it will revert if: (1) `msg.sender` is not a valid instance; (2) `maybeInstance` is not a valid instance (3) `instanceId` belongs to disactivated distribution\\n     */\\n    function afterCall(\\n        bytes memory config,\\n        bytes4,\\n        address maybeInstance,\\n        uint256,\\n        bytes memory,\\n        bytes memory\\n    ) external virtual {\\n        address target = config.length > 0 ? abi.decode(config, (address)) : msg.sender;\\n        bytes32 distributorsId = distributionOf[getInstanceId(maybeInstance)];\\n        uint256 instanceId = getInstanceId(maybeInstance);\\n        if ((getInstanceId(target) != getInstanceId(maybeInstance)) && distributionsSet.contains(distributorsId)) {\\n            revert InvalidInstance(maybeInstance);\\n        }\\n        if (!LibSemver.compare(instanceVersions[instanceId], versionRequirements[distributorsId])) {\\n            revert VersionOutdated(distributorsId, LibSemver.toString(instanceVersions[instanceId]));\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IDistributor).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function _changeVersion(bytes32 distributionId, LibSemver.VersionRequirement memory newRequirement) internal {\\n        if (!distributionsSet.contains(distributionId)) revert DistributionNotFound(distributionId);\\n        LibSemver.VersionRequirement memory oldRequirement = versionRequirements[distributionId];\\n        if (LibSemver.toUint256(oldRequirement.version) == 0) {\\n            revert UnversionedDistribution(distributionId);\\n        }\\n        if (LibSemver.toUint256(newRequirement.version) == 0) {\\n            revert InvalidVersionRequested(distributionId, LibSemver.toString(newRequirement.version));\\n        }\\n        if (LibSemver.areEqual(oldRequirement.version, newRequirement.version)) {\\n            revert InvalidVersionRequested(distributionId, LibSemver.toString(newRequirement.version));\\n        }\\n        versionRequirements[distributionId] = newRequirement;\\n    }\\n}\\n\",\"keccak256\":\"0xcbe569e6801d292132c40a780e3e5ee44582a61a2011fe493170ef5dbcf24006\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/abstracts/TokenizedDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./Distributor.sol\\\";\\n\\nabstract contract TokenizedDistributor is Distributor {\\n    event InstantiationCostChanged(bytes32 indexed id, uint256 cost);\\n    IERC20 public paymentToken;\\n    address public _beneficiary;\\n    mapping(bytes32 id => uint256) public instantiationCosts;\\n    uint256 public defaultInstantiationCost;\\n    constructor(IERC20 token, uint256 defaultCost, address beneficiary) Distributor() {\\n        paymentToken = token;\\n        defaultInstantiationCost = defaultCost;\\n        _beneficiary = beneficiary;\\n    }\\n\\n    /**\\n     * @notice Sets instantiation cost on a specific instantiation id\\n     * @param distributorsId distributors id\\n     * @param cost cost of instantiation\\n     */\\n    function _setInstantiationCost(bytes32 distributorsId, uint256 cost) internal {\\n        instantiationCosts[distributorsId] = cost;\\n        emit InstantiationCostChanged(distributorsId, cost);\\n    }\\n\\n    /**\\n     * @inheritdoc Distributor\\n     */\\n    function _addDistribution(\\n        bytes32 id,\\n        address initializerAddress\\n    ) internal override returns (bytes32 distributorsId) {\\n        distributorsId = super._addDistribution(id, initializerAddress);\\n        _setInstantiationCost(distributorsId, defaultInstantiationCost);\\n    }\\n\\n    /**\\n     * @inheritdoc Distributor\\n     */\\n    function _instantiate(\\n        bytes32 distributorsId,\\n        bytes memory args\\n    )\\n        internal\\n        virtual\\n        override\\n        returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion)\\n    {\\n        paymentToken.transferFrom(msg.sender, _beneficiary, instantiationCosts[distributorsId]);\\n        return super._instantiate(distributorsId, args);\\n    }\\n}\\n\",\"keccak256\":\"0x10c53360ea7810e202df2ee8e9b23ae48f55124d922e4d46ca332eea90d4519c\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IContractURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7adffebc6e64c642e132bbff8ff695138517023f710b23b8767708de4f73db0b\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IContractURI} from \\\"./IContractURI.sol\\\";\\n/**\\n * @title IDistribution\\n * @notice Interface for distribution-related functionalities. It can get sources and produce a new instances out from them. It also provides metadata about the distribution.\\n * @dev It is highly recommended to keep implementation stateless, and use `immutable` variables for any state. This allows your code to be referred in distributor and respositories via ERC7744. It's also easier to reason about, and more gas efficient.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IDistribution is IContractURI {\\n    /**\\n     * @notice Emitted when a distribution occurs.\\n     * @param distributor The address of the entity that performed the distribution.\\n     * @param instances An array of addresses that were produced.\\n     */\\n    event Distributed(address indexed distributor, address[] instances);\\n\\n    /**\\n     * @notice Instantiates a new instance with the given parameters.\\n     * @param data The data to be used for instantiation.\\n     * @return instances An array of addresses that were produced.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     * @dev WARNING: It MUST emit Distributed event.\\n     */\\n    function instantiate(\\n        bytes memory data\\n    ) external returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion);\\n\\n    /**\\n     * @notice Retrieves the current distribution sources.\\n     * @return sources An array of addresses that are used for instantiation.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     */\\n    function get()\\n        external\\n        view\\n        returns (address[] memory sources, bytes32 distributionName, uint256 distributionVersion);\\n}\\n\",\"keccak256\":\"0x8d8bfa27277d68b5defe449c4af09be60cefa0b275d7b25022921502f34e5d63\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IRepository.sol\\\";\\nimport \\\"../libraries/LibSemver.sol\\\";\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\n\\n/**\\n * @title IDistributor Interface\\n * @notice Defines the standard functions for a distributor contract.\\n * @dev If you want to use {IRepository} for versioned distributions, use {IVersionDistributor} interface.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IDistributor is IERC7746, IERC165 {\\n    error InvalidVersionRequested(bytes32 distributionId, string version);\\n    error InvalidRepository(address repository);\\n    error RepositoryAlreadyExists(address repository);\\n    error VersionOutdated(bytes32 distributionId, string version);\\n    error InvalidInstance(address instance);\\n    error UnversionedDistribution(bytes32 distributionId);\\n\\n    /**\\n     * @notice Emitted when the version of the distributor is changed.\\n     * @param distributionId The unique identifier of the distribution.\\n     * @param newRequirement The new version requirement (hashed for indexing).\\n     * @param newRequirementData The new version requirement data.\\n     */\\n    event VersionChanged(\\n        bytes32 indexed distributionId,\\n        LibSemver.VersionRequirement indexed newRequirement,\\n        LibSemver.VersionRequirement newRequirementData\\n    );\\n\\n    /**\\n     * @notice Error indicating that the distribution with the specified ID was not found.\\n     * @param id The unique identifier of the distribution that was not found.\\n     */\\n    error DistributionNotFound(bytes32 id);\\n    /**\\n     * @notice Error indicating that a distribution with the specified ID already exists.\\n     * @param id The unique identifier of the distribution that already exists.\\n     */\\n    error DistributionExists(bytes32 id);\\n    /**\\n     * @notice Error indicating that the initializer for the distribution was not found.\\n     * @param id The unique identifier of the distribution that was not found.\\n     */\\n    error InitializerNotFound(bytes32 id);\\n\\n    /**\\n     * @notice Event emitted when a new distribution is instantiated.\\n     * @param distributionId The unique identifier of the distribution.\\n     * @param newInstanceId The unique identifier of the instance.\\n     * @param version The version of the distribution, taken either from IDistribution or from IRepository.\\n     * @param instances The addresses of the instances that were created.\\n     * @param args The arguments that were used for instantiation.\\n     * @dev It MUST emit when {IDistributor.instantiate} is called.\\n     */\\n    event Instantiated(\\n        bytes32 indexed distributionId,\\n        uint256 indexed newInstanceId,\\n        uint256 indexed version,\\n        address[] instances,\\n        bytes args\\n    );\\n    /**\\n     * @notice Event emitted when a distribution is removed.\\n     * @param id The unique identifier of the distribution that was removed.\\n     * @dev It MUST emit when {IDistributor.removeDistribution} is called.\\n     */\\n    event DistributionRemoved(bytes32 indexed id);\\n\\n    /**\\n     * @notice Event emitted when a distribution is added.\\n     * @param id The unique identifier of the distribution that was added.\\n     * @param distribution The address of the distribution that was added.\\n     * @param initializer The address of the initializer for the distribution.\\n     * @dev It MUST emit when {IDistributor.addDistribution} is called.\\n     */\\n    event DistributionAdded(bytes32 indexed id, address distribution, address indexed initializer);\\n\\n    /**\\n     * @notice Retrieves the unique identifiers of all distributions.\\n     * @return distributorIds An array of unique identifiers of all distributions.\\n     */\\n    function getDistributions() external view returns (bytes32[] memory distributorIds);\\n\\n    /**\\n     * @notice Retrieves the URI of the distribution.\\n     * @param distributorId The unique identifier of the distribution.\\n     * @return uri The URI of the distribution.\\n     */\\n    function getDistributionURI(bytes32 distributorId) external view returns (string memory);\\n\\n    /**\\n     * @notice Instantiates a new instance with the given distributor ID and arguments.\\n     * @param distributorId The unique identifier of the distributor.\\n     * @param args The arguments to be used for instantiation.\\n     * @return instances The addresses of the instances that were created.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     * @dev It MUST emit {Instantiated} event.\\n     */\\n    function instantiate(\\n        bytes32 distributorId,\\n        bytes calldata args\\n    ) external returns (address[] memory, bytes32 distributionName, uint256 distributionVersion);\\n\\n    /**\\n     * @notice Adds a new distribution with the specified distributor ID and initializer address.\\n     * @param distributorId The unique identifier for the distributor.\\n     * @param initializer The address of the initializer for the distribution.\\n     * @dev WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.\\n     */\\n    function addDistribution(bytes32 distributorId, address initializer) external;\\n\\n    /**\\n     * @notice Removes a distribution identified by the given distributorId.\\n     * @param distributorId The unique identifier of the distribution to be removed.\\n     */\\n    function removeDistribution(bytes32 distributorId) external;\\n\\n    /**\\n     * @notice Retrieves the distribution ID associated with a given instance address.\\n     * @param instance The address of the instance for which the distribution ID is being requested.\\n     * @return The distribution ID as a bytes32 value.\\n     */\\n    function getDistributionId(address instance) external view returns (bytes32);\\n    /**\\n     * @notice Retrieves the unique identifier for a given instance address.\\n     * @param instance The address of the instance whose ID is to be retrieved.\\n     * @return The unique identifier (uint256) associated with the specified instance address.\\n     */\\n    function getInstanceId(address instance) external view returns (uint256);\\n\\n    /**\\n     * @notice Adds a new versioned distribution to the repository.\\n     * @param repository The repository to which the distribution will be added.\\n     * @param initializer The address that initializes the distribution.\\n     * @param requirement The version requirements for the distribution.\\n     * @dev WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.\\n     */\\n    function addDistribution(\\n        IRepository repository,\\n        address initializer,\\n        LibSemver.VersionRequirement memory requirement\\n    ) external;\\n\\n    /**\\n     * @notice Changes the version requirement for a specific distribution.\\n     * @param distributionId The unique identifier of the distribution whose version requirement is to be changed.\\n     * @param newRequirement The new version requirement to be set for the distribution.\\n     */\\n    function changeVersion(bytes32 distributionId, LibSemver.VersionRequirement memory newRequirement) external;\\n}\\n\",\"keccak256\":\"0xd9ac323c08e6b4fbf4b01ed65694113f1d8fa9ab3cb686d219b1f14dc199fce9\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IERC7746.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IERC7746 Interface\\n * @dev Interface for the ERC7746 standard.\\n */\\ninterface IERC7746 {\\n    /// @notice Validates a function call before execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @return beforeCallResult Arbitrary data to be passed to `afterCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function beforeCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @notice Validates a function call after execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @param beforeCallResult The data returned by `beforeCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function afterCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data,\\n        bytes memory beforeCallResult\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eb8e8f14581dff37cc01475b0eb63926998b958328aa23e8afe3c0e2c93024a\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/interfaces/IInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IInitializer\\n * @notice Interface for the Initializer contract. This is intended to be used\\n * as distribution initializer within the Distributor contract.\\n */\\ninterface IInitializer {\\n    event Initialized(address indexed container, bytes32 indexed codeHash);\\n    error initializationFailed(bytes32 id, string reason);\\n\\n    /**\\n     * @notice Initializes the contract with necessary parameters.\\n     * @dev This function should be delegete-called by the distributor contract.\\n     * @param distributionId The ID of the distribution being initialized\\n     * @param instances The addresses of the instances being initialized\\n     * @param distributionName The name of the distribution\\n     * @param distributionVersion The version of the distribution\\n     * @param args The additional arguments to be used for initialization\\n     */\\n    function initialize(\\n        bytes32 distributionId,\\n        address[] memory instances,\\n        bytes32 distributionName,\\n        uint256 distributionVersion,\\n        bytes calldata args\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe170e7c8feb9f49cd29b6b10c760d8b0c616c776cfaa5451fb133c5ff8019f15\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../libraries/LibSemver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IContractURI} from \\\"./IContractURI.sol\\\";\\n/**\\n * @title IRepository Interface\\n * @notice It is intended to be implemented by contracts that manage a collection of versions of a byte code.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IRepository is IERC165, IContractURI {\\n    /**\\n     * @notice Represents a source with version information, a unique identifier, and associated metadata.\\n     * @param version The version of the source, represented using the LibSemver.Version struct.\\n     * @param sourceId A unique identifier for the source.\\n     * @param metadata Additional data associated with the source.\\n     */\\n    struct Source {\\n        LibSemver.Version version;\\n        bytes32 sourceId;\\n        bytes metadata;\\n    }\\n\\n    /**\\n     * @notice Error indicating that the specified version does not exist.\\n     * @param version The version number that does not exist.\\n     */\\n    error VersionDoesNotExist(uint256 version);\\n    /**\\n     * @notice Error indicating that a release with a zero value is not allowed.\\n     */\\n    error ReleaseZeroNotAllowed();\\n    /**\\n     * @notice Error indicating that the specified version already exists.\\n     * @param version The version number that already exists.\\n     */\\n    error VersionExists(uint256 version);\\n    /**\\n     * @notice Error indicating that the version increment is invalid.\\n     * @param version The version number that caused the error.\\n     * @dev The version increment must be exactly one for either major, minor, or patch.\\n     */\\n    error VersionIncrementInvalid(uint256 version);\\n    /**\\n     * @dev Error indicating that the release metadata is empty.\\n     */\\n    error EmptyReleaseMetadata();\\n\\n    /**\\n     * @notice Emitted when a new version is added to the repository.\\n     * @param version The version number of the added item.\\n     * @param source The source identifier of the added item.\\n     * @param buildMetadata Additional metadata related to the build.\\n     */\\n    event VersionAdded(uint256 indexed version, bytes32 indexed source, bytes buildMetadata);\\n    /**\\n     * @notice Emitted when the metadata of a release is updated.\\n     * @param version The version number of the release.\\n     * @param releaseMetadata The metadata associated with the release.\\n     */\\n    event ReleaseMetadataUpdated(uint256 indexed version, bytes releaseMetadata);\\n\\n    /**\\n     * @notice Updates the metadata for a specific release version.\\n     * @param version The version of the release to update.\\n     * @param releaseMetadata The new metadata to associate with the release.\\n     * @dev It MUST emit `ReleaseMetadataUpdated` event.\\n     */\\n    function updateReleaseMetadata(LibSemver.Version memory version, bytes calldata releaseMetadata) external;\\n    /**\\n     * @notice Retrieves the name of the repository.\\n     * @return The name of the repository as a bytes32 value.\\n     */\\n    function repositoryName() external view returns (bytes32);\\n    /**\\n     * @notice Creates a new release for the given source ID.\\n     * @param sourceId The unique identifier of the source.\\n     * @param metadata The metadata associated with the release.\\n     * @param version The semantic version of the new release.\\n     * @dev It MUST emit `VersionAdded` event.\\n     */\\n    function newRelease(bytes32 sourceId, bytes memory metadata, LibSemver.Version memory version) external;\\n    /**\\n     * @notice Retrieves the latest source.\\n     * @return The requested source\\n     */\\n    function getLatest() external view returns (Source memory);\\n    /**\\n     * @notice Retrieves a specific item from the repository.\\n     * @param required the required version\\n     * @return The requested `Source`.\\n     */\\n    function get(LibSemver.VersionRequirement calldata required) external view returns (Source memory);\\n}\\n\",\"keccak256\":\"0xf835f5363fe9ec7d97e61311e84725b9d50b99d935b47a3d43ae56a98eb17278\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/libraries/LibSemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nlibrary LibSemver {\\n    error versionMismatch(string message);\\n    struct Version {\\n        uint64 major;\\n        uint64 minor;\\n        uint128 patch;\\n    }\\n\\n    enum requirements {\\n        ANY, // *\\n        EXACT, // =\\n        MAJOR, // ^\\n        MAJOR_MINOR, // ~\\n        GREATER_EQUAL, // >=\\n        GREATER, // >\\n        LESSER_EQUAL, // <=\\n        LESSER // <\\n    }\\n\\n    struct VersionRequirement {\\n        Version version;\\n        requirements requirement;\\n    }\\n\\n    function toUint256(Version memory _version) internal pure returns (uint256) {\\n        return (uint256(_version.major) << 192) | (uint256(_version.minor) << 128) | uint256(_version.patch);\\n    }\\n\\n    function parse(uint256 _version) internal pure returns (Version memory) {\\n        return Version(uint64(_version >> 192), uint64(_version >> 128), uint128(_version));\\n    }\\n\\n    function toString(Version memory _version) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(uint256(_version.major)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.minor)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.patch))\\n                )\\n            );\\n    }\\n\\n    function require_exact(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) != toUint256(_version2)) revert versionMismatch(\\\"Version mismatch\\\");\\n    }\\n\\n    function require_major(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major) revert versionMismatch(\\\"Major version mismatch\\\");\\n    }\\n\\n    function require_major_minor(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major || _version1.minor != _version2.minor)\\n            revert versionMismatch(\\\"Major and minor version mismatch\\\");\\n    }\\n\\n    function require_greater_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) < toUint256(_version2)) revert versionMismatch(\\\"Version is not greater or equal\\\");\\n    }\\n\\n    function require_greater(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) <= toUint256(_version2)) revert versionMismatch(\\\"Version is not greater\\\");\\n    }\\n\\n    function require_lesser_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) > toUint256(_version2)) revert versionMismatch(\\\"Version is not lesser or equal\\\");\\n    }\\n\\n    function require_lesser(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) >= toUint256(_version2)) revert versionMismatch(\\\"Version is not lesser\\\");\\n    }\\n\\n    function areEqual(Version memory _version1, Version memory _version2) internal pure returns (bool) {\\n        return toUint256(_version1) == toUint256(_version2);\\n    }\\n\\n    function compare(Version memory has, VersionRequirement memory needs) internal pure returns (bool) {\\n        if (needs.requirement == requirements.ANY) return true;\\n        if (needs.requirement == requirements.EXACT) return toUint256(has) == toUint256(needs.version);\\n        if (needs.requirement == requirements.MAJOR) return has.major == needs.version.major;\\n        if (needs.requirement == requirements.MAJOR_MINOR)\\n            return has.major == needs.version.major && has.minor == needs.version.minor;\\n        if (needs.requirement == requirements.GREATER_EQUAL) return toUint256(has) >= toUint256(needs.version);\\n        if (needs.requirement == requirements.GREATER) return toUint256(has) > toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER_EQUAL) return toUint256(has) <= toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER) return toUint256(has) < toUint256(needs.version);\\n        return false;\\n    }\\n\\n    function getNextMajor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major + 1, 0, 0);\\n    }\\n\\n    function getNextMinor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor + 1, 0);\\n    }\\n\\n    function getNextPatch(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor, _version.patch + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x8023de20471ff00ac9aa7630b6696768f894b956d46094a039ac32c5ae596a52\",\"license\":\"MIT\"},\"src/distributors/DAODistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.20;\\n\\nimport \\\"@peeramid-labs/eds/src/abstracts/TokenizedDistributor.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/extensions/AccessControlDefaultAdminRules.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n/**\\n * @title DAODistributor\\n * @notice This contract is a distributor for Peeramid Labs.\\n * It is designed to handle the distribution logic specific to Peeramid Labs.\\n * The contract leverages access control mechanisms to ensure that only authorized\\n * users can perform certain actions.\\n * @author Peeramid Labs, 2024\\n */\\ncontract DAODistributor is TokenizedDistributor, AccessControlDefaultAdminRules {\\n    constructor(\\n        address defaultAdmin,\\n        IERC20 token,\\n        uint256 defaultCost\\n    ) TokenizedDistributor(token, defaultCost, defaultAdmin) AccessControlDefaultAdminRules(3 days, defaultAdmin) {}\\n\\n    /**\\n     * @notice Adds a new distribution with the given identifier and initializer address.\\n     * @dev This function can only be called by an account with the `DEFAULT_ADMIN_ROLE`.\\n     * @param id The unique identifier for the distribution.\\n     * @param initializer The address that initializes the distribution.\\n     */\\n    function addDistribution(bytes32 id, address initializer) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        super._addDistribution(id, initializer);\\n    }\\n\\n    /**\\n     * @notice Sets instantiation cost on a specific instantiation id\\n     * @param id distributors id\\n     * @param cost cost of instantiation\\n     */\\n    function setInstantiationCost(bytes32 id, uint256 cost) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        super._setInstantiationCost(id, cost);\\n    }\\n\\n    /**\\n     * @notice Instantiates a new contract with the given identifier and arguments.\\n     * @param id The unique identifier for the contract to be instantiated.\\n     * @param args The calldata arguments required for the instantiation process.\\n     * @return srcs An array of instantiated infrastructure\\n     * @return name The name of the instantiated distribution.\\n     * @return version The version number of the instantiated distribution.\\n     */\\n    function instantiate(\\n        bytes32 id,\\n        bytes calldata args\\n    ) external returns (address[] memory srcs, bytes32 name, uint256 version) {\\n        return super._instantiate(id, args);\\n    }\\n\\n    /**\\n     * @notice Removes a distribution entry identified by the given ID.\\n     * @dev This function can only be called by an account with the `DEFAULT_ADMIN_ROLE`.\\n     * @param id The unique identifier of the distribution entry to be removed.\\n     */\\n    function removeDistribution(bytes32 id) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        super._removeDistribution(id);\\n    }\\n\\n    /**\\n     *\\n     * This function checks if the contract implements the interface defined by ERC165\\n     *\\n     * @param interfaceId The interface identifier, as specified in ERC-165.\\n     * @return `true` if the contract implements `interfaceId` and\\n     * `interfaceId` is not 0xffffffff, `false` otherwise.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(AccessControlDefaultAdminRules, Distributor) returns (bool) {\\n        return\\n            AccessControlDefaultAdminRules.supportsInterface(interfaceId) || Distributor.supportsInterface(interfaceId);\\n    }\\n\\n    function changeVersion(\\n        bytes32 distributionId,\\n        LibSemver.VersionRequirement memory newRequirement\\n    ) public override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        super._changeVersion(distributionId, newRequirement);\\n    }\\n\\n    // @inheritdoc IDistributor\\n    function addDistribution(\\n        IRepository repository,\\n        address initializer,\\n        LibSemver.VersionRequirement memory requirement\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        super._addDistribution(address(repository), initializer, requirement);\\n    }\\n}\\n\",\"keccak256\":\"0xd625eb6bc3149595e3536eb2ad263ff590ea43da3f00a33281343b505c5e46c0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620040e9380380620040e983398101604081905262000034916200020c565b600880546001600160a01b038085166001600160a01b031992831617909255600b8390556009805492861692909116821790556203f4809084906200009357604051636116401160e11b81526000600482015260240160405180910390fd5b600d80546001600160d01b0316600160d01b65ffffffffffff851602179055620000bf600082620000cb565b50505050505062000254565b6000826200012c576000620000e8600e546001600160a01b031690565b6001600160a01b0316146200011057604051631fe1e13d60e11b815260040160405180910390fd5b600e80546001600160a01b0319166001600160a01b0384161790555b62000138838362000141565b90505b92915050565b6000828152600c602090815260408083206001600160a01b038516845290915281205460ff16620001ea576000838152600c602090815260408083206001600160a01b03861684529091529020805460ff19166001179055620001a13390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016200013b565b5060006200013b565b6001600160a01b03811681146200020957600080fd5b50565b6000806000606084860312156200022257600080fd5b83516200022f81620001f3565b60208501519093506200024281620001f3565b80925050604084015190509250925092565b613e8580620002646000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c80637591b0c211610186578063a1eda53c116100e3578063cc8463c811610097578063d547741f11610071578063d547741f1461076c578063d602b9fd1461077f578063f8f69e901461078757600080fd5b8063cc8463c81461072e578063cefc142914610736578063cf6eefb71461073e57600080fd5b8063b9ebf395116100c8578063b9ebf3951461067d578063c3e9576a146106fb578063c66670f11461070e57600080fd5b8063a1eda53c1461064e578063a217fddf1461067557600080fd5b8063894785611161013a57806391d148541161011f57806391d1485414610603578063921e1d1b1461063c57806399aa65a71461064557600080fd5b806389478561146105e85780638da5cb5b146105fb57600080fd5b8063834c4b7e1161016b578063834c4b7e1461059b57806384ef8ffc146105ae5780638740ce05146105bf57600080fd5b80637591b0c214610566578063828cedb71461058857600080fd5b80632343b000116102345780634440d245116101e8578063584ed12c116101cd578063584ed12c1461052d578063634e93da14610540578063649a5ec71461055357600080fd5b80634440d2451461049d5780634587af5e146104b057600080fd5b80632f2ff15d116102195780632f2ff15d1461044c5780633013ce291461045f57806336568abe1461048a57600080fd5b80632343b00014610409578063248a9ca31461042957600080fd5b80630aa6220b1161028b578063130238711161027057806313023871146103825780631a0bba04146103955780631bc82e65146103b557600080fd5b80630aa6220b14610367578063128ecd1e1461036f57600080fd5b806302aa6318116102bc57806302aa63181461031c57806303ac23c71461033157806309587fbc1461035257600080fd5b806301ffc9a7146102d8578063022d63fb14610300575b600080fd5b6102eb6102e6366004613320565b61079a565b60405190151581526020015b60405180910390f35b620697805b60405165ffffffffffff90911681526020016102f7565b6103246107ba565b6040516102f7919061333b565b61034461033f366004613394565b6107cb565b6040519081526020016102f7565b610365610360366004613506565b610810565b005b61036561082d565b61036561037d36600461354e565b610843565b61036561039036600461357b565b61085d565b6103446103a336600461359d565b60036020526000908152604090205481565b6103e96103c336600461359d565b600460205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b039384168152929091166020830152016102f7565b61041c61041736600461359d565b610872565b6040516102f79190613606565b61034461043736600461359d565b6000908152600c602052604090206001015490565b61036561045a366004613394565b61092c565b600854610472906001600160a01b031681565b6040516001600160a01b0390911681526020016102f7565b610365610498366004613394565b610958565b61041c6104ab366004613697565b610a37565b6104fd6104be36600461359d565b60066020526000908152604090205467ffffffffffffffff8082169168010000000000000000810490911690600160801b90046001600160801b031683565b6040805167ffffffffffffffff94851681529390921660208401526001600160801b0316908201526060016102f7565b61036561053b36600461359d565b610cde565b61036561054e36600461372a565b610cf2565b610365610561366004613747565b610d06565b61057961057436600461376f565b610d1a565b6040516102f79392919061382f565b600954610472906001600160a01b031681565b6103656105a9366004613394565b610d6e565b600e546001600160a01b0316610472565b6103446105cd36600461372a565b6001600160a01b031660009081526002602052604090205490565b6103446105f636600461372a565b610d89565b610472610dc4565b6102eb610611366004613394565b6000918252600c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610344600b5481565b61034460075481565b610656610dd8565b6040805165ffffffffffff9384168152929091166020830152016102f7565b610344600081565b6106ed61068b36600461359d565b6005602090815260009182526040918290208251606081018452815467ffffffffffffffff80821683526801000000000000000082041693820193909352600160801b9092046001600160801b03169282019290925260019091015460ff1682565b6040516102f792919061388c565b6103656107093660046138cd565b610e2c565b61034461071c36600461359d565b600a6020526000908152604090205481565b610305611059565b6103656110b8565b600d54604080516001600160a01b0383168152600160a01b90920465ffffffffffff166020830152016102f7565b61036561077a366004613394565b611107565b61036561112f565b610344610795366004613983565b611142565b60006107a58261116a565b806107b457506107b4826111a8565b92915050565b60606107c660006111f6565b905090565b600082826040516020016107f29291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405280519060200120905092915050565b600061081b81611203565b61082684848461120d565b5050505050565b600061083881611203565b610840611441565b50565b600061084e81611203565b610858838361144e565b505050565b600061086881611203565b61085883836116a8565b60008181526004602081815260408084208151808301835281546001600160a01b03908116808352600190930154169381019390935281517fe8a3d48500000000000000000000000000000000000000000000000000000000815291516060959394919363e8a3d4859380840193919291908290030181865afa1580156108fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092591908101906139e1565b9392505050565b8161094a57604051631fe1e13d60e11b815260040160405180910390fd5b61095482826116f9565b5050565b811580156109735750600e546001600160a01b038281169116145b15610a2d57600d546001600160a01b03811690600160a01b900465ffffffffffff16811515806109a9575065ffffffffffff8116155b806109bc57504265ffffffffffff821610155b15610a02576040517f19ca5ebb00000000000000000000000000000000000000000000000000000000815265ffffffffffff821660048201526024015b60405180910390fd5b5050600d80547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1690555b610954828261171e565b6060600080875111610a495733610a5d565b86806020019051810190610a5d9190613a32565b9050600060036000610a84886001600160a01b031660009081526002602052604090205490565b81526020019081526020016000205490506000610ab6876001600160a01b031660009081526002602052604090205490565b90508115801590610ae4575080610ae2846001600160a01b031660009081526002602052604090205490565b145b8015610af65750610af660008361176a565b15610c98576000818152600660209081526040808320815160608082018452915467ffffffffffffffff8082168352680100000000000000008083048216848801526001600160801b03600160801b938490048116858801528a89526005885297869020865160a0810188528154808516988201988952928304909316958301959095529190910490951660808601529184526001810154610bc494929383019060ff166007811115610bab57610bab613854565b6007811115610bbc57610bbc613854565b905250611782565b610c5d576000818152600660209081526040918290208251606081018452905467ffffffffffffffff80821683526801000000000000000082041692820192909252600160801b9091046001600160801b0316918101919091528290610c2990611bae565b6040517fe16fa0c60000000000000000000000000000000000000000000000000000000081526004016109f9929190613a4f565b81604051602001610c7f91815260406020820181905260009082015260600190565b6040516020818303038152906040529350505050610cd5565b6040517f0b66d2180000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201526024016109f9565b95945050505050565b6000610ce981611203565b61095482611c1c565b6000610cfd81611203565b61095482611ccc565b6000610d1181611203565b61095482611d38565b6060600080610d5f8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611da892505050565b92509250925093509350939050565b6000610d7981611203565b610d838383611e6e565b50505050565b600060036000610dae846001600160a01b031660009081526002602052604090205490565b8152602001908152602001600020549050919050565b60006107c6600e546001600160a01b031690565b600e54600090600160d01b900465ffffffffffff168015158015610e0457504265ffffffffffff821610155b610e1057600080610e24565b600e54600160a01b900465ffffffffffff16815b915091509091565b600080875111610e3c5733610e50565b86806020019051810190610e509190613a32565b9050600060036000610e77886001600160a01b031660009081526002602052604090205490565b81526020019081526020016000205490506000610ea9876001600160a01b031660009081526002602052604090205490565b9050610eca876001600160a01b031660009081526002602052604090205490565b6001600160a01b03841660009081526002602052604090205414158015610ef75750610ef760008361176a565b15610f39576040517f0b66d2180000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201526024016109f9565b6000818152600660209081526040808320815160608082018452915467ffffffffffffffff8082168352680100000000000000008083048216848801526001600160801b03600160801b938490048116858801528a89526005885297869020865160a0810188528154808516988201988952928304909316958301959095529190910490951660808601529184526001810154610fe994929383019060ff166007811115610bab57610bab613854565b61104e576000818152600660209081526040918290208251606081018452905467ffffffffffffffff80821683526801000000000000000082041692820192909252600160801b9091046001600160801b0316918101919091528290610c2990611bae565b505050505050505050565b600e54600090600160d01b900465ffffffffffff16801515801561108457504265ffffffffffff8216105b61109f57600d54600160d01b900465ffffffffffff166110b2565b600e54600160a01b900465ffffffffffff165b91505090565b600d546001600160a01b03163381146110ff576040517fc22c80220000000000000000000000000000000000000000000000000000000081523360048201526024016109f9565b610840611e88565b8161112557604051631fe1e13d60e11b815260040160405180910390fd5b6109548282611f50565b600061113a81611203565b610840611f75565b604080516001600160a01b0380851660208301528316918101919091526000906060016107f2565b60006001600160e01b031982167f314987860000000000000000000000000000000000000000000000000000000014806107b457506107b482611f80565b60006001600160e01b031982167f9aab004e0000000000000000000000000000000000000000000000000000000014806107b457506301ffc9a760e01b6001600160e01b03198316146107b4565b6060600061092583611fbe565b610840813361201a565b6000611239847ff9e8488f00000000000000000000000000000000000000000000000000000000612088565b61127a576040517f404a13190000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016109f9565b604080516001600160a01b0380871660208301528516918101919091526060016040516020818303038152906040528051906020012090506112f98260000151600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b600003611342578061130e8360000151611bae565b6040517fb9619f580000000000000000000000000000000000000000000000000000000081526004016109f9929190613a4f565b61134d8185856120a4565b6000818152600560209081526040918290208451805182548285015192909501516001600160801b03908116600160801b0267ffffffffffffffff93841668010000000000000000026fffffffffffffffffffffffffffffffff1990971693909216929092179490941716929092178255830151600180830180548694939260ff19909116908360078111156113e5576113e5613854565b0217905550506040516113fa91508390613a68565b6040518091039020817fd8f18dfaf582641f02bc0d91a99cf3be0cbc415f5aabae657dea86184cdff4fc846040516114329190613ab6565b60405180910390a39392505050565b61144c600080612194565b565b61145960008361176a565b6114795760405163f737a13760e01b8152600481018390526024016109f9565b6000828152600560209081526040808320815160a081018352815467ffffffffffffffff808216948301948552680100000000000000008204166060830152600160801b90046001600160801b031660808201529182526001810154919290919083019060ff1660078111156114f1576114f1613854565b600781111561150257611502613854565b905250805190915061154d90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b600003611589576040517f5495099b000000000000000000000000000000000000000000000000000000008152600481018490526024016109f9565b81516115ce90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b6000036115e3578261130e8360000151611bae565b805182516115f1919061227a565b15611604578261130e8360000151611bae565b6000838152600560209081526040918290208451805182548285015192909501516001600160801b03908116600160801b0267ffffffffffffffff93841668010000000000000000026fffffffffffffffffffffffffffffffff1990971693909216929092179490941716929092178255830151600180830180548694939260ff199091169083600781111561169c5761169c613854565b02179055505050505050565b6000828152600a6020526040908190208290555182907f566325d0380c90d3dda6ed34028ff0f22677d1b1a547428b018e7fee7db02e20906116ed9084815260200190565b60405180910390a25050565b6000828152600c602052604090206001015461171481611203565b610d83838361230a565b6001600160a01b0381163314611760576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610858828261237f565b60008181526001830160205260408120541515610925565b6000808260200151600781111561179b5761179b613854565b036117a8575060016107b4565b6001826020015160078111156117c0576117c0613854565b0361185557815161180a90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b61184d84600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b1490506107b4565b60028260200151600781111561186d5761186d613854565b0361188c5750805151825167ffffffffffffffff9081169116146107b4565b6003826020015160078111156118a4576118a4613854565b036118ef57815151835167ffffffffffffffff90811691161480156118e8575081600001516020015167ffffffffffffffff16836020015167ffffffffffffffff16145b90506107b4565b60048260200151600781111561190757611907613854565b0361199d57815161195190600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b61199484600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b101590506107b4565b6005826020015160078111156119b5576119b5613854565b03611a4a5781516119ff90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b611a4284600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b1190506107b4565b600682602001516007811115611a6257611a62613854565b03611af8578151611aac90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b611aef84600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b111590506107b4565b600782602001516007811115611b1057611b10613854565b03611ba5578151611b5a90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b611b9d84600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b1090506107b4565b50600092915050565b6060611bc7826000015167ffffffffffffffff166123c9565b611bde836020015167ffffffffffffffff166123c9565b611bf484604001516001600160801b03166123c9565b604051602001611c0693929190613afe565b6040516020818303038152906040529050919050565b611c2760008261176a565b611c475760405163f737a13760e01b8152600481018290526024016109f9565b611c52600082612469565b506000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1990811682556001918201805490911690556005909252808320838155909101805460ff191690555182917ff8a76d9c3f55eabd1faadf7d8ec1d8d5ee98ee785eadf2cf343f40e11541c2cd91a250565b6000611cd6611059565b611cdf42612475565b611ce99190613b8a565b9050611cf582826124c5565b60405165ffffffffffff821681526001600160a01b038316907f3377dc44241e779dd06afab5b788a35ca5f3b778836e2990bdb26a2a4b2e5ed6906020016116ed565b6000611d4382612543565b611d4c42612475565b611d569190613b8a565b9050611d628282612194565b6040805165ffffffffffff8085168252831660208201527ff1038c18cf84a56e432fdbfaf746924b7ea511dfe03a6506a0ceba4888788d9b910160405180910390a15050565b6008546009546000848152600a60205260408082205490517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03938416602482015260448101919091526060939192839216906323b872dd906064016020604051808303816000875af1158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e569190613ba9565b50611e61858561258b565b9250925092509250925092565b6000611e7a8383612d9b565b90506107b481600b546116a8565b600d546001600160a01b03811690600160a01b900465ffffffffffff16801580611eba57504265ffffffffffff821610155b15611efb576040517f19ca5ebb00000000000000000000000000000000000000000000000000000000815265ffffffffffff821660048201526024016109f9565b611f176000611f12600e546001600160a01b031690565b61237f565b50611f2360008361230a565b5050600d80547fffffffffffff000000000000000000000000000000000000000000000000000016905550565b6000828152600c6020526040902060010154611f6b81611203565b610d83838361237f565b61144c6000806124c5565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806107b457506107b4826111a8565b60608160000180548060200260200160405190810160405280929190818152602001828054801561200e57602002820191906000526020600020905b815481526020019060010190808311611ffa575b50505050509050919050565b6000828152600c602090815260408083206001600160a01b038516845290915290205460ff16610954576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018390526044016109f9565b600061209383612eb7565b801561092557506109258383612eea565b6120af60008461176a565b156120e9576040517ff605b5bb000000000000000000000000000000000000000000000000000000008152600481018490526024016109f9565b6120f4600084612f89565b506040805180820182526001600160a01b03848116808352848216602080850182815260008a8152600483528790209551865490861673ffffffffffffffffffffffffffffffffffffffff199182161787559051600190960180549690951695169490941790925592519283529185917f09436bc9a76164325311f392b1018e238b1d0a54bbd9e5b3bbf0b037eda6b500910160405180910390a3505050565b600e54600160d01b900465ffffffffffff16801561222a574265ffffffffffff8216101561220057600e54600d805479ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160a01b90920465ffffffffffff16600160d01b0291909117905561222a565b6040517f2b1fa2edafe6f7b9e97c1a9e0c3660e645beb2dcaa2d45bdbf9beaf5472e1ec590600090a15b50600e80546001600160a01b0316600160a01b65ffffffffffff9485160279ffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160d01b9290931691909102919091179055565b60006122bf82600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b61230284600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b149392505050565b600082612375576000612325600e546001600160a01b031690565b6001600160a01b03161461234c57604051631fe1e13d60e11b815260040160405180910390fd5b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b6109258383612f95565b60008215801561239c5750600e546001600160a01b038381169116145b156123bf57600e805473ffffffffffffffffffffffffffffffffffffffff191690555b6109258383613043565b606060006123d6836130ca565b600101905060008167ffffffffffffffff8111156123f6576123f66133c4565b6040519080825280601f01601f191660200182016040528015612420576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461242a57509392505050565b600061092583836131ac565b600065ffffffffffff8211156124c1576040517f6dfcc65000000000000000000000000000000000000000000000000000000000815260306004820152602481018390526044016109f9565b5090565b600d8054600160a01b65ffffffffffff84811682027fffffffffffff000000000000000000000000000000000000000000000000000084166001600160a01b03881617179093559004168015610858576040517f8886ebfc4259abdbc16601dd8fb5678e54878f47b3c34836cfc51154a960510990600090a1505050565b60008061254e611059565b90508065ffffffffffff168365ffffffffffff1611612576576125718382613bcb565b610925565b61092565ffffffffffff8416620697806132a6565b606060008061259a818661176a565b6125ba5760405163f737a13760e01b8152600481018690526024016109f9565b60008581526004602090815260408083208151808301835281546001600160a01b039081168252600192830154168185015289855260058452828520835160a081018552815467ffffffffffffffff808216968301968752680100000000000000008204166060830152600160801b90046001600160801b031660808201529384529182015490949383019060ff16600781111561265a5761265a613854565b600781111561266b5761266b613854565b90525060208301519091506001600160a01b0316157f4ecbe871000000000000000000000000000000000000000000000000000000006000826126bd57604051806020016040528060008152506126bf565b885b6007805491925060009190826126d483613bea565b9091555050600754855161272190600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b6000036128615786516040517f9ca33c9e0000000000000000000000000000000000000000000000000000000081529092506001600160a01b03831690639ca33c9e90612772908690600401613606565b6000604051808303816000875af1158015612791573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127b99190810190613c04565b6040805160608082018352600080835260208084018290529284018190528351918201845280825281830181815282850182815260075483526006909452939020905181549351925167ffffffffffffffff9182166fffffffffffffffffffffffffffffffff1990951694909417680100000000000000009190931602919091176001600160801b03908116600160801b9190931602919091179055919b5099509750612b73565b86516040517f28bba5e10000000000000000000000000000000000000000000000000000000081526000906001600160a01b038316906328bba5e1906128ab908b90600401613ab6565b600060405180830381865afa1580156128c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128f09190810190613ce9565b60208101516040517f8eaa6ac0000000000000000000000000000000000000000000000000000000008152600481019190915290915073c0d31d398c5ee86c5f8a23fa253ee8a586da03ce908190638eaa6ac090602401602060405180830381865afa158015612964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129889190613a32565b94506001600160a01b0385166129b957816020015160405163f737a13760e01b81526004016109f991815260200190565b6040517f9ca33c9e0000000000000000000000000000000000000000000000000000000081526001600160a01b03861690639ca33c9e906129fe908990600401613606565b6000604051808303816000875af1158015612a1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a459190810190613c04565b905050809d5050826001600160a01b03166386019a3f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aae9190613db6565b9b50612af78260000151600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b9151600754600090815260066020908152604091829020835181549285015193909401516001600160801b03908116600160801b0267ffffffffffffffff94851668010000000000000000026fffffffffffffffffffffffffffffffff1990941694909516939093179190911791909116919091179055509850505b8415612cd65760008088602001516001600160a01b0316868d8f604051602401612b9e929190613dcf565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051612bf19190613df4565b600060405180830381855af49150503d8060008114612c2c576040519150601f19603f3d011682016040523d82523d6000602084013e612c31565b606091505b509150915081612cd357805115612c4b5780518082602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f696e697469616c697a65722064656c656761746563616c6c206661696c65642060448201527f776974686f75742072657665727420726561736f6e000000000000000000000060648201526084016109f9565b50505b895160005b81811015612d4f5782600260008e8481518110612cfa57612cfa613e10565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508d600360008581526020019081526020016000208190555080612d4890613bea565b9050612cdb565b505087818d7fb1a4a6f5e0cc926c0f33c83ca6e5187edc8d9719645709413ffb187e49483eeb8d8f604051612d85929190613dcf565b60405180910390a4505050505050509250925092565b60008073c0d31d398c5ee86c5f8a23fa253ee8a586da03ce6040517f8eaa6ac0000000000000000000000000000000000000000000000000000000008152600481018690529091506000906001600160a01b03831690638eaa6ac090602401602060405180830381865afa158015612e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3b9190613a32565b90506001600160a01b038116612e675760405163f737a13760e01b8152600481018690526024016109f9565b8484604051602001612e8c9291909182526001600160a01b0316602082015260400190565b604051602081830303815290604052805190602001209250612eaf8382866120a4565b505092915050565b6000612eca826301ffc9a760e01b612eea565b80156107b45750612ee3826001600160e01b0319612eea565b1592915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825192935060009283928392909183918a617530fa92503d91506000519050828015612f72575060208210155b8015612f7e5750600081115b979650505050505050565b600061092583836132bc565b6000828152600c602090815260408083206001600160a01b038516845290915281205460ff1661303b576000838152600c602090815260408083206001600160a01b03861684529091529020805460ff19166001179055612ff33390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016107b4565b5060006107b4565b6000828152600c602090815260408083206001600160a01b038516845290915281205460ff161561303b576000838152600c602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016107b4565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613113577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061313f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061315d57662386f26fc10000830492506010015b6305f5e1008310613175576305f5e100830492506008015b612710831061318957612710830492506004015b6064831061319b576064830492506002015b600a83106107b45760010192915050565b600081815260018301602052604081205480156132955760006131d0600183613e26565b85549091506000906131e490600190613e26565b905080821461324957600086600001828154811061320457613204613e10565b906000526020600020015490508087600001848154811061322757613227613e10565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061325a5761325a613e39565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107b4565b60009150506107b4565b5092915050565b60008183106132b55781610925565b5090919050565b600081815260018301602052604081205461303b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107b4565b80356001600160e01b03198116811461331b57600080fd5b919050565b60006020828403121561333257600080fd5b61092582613303565b6020808252825182820181905260009190848201906040850190845b8181101561337357835183529284019291840191600101613357565b50909695505050505050565b6001600160a01b038116811461084057600080fd5b600080604083850312156133a757600080fd5b8235915060208301356133b98161337f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156133fd576133fd6133c4565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561342c5761342c6133c4565b604052919050565b67ffffffffffffffff8116811461084057600080fd5b6001600160801b038116811461084057600080fd5b6000818303608081121561347257600080fd5b6040516040810181811067ffffffffffffffff82111715613495576134956133c4565b60405291508160608212156134a957600080fd5b6134b16133da565b915083356134be81613434565b825260208401356134ce81613434565b602083015260408401356134e18161344a565b6040830152908152606083013590600882106134fc57600080fd5b6020015292915050565b600080600060c0848603121561351b57600080fd5b83356135268161337f565b925060208401356135368161337f565b9150613545856040860161345f565b90509250925092565b60008060a0838503121561356157600080fd5b82359150613572846020850161345f565b90509250929050565b6000806040838503121561358e57600080fd5b50508035926020909101359150565b6000602082840312156135af57600080fd5b5035919050565b60005b838110156135d15781810151838201526020016135b9565b50506000910152565b600081518084526135f28160208601602086016135b6565b601f01601f19169290920160200192915050565b60208152600061092560208301846135da565b600067ffffffffffffffff821115613633576136336133c4565b50601f01601f191660200190565b600082601f83011261365257600080fd5b813561366561366082613619565b613403565b81815284602083860101111561367a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156136af57600080fd5b853567ffffffffffffffff808211156136c757600080fd5b6136d389838a01613641565b96506136e160208901613303565b9550604088013591506136f38261337f565b909350606087013592506080870135908082111561371057600080fd5b5061371d88828901613641565b9150509295509295909350565b60006020828403121561373c57600080fd5b81356109258161337f565b60006020828403121561375957600080fd5b813565ffffffffffff8116811461092557600080fd5b60008060006040848603121561378457600080fd5b83359250602084013567ffffffffffffffff808211156137a357600080fd5b818601915086601f8301126137b757600080fd5b8135818111156137c657600080fd5b8760208285010111156137d857600080fd5b6020830194508093505050509250925092565b600081518084526020808501945080840160005b838110156138245781516001600160a01b0316875295820195908201906001016137ff565b509495945050505050565b60608152600061384260608301866137eb565b60208301949094525060400152919050565b634e487b7160e01b600052602160045260246000fd5b6008811061388857634e487b7160e01b600052602160045260246000fd5b9052565b825167ffffffffffffffff9081168252602080850151909116908201526040808401516001600160801b03169082015260808101610925606083018461386a565b60008060008060008060c087890312156138e657600080fd5b863567ffffffffffffffff808211156138fe57600080fd5b61390a8a838b01613641565b975061391860208a01613303565b96506040890135915061392a8261337f565b909450606088013593506080880135908082111561394757600080fd5b6139538a838b01613641565b935060a089013591508082111561396957600080fd5b5061397689828a01613641565b9150509295509295509295565b6000806040838503121561399657600080fd5b82356139a18161337f565b915060208301356133b98161337f565b60006139bf61366084613619565b90508281528383830111156139d357600080fd5b6109258360208301846135b6565b6000602082840312156139f357600080fd5b815167ffffffffffffffff811115613a0a57600080fd5b8201601f81018413613a1b57600080fd5b613a2a848251602084016139b1565b949350505050565b600060208284031215613a4457600080fd5b81516109258161337f565b828152604060208201526000613a2a60408301846135da565b6000825167ffffffffffffffff808251168452806020830151166020850152506001600160801b03604082015116604084015250613aad60608301602085015161386a565b50608001919050565b8151805167ffffffffffffffff9081168352602080830151909116908301526040908101516001600160801b03169082015260808101602083015161329f606084018261386a565b60008451613b108184602089016135b6565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551613b4c816001850160208a016135b6565b60019201918201528351613b678160028401602088016135b6565b0160020195945050505050565b634e487b7160e01b600052601160045260246000fd5b65ffffffffffff81811683821601908082111561329f5761329f613b74565b600060208284031215613bbb57600080fd5b8151801515811461092557600080fd5b65ffffffffffff82811682821603908082111561329f5761329f613b74565b60006000198203613bfd57613bfd613b74565b5060010190565b600080600060608486031215613c1957600080fd5b835167ffffffffffffffff80821115613c3157600080fd5b818601915086601f830112613c4557600080fd5b8151602082821115613c5957613c596133c4565b8160051b9250613c6a818401613403565b828152928401810192818101908a851115613c8457600080fd5b948201945b84861015613cae5785519350613c9e8461337f565b8382529482019490820190613c89565b91890151604090990151919a98995090979650505050505050565b600082601f830112613cda57600080fd5b610925838351602085016139b1565b600060208284031215613cfb57600080fd5b815167ffffffffffffffff80821115613d1357600080fd5b9083019081850360a0811215613d2857600080fd5b613d306133da565b6060821215613d3e57600080fd5b613d466133da565b91508351613d5381613434565b82526020840151613d6381613434565b60208301526040840151613d768161344a565b60408301529081526060830151602082015260808301519082821115613d9b57600080fd5b613da787838601613cc9565b60408201529695505050505050565b600060208284031215613dc857600080fd5b5051919050565b604081526000613de260408301856137eb565b8281036020840152610cd581856135da565b60008251613e068184602087016135b6565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b818103818111156107b4576107b4613b74565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ecc8c74864e6199d110ecf9f87b31cf0a06719d8c5f8533f79e14f3fb49da31964736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c80637591b0c211610186578063a1eda53c116100e3578063cc8463c811610097578063d547741f11610071578063d547741f1461076c578063d602b9fd1461077f578063f8f69e901461078757600080fd5b8063cc8463c81461072e578063cefc142914610736578063cf6eefb71461073e57600080fd5b8063b9ebf395116100c8578063b9ebf3951461067d578063c3e9576a146106fb578063c66670f11461070e57600080fd5b8063a1eda53c1461064e578063a217fddf1461067557600080fd5b8063894785611161013a57806391d148541161011f57806391d1485414610603578063921e1d1b1461063c57806399aa65a71461064557600080fd5b806389478561146105e85780638da5cb5b146105fb57600080fd5b8063834c4b7e1161016b578063834c4b7e1461059b57806384ef8ffc146105ae5780638740ce05146105bf57600080fd5b80637591b0c214610566578063828cedb71461058857600080fd5b80632343b000116102345780634440d245116101e8578063584ed12c116101cd578063584ed12c1461052d578063634e93da14610540578063649a5ec71461055357600080fd5b80634440d2451461049d5780634587af5e146104b057600080fd5b80632f2ff15d116102195780632f2ff15d1461044c5780633013ce291461045f57806336568abe1461048a57600080fd5b80632343b00014610409578063248a9ca31461042957600080fd5b80630aa6220b1161028b578063130238711161027057806313023871146103825780631a0bba04146103955780631bc82e65146103b557600080fd5b80630aa6220b14610367578063128ecd1e1461036f57600080fd5b806302aa6318116102bc57806302aa63181461031c57806303ac23c71461033157806309587fbc1461035257600080fd5b806301ffc9a7146102d8578063022d63fb14610300575b600080fd5b6102eb6102e6366004613320565b61079a565b60405190151581526020015b60405180910390f35b620697805b60405165ffffffffffff90911681526020016102f7565b6103246107ba565b6040516102f7919061333b565b61034461033f366004613394565b6107cb565b6040519081526020016102f7565b610365610360366004613506565b610810565b005b61036561082d565b61036561037d36600461354e565b610843565b61036561039036600461357b565b61085d565b6103446103a336600461359d565b60036020526000908152604090205481565b6103e96103c336600461359d565b600460205260009081526040902080546001909101546001600160a01b03918216911682565b604080516001600160a01b039384168152929091166020830152016102f7565b61041c61041736600461359d565b610872565b6040516102f79190613606565b61034461043736600461359d565b6000908152600c602052604090206001015490565b61036561045a366004613394565b61092c565b600854610472906001600160a01b031681565b6040516001600160a01b0390911681526020016102f7565b610365610498366004613394565b610958565b61041c6104ab366004613697565b610a37565b6104fd6104be36600461359d565b60066020526000908152604090205467ffffffffffffffff8082169168010000000000000000810490911690600160801b90046001600160801b031683565b6040805167ffffffffffffffff94851681529390921660208401526001600160801b0316908201526060016102f7565b61036561053b36600461359d565b610cde565b61036561054e36600461372a565b610cf2565b610365610561366004613747565b610d06565b61057961057436600461376f565b610d1a565b6040516102f79392919061382f565b600954610472906001600160a01b031681565b6103656105a9366004613394565b610d6e565b600e546001600160a01b0316610472565b6103446105cd36600461372a565b6001600160a01b031660009081526002602052604090205490565b6103446105f636600461372a565b610d89565b610472610dc4565b6102eb610611366004613394565b6000918252600c602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610344600b5481565b61034460075481565b610656610dd8565b6040805165ffffffffffff9384168152929091166020830152016102f7565b610344600081565b6106ed61068b36600461359d565b6005602090815260009182526040918290208251606081018452815467ffffffffffffffff80821683526801000000000000000082041693820193909352600160801b9092046001600160801b03169282019290925260019091015460ff1682565b6040516102f792919061388c565b6103656107093660046138cd565b610e2c565b61034461071c36600461359d565b600a6020526000908152604090205481565b610305611059565b6103656110b8565b600d54604080516001600160a01b0383168152600160a01b90920465ffffffffffff166020830152016102f7565b61036561077a366004613394565b611107565b61036561112f565b610344610795366004613983565b611142565b60006107a58261116a565b806107b457506107b4826111a8565b92915050565b60606107c660006111f6565b905090565b600082826040516020016107f29291909182526001600160a01b0316602082015260400190565b60405160208183030381529060405280519060200120905092915050565b600061081b81611203565b61082684848461120d565b5050505050565b600061083881611203565b610840611441565b50565b600061084e81611203565b610858838361144e565b505050565b600061086881611203565b61085883836116a8565b60008181526004602081815260408084208151808301835281546001600160a01b03908116808352600190930154169381019390935281517fe8a3d48500000000000000000000000000000000000000000000000000000000815291516060959394919363e8a3d4859380840193919291908290030181865afa1580156108fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261092591908101906139e1565b9392505050565b8161094a57604051631fe1e13d60e11b815260040160405180910390fd5b61095482826116f9565b5050565b811580156109735750600e546001600160a01b038281169116145b15610a2d57600d546001600160a01b03811690600160a01b900465ffffffffffff16811515806109a9575065ffffffffffff8116155b806109bc57504265ffffffffffff821610155b15610a02576040517f19ca5ebb00000000000000000000000000000000000000000000000000000000815265ffffffffffff821660048201526024015b60405180910390fd5b5050600d80547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff1690555b610954828261171e565b6060600080875111610a495733610a5d565b86806020019051810190610a5d9190613a32565b9050600060036000610a84886001600160a01b031660009081526002602052604090205490565b81526020019081526020016000205490506000610ab6876001600160a01b031660009081526002602052604090205490565b90508115801590610ae4575080610ae2846001600160a01b031660009081526002602052604090205490565b145b8015610af65750610af660008361176a565b15610c98576000818152600660209081526040808320815160608082018452915467ffffffffffffffff8082168352680100000000000000008083048216848801526001600160801b03600160801b938490048116858801528a89526005885297869020865160a0810188528154808516988201988952928304909316958301959095529190910490951660808601529184526001810154610bc494929383019060ff166007811115610bab57610bab613854565b6007811115610bbc57610bbc613854565b905250611782565b610c5d576000818152600660209081526040918290208251606081018452905467ffffffffffffffff80821683526801000000000000000082041692820192909252600160801b9091046001600160801b0316918101919091528290610c2990611bae565b6040517fe16fa0c60000000000000000000000000000000000000000000000000000000081526004016109f9929190613a4f565b81604051602001610c7f91815260406020820181905260009082015260600190565b6040516020818303038152906040529350505050610cd5565b6040517f0b66d2180000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201526024016109f9565b95945050505050565b6000610ce981611203565b61095482611c1c565b6000610cfd81611203565b61095482611ccc565b6000610d1181611203565b61095482611d38565b6060600080610d5f8686868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611da892505050565b92509250925093509350939050565b6000610d7981611203565b610d838383611e6e565b50505050565b600060036000610dae846001600160a01b031660009081526002602052604090205490565b8152602001908152602001600020549050919050565b60006107c6600e546001600160a01b031690565b600e54600090600160d01b900465ffffffffffff168015158015610e0457504265ffffffffffff821610155b610e1057600080610e24565b600e54600160a01b900465ffffffffffff16815b915091509091565b600080875111610e3c5733610e50565b86806020019051810190610e509190613a32565b9050600060036000610e77886001600160a01b031660009081526002602052604090205490565b81526020019081526020016000205490506000610ea9876001600160a01b031660009081526002602052604090205490565b9050610eca876001600160a01b031660009081526002602052604090205490565b6001600160a01b03841660009081526002602052604090205414158015610ef75750610ef760008361176a565b15610f39576040517f0b66d2180000000000000000000000000000000000000000000000000000000081526001600160a01b03881660048201526024016109f9565b6000818152600660209081526040808320815160608082018452915467ffffffffffffffff8082168352680100000000000000008083048216848801526001600160801b03600160801b938490048116858801528a89526005885297869020865160a0810188528154808516988201988952928304909316958301959095529190910490951660808601529184526001810154610fe994929383019060ff166007811115610bab57610bab613854565b61104e576000818152600660209081526040918290208251606081018452905467ffffffffffffffff80821683526801000000000000000082041692820192909252600160801b9091046001600160801b0316918101919091528290610c2990611bae565b505050505050505050565b600e54600090600160d01b900465ffffffffffff16801515801561108457504265ffffffffffff8216105b61109f57600d54600160d01b900465ffffffffffff166110b2565b600e54600160a01b900465ffffffffffff165b91505090565b600d546001600160a01b03163381146110ff576040517fc22c80220000000000000000000000000000000000000000000000000000000081523360048201526024016109f9565b610840611e88565b8161112557604051631fe1e13d60e11b815260040160405180910390fd5b6109548282611f50565b600061113a81611203565b610840611f75565b604080516001600160a01b0380851660208301528316918101919091526000906060016107f2565b60006001600160e01b031982167f314987860000000000000000000000000000000000000000000000000000000014806107b457506107b482611f80565b60006001600160e01b031982167f9aab004e0000000000000000000000000000000000000000000000000000000014806107b457506301ffc9a760e01b6001600160e01b03198316146107b4565b6060600061092583611fbe565b610840813361201a565b6000611239847ff9e8488f00000000000000000000000000000000000000000000000000000000612088565b61127a576040517f404a13190000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016109f9565b604080516001600160a01b0380871660208301528516918101919091526060016040516020818303038152906040528051906020012090506112f98260000151600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b600003611342578061130e8360000151611bae565b6040517fb9619f580000000000000000000000000000000000000000000000000000000081526004016109f9929190613a4f565b61134d8185856120a4565b6000818152600560209081526040918290208451805182548285015192909501516001600160801b03908116600160801b0267ffffffffffffffff93841668010000000000000000026fffffffffffffffffffffffffffffffff1990971693909216929092179490941716929092178255830151600180830180548694939260ff19909116908360078111156113e5576113e5613854565b0217905550506040516113fa91508390613a68565b6040518091039020817fd8f18dfaf582641f02bc0d91a99cf3be0cbc415f5aabae657dea86184cdff4fc846040516114329190613ab6565b60405180910390a39392505050565b61144c600080612194565b565b61145960008361176a565b6114795760405163f737a13760e01b8152600481018390526024016109f9565b6000828152600560209081526040808320815160a081018352815467ffffffffffffffff808216948301948552680100000000000000008204166060830152600160801b90046001600160801b031660808201529182526001810154919290919083019060ff1660078111156114f1576114f1613854565b600781111561150257611502613854565b905250805190915061154d90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b600003611589576040517f5495099b000000000000000000000000000000000000000000000000000000008152600481018490526024016109f9565b81516115ce90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b6000036115e3578261130e8360000151611bae565b805182516115f1919061227a565b15611604578261130e8360000151611bae565b6000838152600560209081526040918290208451805182548285015192909501516001600160801b03908116600160801b0267ffffffffffffffff93841668010000000000000000026fffffffffffffffffffffffffffffffff1990971693909216929092179490941716929092178255830151600180830180548694939260ff199091169083600781111561169c5761169c613854565b02179055505050505050565b6000828152600a6020526040908190208290555182907f566325d0380c90d3dda6ed34028ff0f22677d1b1a547428b018e7fee7db02e20906116ed9084815260200190565b60405180910390a25050565b6000828152600c602052604090206001015461171481611203565b610d83838361230a565b6001600160a01b0381163314611760576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610858828261237f565b60008181526001830160205260408120541515610925565b6000808260200151600781111561179b5761179b613854565b036117a8575060016107b4565b6001826020015160078111156117c0576117c0613854565b0361185557815161180a90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b61184d84600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b1490506107b4565b60028260200151600781111561186d5761186d613854565b0361188c5750805151825167ffffffffffffffff9081169116146107b4565b6003826020015160078111156118a4576118a4613854565b036118ef57815151835167ffffffffffffffff90811691161480156118e8575081600001516020015167ffffffffffffffff16836020015167ffffffffffffffff16145b90506107b4565b60048260200151600781111561190757611907613854565b0361199d57815161195190600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b61199484600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b101590506107b4565b6005826020015160078111156119b5576119b5613854565b03611a4a5781516119ff90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b611a4284600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b1190506107b4565b600682602001516007811115611a6257611a62613854565b03611af8578151611aac90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b611aef84600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b111590506107b4565b600782602001516007811115611b1057611b10613854565b03611ba5578151611b5a90600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b611b9d84600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b1090506107b4565b50600092915050565b6060611bc7826000015167ffffffffffffffff166123c9565b611bde836020015167ffffffffffffffff166123c9565b611bf484604001516001600160801b03166123c9565b604051602001611c0693929190613afe565b6040516020818303038152906040529050919050565b611c2760008261176a565b611c475760405163f737a13760e01b8152600481018290526024016109f9565b611c52600082612469565b506000818152600460209081526040808320805473ffffffffffffffffffffffffffffffffffffffff1990811682556001918201805490911690556005909252808320838155909101805460ff191690555182917ff8a76d9c3f55eabd1faadf7d8ec1d8d5ee98ee785eadf2cf343f40e11541c2cd91a250565b6000611cd6611059565b611cdf42612475565b611ce99190613b8a565b9050611cf582826124c5565b60405165ffffffffffff821681526001600160a01b038316907f3377dc44241e779dd06afab5b788a35ca5f3b778836e2990bdb26a2a4b2e5ed6906020016116ed565b6000611d4382612543565b611d4c42612475565b611d569190613b8a565b9050611d628282612194565b6040805165ffffffffffff8085168252831660208201527ff1038c18cf84a56e432fdbfaf746924b7ea511dfe03a6506a0ceba4888788d9b910160405180910390a15050565b6008546009546000848152600a60205260408082205490517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03938416602482015260448101919091526060939192839216906323b872dd906064016020604051808303816000875af1158015611e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e569190613ba9565b50611e61858561258b565b9250925092509250925092565b6000611e7a8383612d9b565b90506107b481600b546116a8565b600d546001600160a01b03811690600160a01b900465ffffffffffff16801580611eba57504265ffffffffffff821610155b15611efb576040517f19ca5ebb00000000000000000000000000000000000000000000000000000000815265ffffffffffff821660048201526024016109f9565b611f176000611f12600e546001600160a01b031690565b61237f565b50611f2360008361230a565b5050600d80547fffffffffffff000000000000000000000000000000000000000000000000000016905550565b6000828152600c6020526040902060010154611f6b81611203565b610d83838361237f565b61144c6000806124c5565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806107b457506107b4826111a8565b60608160000180548060200260200160405190810160405280929190818152602001828054801561200e57602002820191906000526020600020905b815481526020019060010190808311611ffa575b50505050509050919050565b6000828152600c602090815260408083206001600160a01b038516845290915290205460ff16610954576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018390526044016109f9565b600061209383612eb7565b801561092557506109258383612eea565b6120af60008461176a565b156120e9576040517ff605b5bb000000000000000000000000000000000000000000000000000000008152600481018490526024016109f9565b6120f4600084612f89565b506040805180820182526001600160a01b03848116808352848216602080850182815260008a8152600483528790209551865490861673ffffffffffffffffffffffffffffffffffffffff199182161787559051600190960180549690951695169490941790925592519283529185917f09436bc9a76164325311f392b1018e238b1d0a54bbd9e5b3bbf0b037eda6b500910160405180910390a3505050565b600e54600160d01b900465ffffffffffff16801561222a574265ffffffffffff8216101561220057600e54600d805479ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160a01b90920465ffffffffffff16600160d01b0291909117905561222a565b6040517f2b1fa2edafe6f7b9e97c1a9e0c3660e645beb2dcaa2d45bdbf9beaf5472e1ec590600090a15b50600e80546001600160a01b0316600160a01b65ffffffffffff9485160279ffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160d01b9290931691909102919091179055565b60006122bf82600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b61230284600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b149392505050565b600082612375576000612325600e546001600160a01b031690565b6001600160a01b03161461234c57604051631fe1e13d60e11b815260040160405180910390fd5b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790555b6109258383612f95565b60008215801561239c5750600e546001600160a01b038381169116145b156123bf57600e805473ffffffffffffffffffffffffffffffffffffffff191690555b6109258383613043565b606060006123d6836130ca565b600101905060008167ffffffffffffffff8111156123f6576123f66133c4565b6040519080825280601f01601f191660200182016040528015612420576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a850494508461242a57509392505050565b600061092583836131ac565b600065ffffffffffff8211156124c1576040517f6dfcc65000000000000000000000000000000000000000000000000000000000815260306004820152602481018390526044016109f9565b5090565b600d8054600160a01b65ffffffffffff84811682027fffffffffffff000000000000000000000000000000000000000000000000000084166001600160a01b03881617179093559004168015610858576040517f8886ebfc4259abdbc16601dd8fb5678e54878f47b3c34836cfc51154a960510990600090a1505050565b60008061254e611059565b90508065ffffffffffff168365ffffffffffff1611612576576125718382613bcb565b610925565b61092565ffffffffffff8416620697806132a6565b606060008061259a818661176a565b6125ba5760405163f737a13760e01b8152600481018690526024016109f9565b60008581526004602090815260408083208151808301835281546001600160a01b039081168252600192830154168185015289855260058452828520835160a081018552815467ffffffffffffffff808216968301968752680100000000000000008204166060830152600160801b90046001600160801b031660808201529384529182015490949383019060ff16600781111561265a5761265a613854565b600781111561266b5761266b613854565b90525060208301519091506001600160a01b0316157f4ecbe871000000000000000000000000000000000000000000000000000000006000826126bd57604051806020016040528060008152506126bf565b885b6007805491925060009190826126d483613bea565b9091555050600754855161272190600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b6000036128615786516040517f9ca33c9e0000000000000000000000000000000000000000000000000000000081529092506001600160a01b03831690639ca33c9e90612772908690600401613606565b6000604051808303816000875af1158015612791573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127b99190810190613c04565b6040805160608082018352600080835260208084018290529284018190528351918201845280825281830181815282850182815260075483526006909452939020905181549351925167ffffffffffffffff9182166fffffffffffffffffffffffffffffffff1990951694909417680100000000000000009190931602919091176001600160801b03908116600160801b9190931602919091179055919b5099509750612b73565b86516040517f28bba5e10000000000000000000000000000000000000000000000000000000081526000906001600160a01b038316906328bba5e1906128ab908b90600401613ab6565b600060405180830381865afa1580156128c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128f09190810190613ce9565b60208101516040517f8eaa6ac0000000000000000000000000000000000000000000000000000000008152600481019190915290915073c0d31d398c5ee86c5f8a23fa253ee8a586da03ce908190638eaa6ac090602401602060405180830381865afa158015612964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129889190613a32565b94506001600160a01b0385166129b957816020015160405163f737a13760e01b81526004016109f991815260200190565b6040517f9ca33c9e0000000000000000000000000000000000000000000000000000000081526001600160a01b03861690639ca33c9e906129fe908990600401613606565b6000604051808303816000875af1158015612a1d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612a459190810190613c04565b905050809d5050826001600160a01b03166386019a3f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aae9190613db6565b9b50612af78260000151600081604001516001600160801b03166080836020015167ffffffffffffffff16901b60c0846000015167ffffffffffffffff16901b17179050919050565b9151600754600090815260066020908152604091829020835181549285015193909401516001600160801b03908116600160801b0267ffffffffffffffff94851668010000000000000000026fffffffffffffffffffffffffffffffff1990941694909516939093179190911791909116919091179055509850505b8415612cd65760008088602001516001600160a01b0316868d8f604051602401612b9e929190613dcf565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051612bf19190613df4565b600060405180830381855af49150503d8060008114612c2c576040519150601f19603f3d011682016040523d82523d6000602084013e612c31565b606091505b509150915081612cd357805115612c4b5780518082602001fd5b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603560248201527f696e697469616c697a65722064656c656761746563616c6c206661696c65642060448201527f776974686f75742072657665727420726561736f6e000000000000000000000060648201526084016109f9565b50505b895160005b81811015612d4f5782600260008e8481518110612cfa57612cfa613e10565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508d600360008581526020019081526020016000208190555080612d4890613bea565b9050612cdb565b505087818d7fb1a4a6f5e0cc926c0f33c83ca6e5187edc8d9719645709413ffb187e49483eeb8d8f604051612d85929190613dcf565b60405180910390a4505050505050509250925092565b60008073c0d31d398c5ee86c5f8a23fa253ee8a586da03ce6040517f8eaa6ac0000000000000000000000000000000000000000000000000000000008152600481018690529091506000906001600160a01b03831690638eaa6ac090602401602060405180830381865afa158015612e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e3b9190613a32565b90506001600160a01b038116612e675760405163f737a13760e01b8152600481018690526024016109f9565b8484604051602001612e8c9291909182526001600160a01b0316602082015260400190565b604051602081830303815290604052805190602001209250612eaf8382866120a4565b505092915050565b6000612eca826301ffc9a760e01b612eea565b80156107b45750612ee3826001600160e01b0319612eea565b1592915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166301ffc9a760e01b178152825192935060009283928392909183918a617530fa92503d91506000519050828015612f72575060208210155b8015612f7e5750600081115b979650505050505050565b600061092583836132bc565b6000828152600c602090815260408083206001600160a01b038516845290915281205460ff1661303b576000838152600c602090815260408083206001600160a01b03861684529091529020805460ff19166001179055612ff33390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45060016107b4565b5060006107b4565b6000828152600c602090815260408083206001600160a01b038516845290915281205460ff161561303b576000838152600c602090815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45060016107b4565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613113577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef8100000000831061313f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061315d57662386f26fc10000830492506010015b6305f5e1008310613175576305f5e100830492506008015b612710831061318957612710830492506004015b6064831061319b576064830492506002015b600a83106107b45760010192915050565b600081815260018301602052604081205480156132955760006131d0600183613e26565b85549091506000906131e490600190613e26565b905080821461324957600086600001828154811061320457613204613e10565b906000526020600020015490508087600001848154811061322757613227613e10565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061325a5761325a613e39565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506107b4565b60009150506107b4565b5092915050565b60008183106132b55781610925565b5090919050565b600081815260018301602052604081205461303b575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107b4565b80356001600160e01b03198116811461331b57600080fd5b919050565b60006020828403121561333257600080fd5b61092582613303565b6020808252825182820181905260009190848201906040850190845b8181101561337357835183529284019291840191600101613357565b50909695505050505050565b6001600160a01b038116811461084057600080fd5b600080604083850312156133a757600080fd5b8235915060208301356133b98161337f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156133fd576133fd6133c4565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561342c5761342c6133c4565b604052919050565b67ffffffffffffffff8116811461084057600080fd5b6001600160801b038116811461084057600080fd5b6000818303608081121561347257600080fd5b6040516040810181811067ffffffffffffffff82111715613495576134956133c4565b60405291508160608212156134a957600080fd5b6134b16133da565b915083356134be81613434565b825260208401356134ce81613434565b602083015260408401356134e18161344a565b6040830152908152606083013590600882106134fc57600080fd5b6020015292915050565b600080600060c0848603121561351b57600080fd5b83356135268161337f565b925060208401356135368161337f565b9150613545856040860161345f565b90509250925092565b60008060a0838503121561356157600080fd5b82359150613572846020850161345f565b90509250929050565b6000806040838503121561358e57600080fd5b50508035926020909101359150565b6000602082840312156135af57600080fd5b5035919050565b60005b838110156135d15781810151838201526020016135b9565b50506000910152565b600081518084526135f28160208601602086016135b6565b601f01601f19169290920160200192915050565b60208152600061092560208301846135da565b600067ffffffffffffffff821115613633576136336133c4565b50601f01601f191660200190565b600082601f83011261365257600080fd5b813561366561366082613619565b613403565b81815284602083860101111561367a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156136af57600080fd5b853567ffffffffffffffff808211156136c757600080fd5b6136d389838a01613641565b96506136e160208901613303565b9550604088013591506136f38261337f565b909350606087013592506080870135908082111561371057600080fd5b5061371d88828901613641565b9150509295509295909350565b60006020828403121561373c57600080fd5b81356109258161337f565b60006020828403121561375957600080fd5b813565ffffffffffff8116811461092557600080fd5b60008060006040848603121561378457600080fd5b83359250602084013567ffffffffffffffff808211156137a357600080fd5b818601915086601f8301126137b757600080fd5b8135818111156137c657600080fd5b8760208285010111156137d857600080fd5b6020830194508093505050509250925092565b600081518084526020808501945080840160005b838110156138245781516001600160a01b0316875295820195908201906001016137ff565b509495945050505050565b60608152600061384260608301866137eb565b60208301949094525060400152919050565b634e487b7160e01b600052602160045260246000fd5b6008811061388857634e487b7160e01b600052602160045260246000fd5b9052565b825167ffffffffffffffff9081168252602080850151909116908201526040808401516001600160801b03169082015260808101610925606083018461386a565b60008060008060008060c087890312156138e657600080fd5b863567ffffffffffffffff808211156138fe57600080fd5b61390a8a838b01613641565b975061391860208a01613303565b96506040890135915061392a8261337f565b909450606088013593506080880135908082111561394757600080fd5b6139538a838b01613641565b935060a089013591508082111561396957600080fd5b5061397689828a01613641565b9150509295509295509295565b6000806040838503121561399657600080fd5b82356139a18161337f565b915060208301356133b98161337f565b60006139bf61366084613619565b90508281528383830111156139d357600080fd5b6109258360208301846135b6565b6000602082840312156139f357600080fd5b815167ffffffffffffffff811115613a0a57600080fd5b8201601f81018413613a1b57600080fd5b613a2a848251602084016139b1565b949350505050565b600060208284031215613a4457600080fd5b81516109258161337f565b828152604060208201526000613a2a60408301846135da565b6000825167ffffffffffffffff808251168452806020830151166020850152506001600160801b03604082015116604084015250613aad60608301602085015161386a565b50608001919050565b8151805167ffffffffffffffff9081168352602080830151909116908301526040908101516001600160801b03169082015260808101602083015161329f606084018261386a565b60008451613b108184602089016135b6565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551613b4c816001850160208a016135b6565b60019201918201528351613b678160028401602088016135b6565b0160020195945050505050565b634e487b7160e01b600052601160045260246000fd5b65ffffffffffff81811683821601908082111561329f5761329f613b74565b600060208284031215613bbb57600080fd5b8151801515811461092557600080fd5b65ffffffffffff82811682821603908082111561329f5761329f613b74565b60006000198203613bfd57613bfd613b74565b5060010190565b600080600060608486031215613c1957600080fd5b835167ffffffffffffffff80821115613c3157600080fd5b818601915086601f830112613c4557600080fd5b8151602082821115613c5957613c596133c4565b8160051b9250613c6a818401613403565b828152928401810192818101908a851115613c8457600080fd5b948201945b84861015613cae5785519350613c9e8461337f565b8382529482019490820190613c89565b91890151604090990151919a98995090979650505050505050565b600082601f830112613cda57600080fd5b610925838351602085016139b1565b600060208284031215613cfb57600080fd5b815167ffffffffffffffff80821115613d1357600080fd5b9083019081850360a0811215613d2857600080fd5b613d306133da565b6060821215613d3e57600080fd5b613d466133da565b91508351613d5381613434565b82526020840151613d6381613434565b60208301526040840151613d768161344a565b60408301529081526060830151602082015260808301519082821115613d9b57600080fd5b613da787838601613cc9565b60408201529695505050505050565b600060208284031215613dc857600080fd5b5051919050565b604081526000613de260408301856137eb565b8281036020840152610cd581856135da565b60008251613e068184602087016135b6565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b818103818111156107b4576107b4613b74565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ecc8c74864e6199d110ecf9f87b31cf0a06719d8c5f8533f79e14f3fb49da31964736f6c63430008140033",
  "devdoc": {
    "author": "Peeramid Labs, 2024",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlEnforcedDefaultAdminDelay(uint48)": [
        {
          "details": "The delay for transferring the default admin delay is enforced and the operation must wait until `schedule`. NOTE: `schedule` can be 0 indicating there's no transfer scheduled."
        }
      ],
      "AccessControlEnforcedDefaultAdminRules()": [
        {
          "details": "At least one of the following rules was violated: - The `DEFAULT_ADMIN_ROLE` must only be managed by itself. - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time. - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps."
        }
      ],
      "AccessControlInvalidDefaultAdmin(address)": [
        {
          "details": "The new default admin is not a valid default admin."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "DistributionExists(bytes32)": [
        {
          "params": {
            "id": "The unique identifier of the distribution that already exists."
          }
        }
      ],
      "DistributionNotFound(bytes32)": [
        {
          "params": {
            "id": "The unique identifier of the distribution that was not found."
          }
        }
      ],
      "InitializerNotFound(bytes32)": [
        {
          "params": {
            "id": "The unique identifier of the distribution that was not found."
          }
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ]
    },
    "events": {
      "DefaultAdminDelayChangeCanceled()": {
        "details": "Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass."
      },
      "DefaultAdminDelayChangeScheduled(uint48,uint48)": {
        "details": "Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next delay to be applied between default admin transfer after `effectSchedule` has passed."
      },
      "DefaultAdminTransferCanceled()": {
        "details": "Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule."
      },
      "DefaultAdminTransferScheduled(address,uint48)": {
        "details": "Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule` passes."
      },
      "DistributionAdded(bytes32,address,address)": {
        "details": "It MUST emit when {IDistributor.addDistribution} is called.",
        "params": {
          "distribution": "The address of the distribution that was added.",
          "id": "The unique identifier of the distribution that was added.",
          "initializer": "The address of the initializer for the distribution."
        }
      },
      "DistributionRemoved(bytes32)": {
        "details": "It MUST emit when {IDistributor.removeDistribution} is called.",
        "params": {
          "id": "The unique identifier of the distribution that was removed."
        }
      },
      "Instantiated(bytes32,uint256,uint256,address[],bytes)": {
        "details": "It MUST emit when {IDistributor.instantiate} is called.",
        "params": {
          "args": "The arguments that were used for instantiation.",
          "distributionId": "The unique identifier of the distribution.",
          "instances": "The addresses of the instances that were created.",
          "newInstanceId": "The unique identifier of the instance.",
          "version": "The version of the distribution, taken either from IDistribution or from IRepository."
        }
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "VersionChanged(bytes32,((uint64,uint64,uint128),uint8),((uint64,uint64,uint128),uint8))": {
        "params": {
          "distributionId": "The unique identifier of the distribution.",
          "newRequirement": "The new version requirement (hashed for indexing).",
          "newRequirementData": "The new version requirement data."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "acceptDefaultAdminTransfer()": {
        "details": "Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. After calling the function: - `DEFAULT_ADMIN_ROLE` should be granted to the caller. - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder. - {pendingDefaultAdmin} should be reset to zero values. Requirements: - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`. - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed."
      },
      "addDistribution(address,address,((uint64,uint64,uint128),uint8))": {
        "details": "WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.",
        "params": {
          "initializer": "The address that initializes the distribution.",
          "repository": "The repository to which the distribution will be added.",
          "requirement": "The version requirements for the distribution."
        }
      },
      "addDistribution(bytes32,address)": {
        "details": "This function can only be called by an account with the `DEFAULT_ADMIN_ROLE`.",
        "params": {
          "id": "The unique identifier for the distribution.",
          "initializer": "The address that initializes the distribution."
        }
      },
      "afterCall(bytes,bytes4,address,uint256,bytes,bytes)": {
        "details": "it will revert if: (1) `msg.sender` is not a valid instance; (2) `maybeInstance` is not a valid instance (3) `instanceId` belongs to disactivated distribution",
        "params": {
          "beforeCallResult": "The data returned by `beforeCallValidation`.",
          "configuration": "Middleware-specific configuration data.",
          "data": "The calldata for the function call.",
          "selector": "The function selector being called.",
          "sender": "The address initiating the call.",
          "value": "The amount of ETH sent with the call (if any)."
        }
      },
      "beforeCall(bytes,bytes4,address,uint256,bytes)": {
        "details": "it will revert if: (1) `msg.sender` is not a valid instance; (2) `maybeInstance` is not a valid instance (3) `instanceId` belongs to disactivated distribution",
        "params": {
          "configuration": "Middleware-specific configuration data.",
          "data": "The calldata for the function call.",
          "selector": "The function selector being called.",
          "sender": "The address initiating the call.",
          "value": "The amount of ETH sent with the call (if any)."
        },
        "returns": {
          "_0": "beforeCallResult Arbitrary data to be passed to `afterCallValidation`."
        }
      },
      "beginDefaultAdminTransfer(address)": {
        "details": "Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance after the current timestamp plus a {defaultAdminDelay}. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminRoleChangeStarted event."
      },
      "cancelDefaultAdminTransfer()": {
        "details": "Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}. A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminTransferCanceled event."
      },
      "changeDefaultAdminDelay(uint48)": {
        "details": "Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting into effect after the current timestamp plus a {defaultAdminDelay}. This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay} set before calling. The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin} complete transfer (including acceptance). The schedule is designed for two scenarios: - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by {defaultAdminDelayIncreaseWait}. - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`. A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change. Requirements: - Only can be called by the current {defaultAdmin}. Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event."
      },
      "changeVersion(bytes32,((uint64,uint64,uint128),uint8))": {
        "params": {
          "distributionId": "The unique identifier of the distribution whose version requirement is to be changed.",
          "newRequirement": "The new version requirement to be set for the distribution."
        }
      },
      "defaultAdmin()": {
        "details": "Returns the address of the current `DEFAULT_ADMIN_ROLE` holder."
      },
      "defaultAdminDelay()": {
        "details": "Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started. This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set the acceptance schedule. NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this function returns the new delay. See {changeDefaultAdminDelay}."
      },
      "defaultAdminDelayIncreaseWait()": {
        "details": "Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay}) to take effect. Default to 5 days. When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds) that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can be overrode for a custom {defaultAdminDelay} increase scheduling. IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise, there's a risk of setting a high new delay that goes into effect almost immediately without the possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds)."
      },
      "getDistributionId(address)": {
        "params": {
          "instance": "The address of the instance for which the distribution ID is being requested."
        },
        "returns": {
          "_0": "The distribution ID as a bytes32 value."
        }
      },
      "getDistributions()": {
        "returns": {
          "_0": "An array of unique identifiers of all distributions."
        }
      },
      "getInstanceId(address)": {
        "params": {
          "instance": "The address of the instance whose ID is to be retrieved."
        },
        "returns": {
          "_0": "The unique identifier (uint256) associated with the specified instance address."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "See {AccessControl-grantRole}. Reverts for `DEFAULT_ADMIN_ROLE`."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "instantiate(bytes32,bytes)": {
        "params": {
          "args": "The calldata arguments required for the instantiation process.",
          "id": "The unique identifier for the contract to be instantiated."
        },
        "returns": {
          "name": "The name of the instantiated distribution.",
          "srcs": "An array of instantiated infrastructure",
          "version": "The version number of the instantiated distribution."
        }
      },
      "owner()": {
        "details": "See {IERC5313-owner}."
      },
      "pendingDefaultAdmin()": {
        "details": "Returns a tuple of a `newAdmin` and an accept schedule. After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role by calling {acceptDefaultAdminTransfer}, completing the role transfer. A zero value only in `acceptSchedule` indicates no pending admin transfer. NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced."
      },
      "pendingDefaultAdminDelay()": {
        "details": "Returns a tuple of `newDelay` and an effect schedule. After the `schedule` passes, the `newDelay` will get into effect immediately for every new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}. A zero value only in `effectSchedule` indicates no pending delay change. NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay} will be zero after the effect schedule."
      },
      "removeDistribution(bytes32)": {
        "details": "This function can only be called by an account with the `DEFAULT_ADMIN_ROLE`.",
        "params": {
          "id": "The unique identifier of the distribution entry to be removed."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "See {AccessControl-renounceRole}. For the `DEFAULT_ADMIN_ROLE`, it only allows renouncing in two steps by first calling {beginDefaultAdminTransfer} to the `address(0)`, so it's required that the {pendingDefaultAdmin} schedule has also passed when calling this function. After its execution, it will not be possible to call `onlyRole(DEFAULT_ADMIN_ROLE)` functions. NOTE: Renouncing `DEFAULT_ADMIN_ROLE` will leave the contract without a {defaultAdmin}, thereby disabling any functionality that is only available for it, and the possibility of reassigning a non-administrated role."
      },
      "revokeRole(bytes32,address)": {
        "details": "See {AccessControl-revokeRole}. Reverts for `DEFAULT_ADMIN_ROLE`."
      },
      "rollbackDefaultAdminDelay()": {
        "details": "Cancels a scheduled {defaultAdminDelay} change. Requirements: - Only can be called by the current {defaultAdmin}. May emit a DefaultAdminDelayChangeCanceled event."
      },
      "setInstantiationCost(bytes32,uint256)": {
        "params": {
          "cost": "cost of instantiation",
          "id": "distributors id"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165."
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId` and `interfaceId` is not 0xffffffff, `false` otherwise."
        }
      }
    },
    "title": "DAODistributor",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DistributionExists(bytes32)": [
        {
          "notice": "Error indicating that a distribution with the specified ID already exists."
        }
      ],
      "DistributionNotFound(bytes32)": [
        {
          "notice": "Error indicating that the distribution with the specified ID was not found."
        }
      ],
      "InitializerNotFound(bytes32)": [
        {
          "notice": "Error indicating that the initializer for the distribution was not found."
        }
      ]
    },
    "events": {
      "DistributionAdded(bytes32,address,address)": {
        "notice": "Event emitted when a distribution is added."
      },
      "DistributionRemoved(bytes32)": {
        "notice": "Event emitted when a distribution is removed."
      },
      "Instantiated(bytes32,uint256,uint256,address[],bytes)": {
        "notice": "Event emitted when a new distribution is instantiated."
      },
      "VersionChanged(bytes32,((uint64,uint64,uint128),uint8),((uint64,uint64,uint128),uint8))": {
        "notice": "Emitted when the version of the distributor is changed."
      }
    },
    "kind": "user",
    "methods": {
      "addDistribution(address,address,((uint64,uint64,uint128),uint8))": {
        "notice": "Adds a new versioned distribution to the repository."
      },
      "addDistribution(bytes32,address)": {
        "notice": "Adds a new distribution with the given identifier and initializer address."
      },
      "afterCall(bytes,bytes4,address,uint256,bytes,bytes)": {
        "notice": "This is ERC7746 hook must be called by instance methods that access scope is limited to the same instance or distribution"
      },
      "beforeCall(bytes,bytes4,address,uint256,bytes)": {
        "notice": "This is ERC7746 hook must be called by instance methods that access scope is limited to the same instance or distribution"
      },
      "changeVersion(bytes32,((uint64,uint64,uint128),uint8))": {
        "notice": "Changes the version requirement for a specific distribution."
      },
      "getDistributionId(address)": {
        "notice": "Retrieves the distribution ID associated with a given instance address."
      },
      "getDistributions()": {
        "notice": "Retrieves the unique identifiers of all distributions."
      },
      "getInstanceId(address)": {
        "notice": "Retrieves the unique identifier for a given instance address."
      },
      "instantiate(bytes32,bytes)": {
        "notice": "Instantiates a new contract with the given identifier and arguments."
      },
      "removeDistribution(bytes32)": {
        "notice": "Removes a distribution entry identified by the given ID."
      },
      "setInstantiationCost(bytes32,uint256)": {
        "notice": "Sets instantiation cost on a specific instantiation id"
      },
      "supportsInterface(bytes4)": {
        "notice": "This function checks if the contract implements the interface defined by ERC165"
      }
    },
    "notice": "This contract is a distributor for Peeramid Labs. It is designed to handle the distribution logic specific to Peeramid Labs. The contract leverages access control mechanisms to ensure that only authorized users can perform certain actions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5425,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "distributionsSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Bytes32Set)4917_storage"
      },
      {
        "astId": 5429,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "instanceIds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5433,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "distributionOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 5438,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "distributionComponents",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_struct(DistributionComponent)5414_storage)"
      },
      {
        "astId": 5443,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "versionRequirements",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_struct(VersionRequirement)6860_storage)"
      },
      {
        "astId": 5448,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "instanceVersions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Version)6844_storage)"
      },
      {
        "astId": 5450,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "numInstances",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6323,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "paymentToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)1282"
      },
      {
        "astId": 6325,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_beneficiary",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6329,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "instantiationCosts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 6331,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "defaultInstantiationCost",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 26,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_roles",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)21_storage)"
      },
      {
        "astId": 400,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_pendingDefaultAdmin",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 402,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_pendingDefaultAdminSchedule",
        "offset": 20,
        "slot": "13",
        "type": "t_uint48"
      },
      {
        "astId": 404,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_currentDelay",
        "offset": 26,
        "slot": "13",
        "type": "t_uint48"
      },
      {
        "astId": 406,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_currentDefaultAdmin",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 408,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_pendingDelay",
        "offset": 20,
        "slot": "14",
        "type": "t_uint48"
      },
      {
        "astId": 410,
        "contract": "src/distributors/DAODistributor.sol:DAODistributor",
        "label": "_pendingDelaySchedule",
        "offset": 26,
        "slot": "14",
        "type": "t_uint48"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1282": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(requirements)6853": {
        "encoding": "inplace",
        "label": "enum LibSemver.requirements",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(DistributionComponent)5414_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Distributor.DistributionComponent)",
        "numberOfBytes": "32",
        "value": "t_struct(DistributionComponent)5414_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)21_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)21_storage"
      },
      "t_mapping(t_bytes32,t_struct(VersionRequirement)6860_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct LibSemver.VersionRequirement)",
        "numberOfBytes": "32",
        "value": "t_struct(VersionRequirement)6860_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(Version)6844_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LibSemver.Version)",
        "numberOfBytes": "32",
        "value": "t_struct(Version)6844_storage"
      },
      "t_struct(Bytes32Set)4917_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4916,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4723_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(DistributionComponent)5414_storage": {
        "encoding": "inplace",
        "label": "struct Distributor.DistributionComponent",
        "members": [
          {
            "astId": 5411,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "distributionLocation",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5413,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "initializer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)21_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 18,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "hasRole",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 20,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4723_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4718,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4722,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Version)6844_storage": {
        "encoding": "inplace",
        "label": "struct LibSemver.Version",
        "members": [
          {
            "astId": 6839,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "major",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6841,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "minor",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6843,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "patch",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VersionRequirement)6860_storage": {
        "encoding": "inplace",
        "label": "struct LibSemver.VersionRequirement",
        "members": [
          {
            "astId": 6856,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "version",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Version)6844_storage"
          },
          {
            "astId": 6859,
            "contract": "src/distributors/DAODistributor.sol:DAODistributor",
            "label": "requirement",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(requirements)6853"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}